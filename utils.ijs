NB. JOD dictionary dump: 20 Nov 2012 19:46:10
NB. Generated with JOD version; 0.9.90; 21; 16 Nov 2012 23:04:32
NB.
NB. Names & DidNums on current path
NB. +-----+---------------------------------------+
NB. |utils|159564297955831206566835363531606576466|
NB. +-----+---------------------------------------+

9!:41 [ 1 NB.{*JOD*}
cocurrent 'base' NB.{*JOD*}
sonl_z_=: 'sonl__MK__JODobj i.4' NB.{*JOD*}
showpass_z_=:] [ 1!:2&2 NB.{*JOD*}
SOLOCALE_z_=:":>SO__JODobj NB.{*JOD*}
soput_z_=:SOLOCALE&put NB.{*JOD*}
soclear_z_=: '0 0 $ clearso__MK__JODobj 0' NB.{*JOD*}

cocurrent SO__JODobj NB.{*JOD*}


BASE64=:'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'

BOM=:239 187 191{a.

CLASSAUTHOR=:'John D. Baker -- bakerjd99@gmail.com'

CPIANNUAL=:2 95$9.90000000000000036 10 10.0999999999999996 10.9000000000000004 12.8000000000000007 15.0999999999999996 17.3000000000000007 20 17.8999999999999986 16.8000000000000007 17.1000000000000014 17.1000000000000014 17.5 17.6999999999999993 17.3999999999999986 17.1000000000000014 17.1000000000000014 16.6999999999999993 15.1999999999999993 13.6999999999999993 13 13.4000000000000004 13.6999999999999993 13.9000000000000004 14.4000000000000004 14.0999999999999996 13.9000000000000004 14 14.6999999999999993 16.3000000000000007 17.3000000000000007 17.6000000000000014 18 19.5 22.3000000000000007 24.1000000000000014 23.8000000000000007 24.1000000000000014 26 26.5 26.6999999999999993 26.8999999999999986 26.8000000000000007 27.1999999999999993 28.1000000000000014 28.8999999999999986 29.1000000000000014 29.6000000000000014 29.8999999999999986 30.1999999999999993 30.6000000000000014 31 31.5 32.3999999999999986 33.3999999999999986 34.7999999999999972 36.7000000000000028 38.7999999999999972 40.5 41.7999999999999972 44.3999999999999986 49.2999999999999972 53.7999999999999972 56.8999999999999986 60.6000000000000014 65.2000000000000028 72.5999999999999943 82.4000000000000057 90.9000000000000057 96.5 99.5999999999999943 103.900000000000006 107.599999999999994 109.599999999999994 113.599999999999994 118.299999999999997 124 130.699999999999989 136.199999999999989 140.300000000000011 144.5 148.199999999999989 152.400000000000006 156.900000000000006 160.5 163 166.599999999999994 172.199999999999989 177.099999999999994 179.900000000000006 184 188.900000000000006 195.300000000000011 201.599999999999994 207.342000000000013 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007

CR=:13{a.

CRLF=:13 10{a.

CUUR0000SA0=:1286 3$'Year';'Period';'Value';'1913';'Jan';9.80000000000000071;'1913';'Feb';9.80000000000000071;'1913';'Mar';9.80000000000000071;'1913';'Apr';9.80000000000000071;'1913';'May';9.69999999999999929;'1913';'Jun';9.80000000000000071;'1913';'Jul';9.90000000000000036;'1913';'Aug';9.90000000000000036;'1913';'Sep';10;'1913';'Oct';10;'1913';'Nov';10.0999999999999996;'1913';'Dec';10;'1913';'Annual';9.90000000000000036;'1914';'Jan';10;'1914';'Feb';9.90000000000000036;'1914';'Mar';9.90000000000000036;'1914';'Apr';9.80000000000000071;'1914';'May';9.90000000000000036;'1914';'Jun';9.90000000000000036;'1914';'Jul';10;'1914';'Aug';10.1999999999999993;'1914';'Sep';10.1999999999999993;'1914';'Oct';10.0999999999999996;'1914';'Nov';10.1999999999999993;'1914';'Dec';10.0999999999999996;'1914';'Annual';10;'1915';'Jan';10.0999999999999996;'1915';'Feb';10;'1915';'Mar';9.90000000000000036;'1915';'Apr';10;'1915';'May';10.0999999999999996;'1915';'Jun';10.0999999999999996;'1915';'Jul';10.0999999999999996;'1915';'Aug';10.0999999999999996;'1915';'Sep';10.0999999999999996;'1915';'Oct';10.1999999999999993;'1915';'Nov';10.3000000000000007;'1915';'Dec';10.3000000000000007;'1915';'Annual';10.0999999999999996;'1916';'Jan';10.4000000000000004;'1916';'Feb';10.4000000000000004;'1916';'Mar';10.5;'1916';'Apr';10.5999999999999996;'1916';'May';10.6999999999999993;'1916';'Jun';10.8000000000000007;'1916';'Jul';10.8000000000000007;'1916';'Aug';10.9000000000000004;'1916';'Sep';11.0999999999999996;'1916';'Oct';11.3000000000000007;'1916';'Nov';11.5;'1916';'Dec';11.5999999999999996;'1916';'Annual';10.9000000000000004;'1917';'Jan';11.6999999999999993;'1917';'Feb';12;'1917';'Mar';12;'1917';'Apr';12.5999999999999996;'1917';'May';12.8000000000000007;'1917';'Jun';13;'1917';'Jul';12.8000000000000007;'1917';'Aug';13;'1917';'Sep';13.3000000000000007;'1917';'Oct';13.5;'1917';'Nov';13.5;'1917';'Dec';13.6999999999999993;'1917';'Annual';12.8000000000000007;'1918';'Jan';14;'1918';'Feb';14.0999999999999996;'1918';'Mar';14;'1918';'Apr';14.1999999999999993;'1918';'May';14.5;'1918';'Jun';14.6999999999999993;'1918';'Jul';15.0999999999999996;'1918';'Aug';15.4000000000000004;'1918';'Sep';15.6999999999999993;'1918';'Oct';16;'1918';'Nov';16.3000000000000007;'1918';'Dec';16.5;'1918';'Annual';15.0999999999999996;'1919';'Jan';16.5;'1919';'Feb';16.1999999999999993;'1919';'Mar';16.3999999999999986;'1919';'Apr';16.6999999999999993;'1919';'May';16.8999999999999986;'1919';'Jun';16.8999999999999986;'1919';'Jul';17.3999999999999986;'1919';'Aug';17.6999999999999993;'1919';'Sep';17.8000000000000007;'1919';'Oct';18.1000000000000014;'1919';'Nov';18.5;'1919';'Dec';18.8999999999999986;'1919';'Annual';17.3000000000000007;'1920';'Jan';19.3000000000000007;'1920';'Feb';19.5;'1920';'Mar';19.6999999999999993;'1920';'Apr';20.3000000000000007;'1920';'May';20.6000000000000014;'1920';'Jun';20.8999999999999986;'1920';'Jul';20.8000000000000007;'1920';'Aug';20.3000000000000007;'1920';'Sep';20;'1920';'Oct';19.8999999999999986;'1920';'Nov';19.8000000000000007;'1920';'Dec';19.3999999999999986;'1920';'Annual';20;'1921';'Jan';19;'1921';'Feb';18.3999999999999986;'1921';'Mar';18.3000000000000007;'1921';'Apr';18.1000000000000014;'1921';'May';17.6999999999999993;'1921';'Jun';17.6000000000000014;'1921';'Jul';17.6999999999999993;'1921';'Aug';17.6999999999999993;'1921';'Sep';17.5;'1921';'Oct';17.5;'1921';'Nov';17.3999999999999986;'1921';'Dec';17.3000000000000007;'1921';'Annual';17.8999999999999986;'1922';'Jan';16.8999999999999986;'1922';'Feb';16.8999999999999986;'1922';'Mar';16.6999999999999993;'1922';'Apr';16.6999999999999993;'1922';'May';16.6999999999999993;'1922';'Jun';16.6999999999999993;'1922';'Jul';16.8000000000000007;'1922';'Aug';16.6000000000000014;'1922';'Sep';16.6000000000000014;'1922';'Oct';16.6999999999999993;'1922';'Nov';16.8000000000000007;'1922';'Dec';16.8999999999999986;'1922';'Annual';16.8000000000000007;'1923';'Jan';16.8000000000000007;'1923';'Feb';16.8000000000000007;'1923';'Mar';16.8000000000000007;'1923';'Apr';16.8999999999999986;'1923';'May';16.8999999999999986;'1923';'Jun';17;'1923';'Jul';17.1999999999999993;'1923';'Aug';17.1000000000000014;'1923';'Sep';17.1999999999999993;'1923';'Oct';17.3000000000000007;'1923';'Nov';17.3000000000000007;'1923';'Dec';17.3000000000000007;'1923';'Annual';17.1000000000000014;'1924';'Jan';17.3000000000000007;'1924';'Feb';17.1999999999999993;'1924';'Mar';17.1000000000000014;'1924';'Apr';17;'1924';'May';17;'1924';'Jun';17;'1924';'Jul';17.1000000000000014;'1924';'Aug';17;'1924';'Sep';17.1000000000000014;'1924';'Oct';17.1999999999999993;'1924';'Nov';17.1999999999999993;'1924';'Dec';17.3000000000000007;'1924';'Annual';17.1000000000000014;'1925';'Jan';17.3000000000000007;'1925';'Feb';17.1999999999999993;'1925';'Mar';17.3000000000000007;'1925';'Apr';17.1999999999999993;'1925';'May';17.3000000000000007;'1925';'Jun';17.5;'1925';'Jul';17.6999999999999993;'1925';'Aug';17.6999999999999993;'1925';'Sep';17.6999999999999993;'1925';'Oct';17.6999999999999993;'1925';'Nov';18;'1925';'Dec';17.8999999999999986;'1925';'Annual';17.5;'1926';'Jan';17.8999999999999986;'1926';'Feb';17.8999999999999986;'1926';'Mar';17.8000000000000007;'1926';'Apr';17.8999999999999986;'1926';'May';17.8000000000000007;'1926';'Jun';17.6999999999999993;'1926';'Jul';17.5;'1926';'Aug';17.3999999999999986;'1926';'Sep';17.5;'1926';'Oct';17.6000000000000014;'1926';'Nov';17.6999999999999993;'1926';'Dec';17.6999999999999993;'1926';'Annual';17.6999999999999993;'1927';'Jan';17.5;'1927';'Feb';17.3999999999999986;'1927';'Mar';17.3000000000000007;'1927';'Apr';17.3000000000000007;'1927';'May';17.3999999999999986;'1927';'Jun';17.6000000000000014;'1927';'Jul';17.3000000000000007;'1927';'Aug';17.1999999999999993;'1927';'Sep';17.3000000000000007;'1927';'Oct';17.3999999999999986;'1927';'Nov';17.3000000000000007;'1927';'Dec';17.3000000000000007;'1927';'Annual';17.3999999999999986;'1928';'Jan';17.3000000000000007;'1928';'Feb';17.1000000000000014;'1928';'Mar';17.1000000000000014;'1928';'Apr';17.1000000000000014;'1928';'May';17.1999999999999993;'1928';'Jun';17.1000000000000014;'1928';'Jul';17.1000000000000014;'1928';'Aug';17.1000000000000014;'1928';'Sep';17.3000000000000007;'1928';'Oct';17.1999999999999993;'1928';'Nov';17.1999999999999993;'1928';'Dec';17.1000000000000014;'1928';'Annual';17.1000000000000014;'1929';'Jan';17.1000000000000014;'1929';'Feb';17.1000000000000014;'1929';'Mar';17;'1929';'Apr';16.8999999999999986;'1929';'May';17;'1929';'Jun';17.1000000000000014;'1929';'Jul';17.3000000000000007;'1929';'Aug';17.3000000000000007;'1929';'Sep';17.3000000000000007;'1929';'Oct';17.3000000000000007;'1929';'Nov';17.3000000000000007;'1929';'Dec';17.1999999999999993;'1929';'Annual';17.1000000000000014;'1930';'Jan';17.1000000000000014;'1930';'Feb';17;'1930';'Mar';16.8999999999999986;'1930';'Apr';17;'1930';'May';16.8999999999999986;'1930';'Jun';16.8000000000000007;'1930';'Jul';16.6000000000000014;'1930';'Aug';16.5;'1930';'Sep';16.6000000000000014;'1930';'Oct';16.5;'1930';'Nov';16.3999999999999986;'1930';'Dec';16.1000000000000014;'1930';'Annual';16.6999999999999993;'1931';'Jan';15.9000000000000004;'1931';'Feb';15.6999999999999993;'1931';'Mar';15.5999999999999996;'1931';'Apr';15.5;'1931';'May';15.3000000000000007;'1931';'Jun';15.0999999999999996;'1931';'Jul';15.0999999999999996;'1931';'Aug';15.0999999999999996;'1931';'Sep';15;'1931';'Oct';14.9000000000000004;'1931';'Nov';14.6999999999999993;'1931';'Dec';14.5999999999999996;'1931';'Annual';15.1999999999999993;'1932';'Jan';14.3000000000000007;'1932';'Feb';14.0999999999999996;'1932';'Mar';14;'1932';'Apr';13.9000000000000004;'1932';'May';13.6999999999999993;'1932';'Jun';13.5999999999999996;'1932';'Jul';13.5999999999999996;'1932';'Aug';13.5;'1932';'Sep';13.4000000000000004;'1932';'Oct';13.3000000000000007;'1932';'Nov';13.1999999999999993;'1932';'Dec';13.0999999999999996;'1932';'Annual';13.6999999999999993;'1933';'Jan';12.9000000000000004;'1933';'Feb';12.6999999999999993;'1933';'Mar';12.5999999999999996;'1933';'Apr';12.5999999999999996;'1933';'May';12.5999999999999996;'1933';'Jun';12.6999999999999993;'1933';'Jul';13.0999999999999996;'1933';'Aug';13.1999999999999993;'1933';'Sep';13.1999999999999993;'1933';'Oct';13.1999999999999993;'1933';'Nov';13.1999999999999993;'1933';'Dec';13.1999999999999993;'1933';'Annual';13;'1934';'Jan';13.1999999999999993;'1934';'Feb';13.3000000000000007;'1934';'Mar';13.3000000000000007;'1934';'Apr';13.3000000000000007;'1934';'May';13.3000000000000007;'1934';'Jun';13.4000000000000004;'1934';'Jul';13.4000000000000004;'1934';'Aug';13.4000000000000004;'1934';'Sep';13.5999999999999996;'1934';'Oct';13.5;'1934';'Nov';13.5;'1934';'Dec';13.4000000000000004;'1934';'Annual';13.4000000000000004;'1935';'Jan';13.5999999999999996;'1935';'Feb';13.6999999999999993;'1935';'Mar';13.6999999999999993;'1935';'Apr';13.8000000000000007;'1935';'May';13.8000000000000007;'1935';'Jun';13.6999999999999993;'1935';'Jul';13.6999999999999993;'1935';'Aug';13.6999999999999993;'1935';'Sep';13.6999999999999993;'1935';'Oct';13.6999999999999993;'1935';'Nov';13.8000000000000007;'1935';'Dec';13.8000000000000007;'1935';'Annual';13.6999999999999993;'1936';'Jan';13.8000000000000007;'1936';'Feb';13.8000000000000007;'1936';'Mar';13.6999999999999993;'1936';'Apr';13.6999999999999993;'1936';'May';13.6999999999999993;'1936';'Jun';13.8000000000000007;'1936';'Jul';13.9000000000000004;'1936';'Aug';14;'1936';'Sep';14;'1936';'Oct';14;'1936';'Nov';14;'1936';'Dec';14;'1936';'Annual';13.9000000000000004;'1937';'Jan';14.0999999999999996;'1937';'Feb';14.0999999999999996;'1937';'Mar';14.1999999999999993;'1937';'Apr';14.3000000000000007;'1937';'May';14.4000000000000004;'1937';'Jun';14.4000000000000004;'1937';'Jul';14.5;'1937';'Aug';14.5;'1937';'Sep';14.5999999999999996;'1937';'Oct';14.5999999999999996;'1937';'Nov';14.5;'1937';'Dec';14.4000000000000004;'1937';'Annual';14.4000000000000004;'1938';'Jan';14.1999999999999993;'1938';'Feb';14.0999999999999996;'1938';'Mar';14.0999999999999996;'1938';'Apr';14.1999999999999993;'1938';'May';14.0999999999999996;'1938';'Jun';14.0999999999999996;'1938';'Jul';14.0999999999999996;'1938';'Aug';14.0999999999999996;'1938';'Sep';14.0999999999999996;'1938';'Oct';14;'1938';'Nov';14;'1938';'Dec';14;'1938';'Annual';14.0999999999999996;'1939';'Jan';14;'1939';'Feb';13.9000000000000004;'1939';'Mar';13.9000000000000004;'1939';'Apr';13.8000000000000007;'1939';'May';13.8000000000000007;'1939';'Jun';13.8000000000000007;'1939';'Jul';13.8000000000000007;'1939';'Aug';13.8000000000000007;'1939';'Sep';14.0999999999999996;'1939';'Oct';14;'1939';'Nov';14;'1939';'Dec';14;'1939';'Annual';13.9000000000000004;'1940';'Jan';13.9000000000000004;'1940';'Feb';14;'1940';'Mar';14;'1940';'Apr';14;'1940';'May';14;'1940';'Jun';14.0999999999999996;'1940';'Jul';14;'1940';'Aug';14;'1940';'Sep';14;'1940';'Oct';14;'1940';'Nov';14;'1940';'Dec';14.0999999999999996;'1940';'Annual';14;'1941';'Jan';14.0999999999999996;'1941';'Feb';14.0999999999999996;'1941';'Mar';14.1999999999999993;'1941';'Apr';14.3000000000000007;'1941';'May';14.4000000000000004;'1941';'Jun';14.6999999999999993;'1941';'Jul';14.6999999999999993;'1941';'Aug';14.9000000000000004;'1941';'Sep';15.0999999999999996;'1941';'Oct';15.3000000000000007;'1941';'Nov';15.4000000000000004;'1941';'Dec';15.5;'1941';'Annual';14.6999999999999993;'1942';'Jan';15.6999999999999993;'1942';'Feb';15.8000000000000007;'1942';'Mar';16;'1942';'Apr';16.1000000000000014;'1942';'May';16.3000000000000007;'1942';'Jun';16.3000000000000007;'1942';'Jul';16.3999999999999986;'1942';'Aug';16.5;'1942';'Sep';16.5;'1942';'Oct';16.6999999999999993;'1942';'Nov';16.8000000000000007;'1942';'Dec';16.8999999999999986;'1942';'Annual';16.3000000000000007;'1943';'Jan';16.8999999999999986;'1943';'Feb';16.8999999999999986;'1943';'Mar';17.1999999999999993;'1943';'Apr';17.3999999999999986;'1943';'May';17.5;'1943';'Jun';17.5;'1943';'Jul';17.3999999999999986;'1943';'Aug';17.3000000000000007;'1943';'Sep';17.3999999999999986;'1943';'Oct';17.3999999999999986;'1943';'Nov';17.3999999999999986;'1943';'Dec';17.3999999999999986;'1943';'Annual';17.3000000000000007;'1944';'Jan';17.3999999999999986;'1944';'Feb';17.3999999999999986;'1944';'Mar';17.3999999999999986;'1944';'Apr';17.5;'1944';'May';17.5;'1944';'Jun';17.6000000000000014;'1944';'Jul';17.6999999999999993;'1944';'Aug';17.6999999999999993;'1944';'Sep';17.6999999999999993;'1944';'Oct';17.6999999999999993;'1944';'Nov';17.6999999999999993;'1944';'Dec';17.8000000000000007;'1944';'Annual';17.6000000000000014;'1945';'Jan';17.8000000000000007;'1945';'Feb';17.8000000000000007;'1945';'Mar';17.8000000000000007;'1945';'Apr';17.8000000000000007;'1945';'May';17.8999999999999986;'1945';'Jun';18.1000000000000014;'1945';'Jul';18.1000000000000014;'1945';'Aug';18.1000000000000014;'1945';'Sep';18.1000000000000014;'1945';'Oct';18.1000000000000014;'1945';'Nov';18.1000000000000014;'1945';'Dec';18.1999999999999993;'1945';'Annual';18;'1946';'Jan';18.1999999999999993;'1946';'Feb';18.1000000000000014;'1946';'Mar';18.3000000000000007;'1946';'Apr';18.3999999999999986;'1946';'May';18.5;'1946';'Jun';18.6999999999999993;'1946';'Jul';19.8000000000000007;'1946';'Aug';20.1999999999999993;'1946';'Sep';20.3999999999999986;'1946';'Oct';20.8000000000000007;'1946';'Nov';21.3000000000000007;'1946';'Dec';21.5;'1946';'Annual';19.5;'1947';'Jan';21.5;'1947';'Feb';21.5;'1947';'Mar';21.8999999999999986;'1947';'Apr';21.8999999999999986;'1947';'May';21.8999999999999986;'1947';'Jun';22;'1947';'Jul';22.1999999999999993;'1947';'Aug';22.5;'1947';'Sep';23;'1947';'Oct';23;'1947';'Nov';23.1000000000000014;'1947';'Dec';23.3999999999999986;'1947';'Annual';22.3000000000000007;'1948';'Jan';23.6999999999999993;'1948';'Feb';23.5;'1948';'Mar';23.3999999999999986;'1948';'Apr';23.8000000000000007;'1948';'May';23.8999999999999986;'1948';'Jun';24.1000000000000014;'1948';'Jul';24.3999999999999986;'1948';'Aug';24.5;'1948';'Sep';24.5;'1948';'Oct';24.3999999999999986;'1948';'Nov';24.1999999999999993;'1948';'Dec';24.1000000000000014;'1948';'Annual';24.1000000000000014;'1949';'Jan';24;'1949';'Feb';23.8000000000000007;'1949';'Mar';23.8000000000000007;'1949';'Apr';23.8999999999999986;'1949';'May';23.8000000000000007;'1949';'Jun';23.8999999999999986;'1949';'Jul';23.6999999999999993;'1949';'Aug';23.8000000000000007;'1949';'Sep';23.8999999999999986;'1949';'Oct';23.6999999999999993;'1949';'Nov';23.8000000000000007;'1949';'Dec';23.6000000000000014;'1949';'Annual';23.8000000000000007;'1950';'Jan';23.5;'1950';'Feb';23.5;'1950';'Mar';23.6000000000000014;'1950';'Apr';23.6000000000000014;'1950';'May';23.6999999999999993;'1950';'Jun';23.8000000000000007;'1950';'Jul';24.1000000000000014;'1950';'Aug';24.3000000000000007;'1950';'Sep';24.3999999999999986;'1950';'Oct';24.6000000000000014;'1950';'Nov';24.6999999999999993;'1950';'Dec';25;'1950';'Annual';24.1000000000000014;'1951';'Jan';25.3999999999999986;'1951';'Feb';25.6999999999999993;'1951';'Mar';25.8000000000000007;'1951';'Apr';25.8000000000000007;'1951';'May';25.8999999999999986;'1951';'Jun';25.8999999999999986;'1951';'Jul';25.8999999999999986;'1951';'Aug';25.8999999999999986;'1951';'Sep';26.1000000000000014;'1951';'Oct';26.1999999999999993;'1951';'Nov';26.3999999999999986;'1951';'Dec';26.5;'1951';'Annual';26;'1952';'Jan';26.5;'1952';'Feb';26.3000000000000007;'1952';'Mar';26.3000000000000007;'1952';'Apr';26.3999999999999986;'1952';'May';26.3999999999999986;'1952';'Jun';26.5;'1952';'Jul';26.6999999999999993;'1952';'Aug';26.6999999999999993;'1952';'Sep';26.6999999999999993;'1952';'Oct';26.6999999999999993;'1952';'Nov';26.6999999999999993;'1952';'Dec';26.6999999999999993;'1952';'Annual';26.5;'1953';'Jan';26.6000000000000014;'1953';'Feb';26.5;'1953';'Mar';26.6000000000000014;'1953';'Apr';26.6000000000000014;'1953';'May';26.6999999999999993;'1953';'Jun';26.8000000000000007;'1953';'Jul';26.8000000000000007;'1953';'Aug';26.8999999999999986;'1953';'Sep';26.8999999999999986;'1953';'Oct';27;'1953';'Nov';26.8999999999999986;'1953';'Dec';26.8999999999999986;'1953';'Annual';26.6999999999999993;'1954';'Jan';26.8999999999999986;'1954';'Feb';26.8999999999999986;'1954';'Mar';26.8999999999999986;'1954';'Apr';26.8000000000000007;'1954';'May';26.8999999999999986;'1954';'Jun';26.8999999999999986;'1954';'Jul';26.8999999999999986;'1954';'Aug';26.8999999999999986;'1954';'Sep';26.8000000000000007;'1954';'Oct';26.8000000000000007;'1954';'Nov';26.8000000000000007;'1954';'Dec';26.6999999999999993;'1954';'Annual';26.8999999999999986;'1955';'Jan';26.6999999999999993;'1955';'Feb';26.6999999999999993;'1955';'Mar';26.6999999999999993;'1955';'Apr';26.6999999999999993;'1955';'May';26.6999999999999993;'1955';'Jun';26.6999999999999993;'1955';'Jul';26.8000000000000007;'1955';'Aug';26.8000000000000007;'1955';'Sep';26.8999999999999986;'1955';'Oct';26.8999999999999986;'1955';'Nov';26.8999999999999986;'1955';'Dec';26.8000000000000007;'1955';'Annual';26.8000000000000007;'1956';'Jan';26.8000000000000007;'1956';'Feb';26.8000000000000007;'1956';'Mar';26.8000000000000007;'1956';'Apr';26.8999999999999986;'1956';'May';27;'1956';'Jun';27.1999999999999993;'1956';'Jul';27.3999999999999986;'1956';'Aug';27.3000000000000007;'1956';'Sep';27.3999999999999986;'1956';'Oct';27.5;'1956';'Nov';27.5;'1956';'Dec';27.6000000000000014;'1956';'Annual';27.1999999999999993;'1957';'Jan';27.6000000000000014;'1957';'Feb';27.6999999999999993;'1957';'Mar';27.8000000000000007;'1957';'Apr';27.8999999999999986;'1957';'May';28;'1957';'Jun';28.1000000000000014;'1957';'Jul';28.3000000000000007;'1957';'Aug';28.3000000000000007;'1957';'Sep';28.3000000000000007;'1957';'Oct';28.3000000000000007;'1957';'Nov';28.3999999999999986;'1957';'Dec';28.3999999999999986;'1957';'Annual';28.1000000000000014;'1958';'Jan';28.6000000000000014;'1958';'Feb';28.6000000000000014;'1958';'Mar';28.8000000000000007;'1958';'Apr';28.8999999999999986;'1958';'May';28.8999999999999986;'1958';'Jun';28.8999999999999986;'1958';'Jul';29;'1958';'Aug';28.8999999999999986;'1958';'Sep';28.8999999999999986;'1958';'Oct';28.8999999999999986;'1958';'Nov';29;'1958';'Dec';28.8999999999999986;'1958';'Annual';28.8999999999999986;'1959';'Jan';29;'1959';'Feb';28.8999999999999986;'1959';'Mar';28.8999999999999986;'1959';'Apr';29;'1959';'May';29;'1959';'Jun';29.1000000000000014;'1959';'Jul';29.1999999999999993;'1959';'Aug';29.1999999999999993;'1959';'Sep';29.3000000000000007;'1959';'Oct';29.3999999999999986;'1959';'Nov';29.3999999999999986;'1959';'Dec';29.3999999999999986;'1959';'Annual';29.1000000000000014;'1960';'Jan';29.3000000000000007;'1960';'Feb';29.3999999999999986;'1960';'Mar';29.3999999999999986;'1960';'Apr';29.5;'1960';'May';29.5;'1960';'Jun';29.6000000000000014;'1960';'Jul';29.6000000000000014;'1960';'Aug';29.6000000000000014;'1960';'Sep';29.6000000000000014;'1960';'Oct';29.8000000000000007;'1960';'Nov';29.8000000000000007;'1960';'Dec';29.8000000000000007;'1960';'Annual';29.6000000000000014;'1961';'Jan';29.8000000000000007;'1961';'Feb';29.8000000000000007;'1961';'Mar';29.8000000000000007;'1961';'Apr';29.8000000000000007;'1961';'May';29.8000000000000007;'1961';'Jun';29.8000000000000007;'1961';'Jul';30;'1961';'Aug';29.8999999999999986;'1961';'Sep';30;'1961';'Oct';30;'1961';'Nov';30;'1961';'Dec';30;'1961';'Annual';29.8999999999999986;'1962';'Jan';30;'1962';'Feb';30.1000000000000014;'1962';'Mar';30.1000000000000014;'1962';'Apr';30.1999999999999993;'1962';'May';30.1999999999999993;'1962';'Jun';30.1999999999999993;'1962';'Jul';30.3000000000000007;'1962';'Aug';30.3000000000000007;'1962';'Sep';30.3999999999999986;'1962';'Oct';30.3999999999999986;'1962';'Nov';30.3999999999999986;'1962';'Dec';30.3999999999999986;'1962';'Annual';30.1999999999999993;'1963';'Jan';30.3999999999999986;'1963';'Feb';30.3999999999999986;'1963';'Mar';30.5;'1963';'Apr';30.5;'1963';'May';30.5;'1963';'Jun';30.6000000000000014;'1963';'Jul';30.6999999999999993;'1963';'Aug';30.6999999999999993;'1963';'Sep';30.6999999999999993;'1963';'Oct';30.8000000000000007;'1963';'Nov';30.8000000000000007;'1963';'Dec';30.8999999999999986;'1963';'Annual';30.6000000000000014;'1964';'Jan';30.8999999999999986;'1964';'Feb';30.8999999999999986;'1964';'Mar';30.8999999999999986;'1964';'Apr';30.8999999999999986;'1964';'May';30.8999999999999986;'1964';'Jun';31;'1964';'Jul';31.1000000000000014;'1964';'Aug';31;'1964';'Sep';31.1000000000000014;'1964';'Oct';31.1000000000000014;'1964';'Nov';31.1999999999999993;'1964';'Dec';31.1999999999999993;'1964';'Annual';31;'1965';'Jan';31.1999999999999993;'1965';'Feb';31.1999999999999993;'1965';'Mar';31.3000000000000007;'1965';'Apr';31.3999999999999986;'1965';'May';31.3999999999999986;'1965';'Jun';31.6000000000000014;'1965';'Jul';31.6000000000000014;'1965';'Aug';31.6000000000000014;'1965';'Sep';31.6000000000000014;'1965';'Oct';31.6999999999999993;'1965';'Nov';31.6999999999999993;'1965';'Dec';31.8000000000000007;'1965';'Annual';31.5;'1966';'Jan';31.8000000000000007;'1966';'Feb';32;'1966';'Mar';32.1000000000000014;'1966';'Apr';32.2999999999999972;'1966';'May';32.2999999999999972;'1966';'Jun';32.3999999999999986;'1966';'Jul';32.5;'1966';'Aug';32.7000000000000028;'1966';'Sep';32.7000000000000028;'1966';'Oct';32.8999999999999986;'1966';'Nov';32.8999999999999986;'1966';'Dec';32.8999999999999986;'1966';'Annual';32.3999999999999986;'1967';'Jan';32.8999999999999986;'1967';'Feb';32.8999999999999986;'1967';'Mar';33;'1967';'Apr';33.1000000000000014;'1967';'May';33.2000000000000028;'1967';'Jun';33.2999999999999972;'1967';'Jul';33.3999999999999986;'1967';'Aug';33.5;'1967';'Sep';33.6000000000000014;'1967';'Oct';33.7000000000000028;'1967';'Nov';33.7999999999999972;'1967';'Dec';33.8999999999999986;'1967';'Annual';33.3999999999999986;'1968';'Jan';34.1000000000000014;'1968';'Feb';34.2000000000000028;'1968';'Mar';34.2999999999999972;'1968';'Apr';34.3999999999999986;'1968';'May';34.5;'1968';'Jun';34.7000000000000028;'1968';'Jul';34.8999999999999986;'1968';'Aug';35;'1968';'Sep';35.1000000000000014;'1968';'Oct';35.2999999999999972;'1968';'Nov';35.3999999999999986;'1968';'Dec';35.5;'1968';'Annual';34.7999999999999972;'1969';'Jan';35.6000000000000014;'1969';'Feb';35.7999999999999972;'1969';'Mar';36.1000000000000014;'1969';'Apr';36.2999999999999972;'1969';'May';36.3999999999999986;'1969';'Jun';36.6000000000000014;'1969';'Jul';36.7999999999999972;'1969';'Aug';37;'1969';'Sep';37.1000000000000014;'1969';'Oct';37.2999999999999972;'1969';'Nov';37.5;'1969';'Dec';37.7000000000000028;'1969';'Annual';36.7000000000000028;'1970';'Jan';37.7999999999999972;'1970';'Feb';38;'1970';'Mar';38.2000000000000028;'1970';'Apr';38.5;'1970';'May';38.6000000000000014;'1970';'Jun';38.7999999999999972;'1970';'Jul';39;'1970';'Aug';39;'1970';'Sep';39.2000000000000028;'1970';'Oct';39.3999999999999986;'1970';'Nov';39.6000000000000014;'1970';'Dec';39.7999999999999972;'1970';'Annual';38.7999999999999972;'1971';'Jan';39.7999999999999972;'1971';'Feb';39.8999999999999986;'1971';'Mar';40;'1971';'Apr';40.1000000000000014;'1971';'May';40.2999999999999972;'1971';'Jun';40.6000000000000014;'1971';'Jul';40.7000000000000028;'1971';'Aug';40.7999999999999972;'1971';'Sep';40.7999999999999972;'1971';'Oct';40.8999999999999986;'1971';'Nov';40.8999999999999986;'1971';'Dec';41.1000000000000014;'1971';'Annual';40.5;'1972';'Jan';41.1000000000000014;'1972';'Feb';41.2999999999999972;'1972';'Mar';41.3999999999999986;'1972';'Apr';41.5;'1972';'May';41.6000000000000014;'1972';'Jun';41.7000000000000028;'1972';'Jul';41.8999999999999986;'1972';'Aug';42;'1972';'Sep';42.1000000000000014;'1972';'Oct';42.2999999999999972;'1972';'Nov';42.3999999999999986;'1972';'Dec';42.5;'1972';'Annual';41.7999999999999972;'1973';'Jan';42.6000000000000014;'1973';'Feb';42.8999999999999986;'1973';'Mar';43.2999999999999972;'1973';'Apr';43.6000000000000014;'1973';'May';43.8999999999999986;'1973';'Jun';44.2000000000000028;'1973';'Jul';44.2999999999999972;'1973';'Aug';45.1000000000000014;'1973';'Sep';45.2000000000000028;'1973';'Oct';45.6000000000000014;'1973';'Nov';45.8999999999999986;'1973';'Dec';46.2000000000000028;'1973';'Annual';44.3999999999999986;'1974';'Jan';46.6000000000000014;'1974';'Feb';47.2000000000000028;'1974';'Mar';47.7999999999999972;'1974';'Apr';48;'1974';'May';48.6000000000000014;'1974';'Jun';49;'1974';'Jul';49.3999999999999986;'1974';'Aug';50;'1974';'Sep';50.6000000000000014;'1974';'Oct';51.1000000000000014;'1974';'Nov';51.5;'1974';'Dec';51.8999999999999986;'1974';'Annual';49.2999999999999972;'1975';'Jan';52.1000000000000014;'1975';'Feb';52.5;'1975';'Mar';52.7000000000000028;'1975';'Apr';52.8999999999999986;'1975';'May';53.2000000000000028;'1975';'Jun';53.6000000000000014;'1975';'Jul';54.2000000000000028;'1975';'Aug';54.2999999999999972;'1975';'Sep';54.6000000000000014;'1975';'Oct';54.8999999999999986;'1975';'Nov';55.2999999999999972;'1975';'Dec';55.5;'1975';'Annual';53.7999999999999972;'1976';'Jan';55.6000000000000014;'1976';'Feb';55.7999999999999972;'1976';'Mar';55.8999999999999986;'1976';'Apr';56.1000000000000014;'1976';'May';56.5;'1976';'Jun';56.7999999999999972;'1976';'Jul';57.1000000000000014;'1976';'Aug';57.3999999999999986;'1976';'Sep';57.6000000000000014;'1976';'Oct';57.8999999999999986;'1976';'Nov';58;'1976';'Dec';58.2000000000000028;'1976';'Annual';56.8999999999999986;'1977';'Jan';58.5;'1977';'Feb';59.1000000000000014;'1977';'Mar';59.5;'1977';'Apr';60;'1977';'May';60.2999999999999972;'1977';'Jun';60.7000000000000028;'1977';'Jul';61;'1977';'Aug';61.2000000000000028;'1977';'Sep';61.3999999999999986;'1977';'Oct';61.6000000000000014;'1977';'Nov';61.8999999999999986;'1977';'Dec';62.1000000000000014;'1977';'Annual';60.6000000000000014;'1978';'Jan';62.5;'1978';'Feb';62.8999999999999986;'1978';'Mar';63.3999999999999986;'1978';'Apr';63.8999999999999986;'1978';'May';64.5;'1978';'Jun';65.2000000000000028;'1978';'Jul';65.7000000000000028;'1978';'Aug';66;'1978';'Sep';66.5;'1978';'Oct';67.0999999999999943;'1978';'Nov';67.4000000000000057;'1978';'Dec';67.7000000000000028;'1978';'Annual';65.2000000000000028;'1979';'Jan';68.2999999999999972;'1979';'Feb';69.0999999999999943;'1979';'Mar';69.7999999999999972;'1979';'Apr';70.5999999999999943;'1979';'May';71.5;'1979';'Jun';72.2999999999999972;'1979';'Jul';73.0999999999999943;'1979';'Aug';73.7999999999999972;'1979';'Sep';74.5999999999999943;'1979';'Oct';75.2000000000000028;'1979';'Nov';75.9000000000000057;'1979';'Dec';76.7000000000000028;'1979';'Annual';72.5999999999999943;'1980';'Jan';77.7999999999999972;'1980';'Feb';78.9000000000000057;'1980';'Mar';80.0999999999999943;'1980';'Apr';81;'1980';'May';81.7999999999999972;'1980';'Jun';82.7000000000000028;'1980';'Jul';82.7000000000000028;'1980';'Aug';83.2999999999999972;'1980';'Sep';84;'1980';'Oct';84.7999999999999972;'1980';'Nov';85.5;'1980';'Dec';86.2999999999999972;'1980';'Annual';82.4000000000000057;'1981';'Jan';87;'1981';'Feb';87.9000000000000057;'1981';'Mar';88.5;'1981';'Apr';89.0999999999999943;'1981';'May';89.7999999999999972;'1981';'Jun';90.5999999999999943;'1981';'Jul';91.5999999999999943;'1981';'Aug';92.2999999999999972;'1981';'Sep';93.2000000000000028;'1981';'Oct';93.4000000000000057;'1981';'Nov';93.7000000000000028;'1981';'Dec';94;'1981';'Annual';90.9000000000000057;'1982';'Jan';94.2999999999999972;'1982';'Feb';94.5999999999999943;'1982';'Mar';94.5;'1982';'Apr';94.9000000000000057;'1982';'May';95.7999999999999972;'1982';'Jun';97;'1982';'Jul';97.5;'1982';'Aug';97.7000000000000028;'1982';'Sep';97.9000000000000057;'1982';'Oct';98.2000000000000028;'1982';'Nov';98;'1982';'Dec';97.5999999999999943;'1982';'Annual';96.5;'1983';'Jan';97.7999999999999972;'1983';'Feb';97.9000000000000057;'1983';'Mar';97.9000000000000057;'1983';'Apr';98.5999999999999943;'1983';'May';99.2000000000000028;'1983';'Jun';99.5;'1983';'Jul';99.9000000000000057;'1983';'Aug';100.200000000000003;'1983';'Sep';100.700000000000003;'1983';'Oct';101;'1983';'Nov';101.200000000000003;'1983';'Dec';101.299999999999997;'1983';'Annual';99.5999999999999943;'1984';'Jan';101.900000000000006;'1984';'Feb';102.400000000000006;'1984';'Mar';102.599999999999994;'1984';'Apr';103.099999999999994;'1984';'May';103.400000000000006;'1984';'Jun';103.700000000000003;'1984';'Jul';104.099999999999994;'1984';'Aug';104.5;'1984';'Sep';105;'1984';'Oct';105.299999999999997;'1984';'Nov';105.299999999999997;'1984';'Dec';105.299999999999997;'1984';'Annual';103.900000000000006;'1984';'HALF1';102.900000000000006;'1984';'HALF2';104.900000000000006;'1985';'Jan';105.5;'1985';'Feb';106;'1985';'Mar';106.400000000000006;'1985';'Apr';106.900000000000006;'1985';'May';107.299999999999997;'1985';'Jun';107.599999999999994;'1985';'Jul';107.799999999999997;'1985';'Aug';108;'1985';'Sep';108.299999999999997;'1985';'Oct';108.700000000000003;'1985';'Nov';109;'1985';'Dec';109.299999999999997;'1985';'Annual';107.599999999999994;'1985';'HALF1';106.599999999999994;'1985';'HALF2';108.5;'1986';'Jan';109.599999999999994;'1986';'Feb';109.299999999999997;'1986';'Mar';108.799999999999997;'1986';'Apr';108.599999999999994;'1986';'May';108.900000000000006;'1986';'Jun';109.5;'1986';'Jul';109.5;'1986';'Aug';109.700000000000003;'1986';'Sep';110.200000000000003;'1986';'Oct';110.299999999999997;'1986';'Nov';110.400000000000006;'1986';'Dec';110.5;'1986';'Annual';109.599999999999994;'1986';'HALF1';109.099999999999994;'1986';'HALF2';110.099999999999994;'1987';'Jan';111.200000000000003;'1987';'Feb';111.599999999999994;'1987';'Mar';112.099999999999994;'1987';'Apr';112.700000000000003;'1987';'May';113.099999999999994;'1987';'Jun';113.5;'1987';'Jul';113.799999999999997;'1987';'Aug';114.400000000000006;'1987';'Sep';115;'1987';'Oct';115.299999999999997;'1987';'Nov';115.400000000000006;'1987';'Dec';115.400000000000006;'1987';'Annual';113.599999999999994;'1987';'HALF1';112.400000000000006;'1987';'HALF2';114.900000000000006;'1988';'Jan';115.700000000000003;'1988';'Feb';116;'1988';'Mar';116.5;'1988';'Apr';117.099999999999994;'1988';'May';117.5;'1988';'Jun';118;'1988';'Jul';118.5;'1988';'Aug';119;'1988';'Sep';119.799999999999997;'1988';'Oct';120.200000000000003;'1988';'Nov';120.299999999999997;'1988';'Dec';120.5;'1988';'Annual';118.299999999999997;'1988';'HALF1';116.799999999999997;'1988';'HALF2';119.700000000000003;'1989';'Jan';121.099999999999994;'1989';'Feb';121.599999999999994;'1989';'Mar';122.299999999999997;'1989';'Apr';123.099999999999994;'1989';'May';123.799999999999997;'1989';'Jun';124.099999999999994;'1989';'Jul';124.400000000000006;'1989';'Aug';124.599999999999994;'1989';'Sep';125;'1989';'Oct';125.599999999999994;'1989';'Nov';125.900000000000006;'1989';'Dec';126.099999999999994;'1989';'Annual';124;'1989';'HALF1';122.700000000000003;'1989';'HALF2';125.299999999999997;'1990';'Jan';127.400000000000006;'1990';'Feb';128;'1990';'Mar';128.699999999999989;'1990';'Apr';128.900000000000006;'1990';'May';129.199999999999989;'1990';'Jun';129.900000000000006;'1990';'Jul';130.400000000000006;'1990';'Aug';131.599999999999994;'1990';'Sep';132.699999999999989;'1990';'Oct';133.5;'1990';'Nov';133.800000000000011;'1990';'Dec';133.800000000000011;'1990';'Annual';130.699999999999989;'1990';'HALF1';128.699999999999989;'1990';'HALF2';132.599999999999994;'1991';'Jan';134.599999999999994;'1991';'Feb';134.800000000000011;'1991';'Mar';135;'1991';'Apr';135.199999999999989;'1991';'May';135.599999999999994;'1991';'Jun';136;'1991';'Jul';136.199999999999989;'1991';'Aug';136.599999999999994;'1991';'Sep';137.199999999999989;'1991';'Oct';137.400000000000006;'1991';'Nov';137.800000000000011;'1991';'Dec';137.900000000000006;'1991';'Annual';136.199999999999989;'1991';'HALF1';135.199999999999989;'1991';'HALF2';137.199999999999989;'1992';'Jan';138.099999999999994;'1992';'Feb';138.599999999999994;'1992';'Mar';139.300000000000011;'1992';'Apr';139.5;'1992';'May';139.699999999999989;'1992';'Jun';140.199999999999989;'1992';'Jul';140.5;'1992';'Aug';140.900000000000006;'1992';'Sep';141.300000000000011;'1992';'Oct';141.800000000000011;'1992';'Nov';142;'1992';'Dec';141.900000000000006;'1992';'Annual';140.300000000000011;'1992';'HALF1';139.199999999999989;'1992';'HALF2';141.400000000000006;'1993';'Jan';142.599999999999994;'1993';'Feb';143.099999999999994;'1993';'Mar';143.599999999999994;'1993';'Apr';144;'1993';'May';144.199999999999989;'1993';'Jun';144.400000000000006;'1993';'Jul';144.400000000000006;'1993';'Aug';144.800000000000011;'1993';'Sep';145.099999999999994;'1993';'Oct';145.699999999999989;'1993';'Nov';145.800000000000011;'1993';'Dec';145.800000000000011;'1993';'Annual';144.5;'1993';'HALF1';143.699999999999989;'1993';'HALF2';145.300000000000011;'1994';'Jan';146.199999999999989;'1994';'Feb';146.699999999999989;'1994';'Mar';147.199999999999989;'1994';'Apr';147.400000000000006;'1994';'May';147.5;'1994';'Jun';148;'1994';'Jul';148.400000000000006;'1994';'Aug';149;'1994';'Sep';149.400000000000006;'1994';'Oct';149.5;'1994';'Nov';149.699999999999989;'1994';'Dec';149.699999999999989;'1994';'Annual';148.199999999999989;'1994';'HALF1';147.199999999999989;'1994';'HALF2';149.300000000000011;'1995';'Jan';150.300000000000011;'1995';'Feb';150.900000000000006;'1995';'Mar';151.400000000000006;'1995';'Apr';151.900000000000006;'1995';'May';152.199999999999989;'1995';'Jun';152.5;'1995';'Jul';152.5;'1995';'Aug';152.900000000000006;'1995';'Sep';153.199999999999989;'1995';'Oct';153.699999999999989;'1995';'Nov';153.599999999999994;'1995';'Dec';153.5;'1995';'Annual';152.400000000000006;'1995';'HALF1';151.5;'1995';'HALF2';153.199999999999989;'1996';'Jan';154.400000000000006;'1996';'Feb';154.900000000000006;'1996';'Mar';155.699999999999989;'1996';'Apr';156.300000000000011;'1996';'May';156.599999999999994;'1996';'Jun';156.699999999999989;'1996';'Jul';157;'1996';'Aug';157.300000000000011;'1996';'Sep';157.800000000000011;'1996';'Oct';158.300000000000011;'1996';'Nov';158.599999999999994;'1996';'Dec';158.599999999999994;'1996';'Annual';156.900000000000006;'1996';'HALF1';155.800000000000011;'1996';'HALF2';157.900000000000006;'1997';'Jan';159.099999999999994;'1997';'Feb';159.599999999999994;'1997';'Mar';160;'1997';'Apr';160.199999999999989;'1997';'May';160.099999999999994;'1997';'Jun';160.300000000000011;'1997';'Jul';160.5;'1997';'Aug';160.800000000000011;'1997';'Sep';161.199999999999989;'1997';'Oct';161.599999999999994;'1997';'Nov';161.5;'1997';'Dec';161.300000000000011;'1997';'Annual';160.5;'1997';'HALF1';159.900000000000006;'1997';'HALF2';161.199999999999989;'1998';'Jan';161.599999999999994;'1998';'Feb';161.900000000000006;'1998';'Mar';162.199999999999989;'1998';'Apr';162.5;'1998';'May';162.800000000000011;'1998';'Jun';163;'1998';'Jul';163.199999999999989;'1998';'Aug';163.400000000000006;'1998';'Sep';163.599999999999994;'1998';'Oct';164;'1998';'Nov';164;'1998';'Dec';163.900000000000006;'1998';'Annual';163;'1998';'HALF1';162.300000000000011;'1998';'HALF2';163.699999999999989;'1999';'Jan';164.300000000000011;'1999';'Feb';164.5;'1999';'Mar';165;'1999';'Apr';166.199999999999989;'1999';'May';166.199999999999989;'1999';'Jun';166.199999999999989;'1999';'Jul';166.699999999999989;'1999';'Aug';167.099999999999994;'1999';'Sep';167.900000000000006;'1999';'Oct';168.199999999999989;'1999';'Nov';168.300000000000011;'1999';'Dec';168.300000000000011;'1999';'Annual';166.599999999999994;'1999';'HALF1';165.400000000000006;'1999';'HALF2';167.800000000000011;'2000';'Jan';168.800000000000011;'2000';'Feb';169.800000000000011;'2000';'Mar';171.199999999999989;'2000';'Apr';171.300000000000011;'2000';'May';171.5;'2000';'Jun';172.400000000000006;'2000';'Jul';172.800000000000011;'2000';'Aug';172.800000000000011;'2000';'Sep';173.699999999999989;'2000';'Oct';174;'2000';'Nov';174.099999999999994;'2000';'Dec';174;'2000';'Annual';172.199999999999989;'2000';'HALF1';170.800000000000011;'2000';'HALF2';173.599999999999994;'2001';'Jan';175.099999999999994;'2001';'Feb';175.800000000000011;'2001';'Mar';176.199999999999989;'2001';'Apr';176.900000000000006;'2001';'May';177.699999999999989;'2001';'Jun';178;'2001';'Jul';177.5;'2001';'Aug';177.5;'2001';'Sep';178.300000000000011;'2001';'Oct';177.699999999999989;'2001';'Nov';177.400000000000006;'2001';'Dec';176.699999999999989;'2001';'Annual';177.099999999999994;'2001';'HALF1';176.599999999999994;'2001';'HALF2';177.5;'2002';'Jan';177.099999999999994;'2002';'Feb';177.800000000000011;'2002';'Mar';178.800000000000011;'2002';'Apr';179.800000000000011;'2002';'May';179.800000000000011;'2002';'Jun';179.900000000000006;'2002';'Jul';180.099999999999994;'2002';'Aug';180.699999999999989;'2002';'Sep';181;'2002';'Oct';181.300000000000011;'2002';'Nov';181.300000000000011;'2002';'Dec';180.900000000000006;'2002';'Annual';179.900000000000006;'2002';'HALF1';178.900000000000006;'2002';'HALF2';180.900000000000006;'2003';'Jan';181.699999999999989;'2003';'Feb';183.099999999999994;'2003';'Mar';184.199999999999989;'2003';'Apr';183.800000000000011;'2003';'May';183.5;'2003';'Jun';183.699999999999989;'2003';'Jul';183.900000000000006;'2003';'Aug';184.599999999999994;'2003';'Sep';185.199999999999989;'2003';'Oct';185;'2003';'Nov';184.5;'2003';'Dec';184.300000000000011;'2003';'Annual';184;'2003';'HALF1';183.300000000000011;'2003';'HALF2';184.599999999999994;'2004';'Jan';185.199999999999989;'2004';'Feb';186.199999999999989;'2004';'Mar';187.400000000000006;'2004';'Apr';188;'2004';'May';189.099999999999994;'2004';'Jun';189.699999999999989;'2004';'Jul';189.400000000000006;'2004';'Aug';189.5;'2004';'Sep';189.900000000000006;'2004';'Oct';190.900000000000006;'2004';'Nov';191;'2004';'Dec';190.300000000000011;'2004';'Annual';188.900000000000006;'2004';'HALF1';187.599999999999994;'2004';'HALF2';190.199999999999989;'2005';'Jan';190.699999999999989;'2005';'Feb';191.800000000000011;'2005';'Mar';193.300000000000011;'2005';'Apr';194.599999999999994;'2005';'May';194.400000000000006;'2005';'Jun';194.5;'2005';'Jul';195.400000000000006;'2005';'Aug';196.400000000000006;'2005';'Sep';198.800000000000011;'2005';'Oct';199.199999999999989;'2005';'Nov';197.599999999999994;'2005';'Dec';196.800000000000011;'2005';'Annual';195.300000000000011;'2005';'HALF1';193.199999999999989;'2005';'HALF2';197.400000000000006;'2006';'Jan';198.300000000000011;'2006';'Feb';198.699999999999989;'2006';'Mar';199.800000000000011;'2006';'Apr';201.5;'2006';'May';202.5;'2006';'Jun';202.900000000000006;'2006';'Jul';203.5;'2006';'Aug';203.900000000000006;'2006';'Sep';202.900000000000006;'2006';'Oct';201.800000000000011;'2006';'Nov';201.5;'2006';'Dec';201.800000000000011;'2006';'Annual';201.599999999999994;'2006';'HALF1';200.599999999999994;'2006';'HALF2';202.599999999999994;'2007';'Jan';202.415999999999997;'2007';'Feb';203.498999999999995;'2007';'Mar';205.352000000000004;'2007';'Apr';206.686000000000007;'2007';'May';207.949000000000012;'2007';'Jun';208.352000000000004;'2007';'Jul';208.299000000000007;'2007';'Aug';207.917000000000002;'2007';'Sep';208.490000000000009;'2007';'Oct';208.936000000000007;'2007';'Nov';210.176999999999992;'2007';'Dec';210.036000000000001;'2007';'Annual';207.342000000000013;'2007';'HALF1';205.709000000000003;'2007';'HALF2';208.975999999999999;'2008';'Jan';211.080000000000013;'2008';'Feb';211.693000000000012

DROPBOX=:'/db/Dropbox/joddumps/'

IFACEWORDShtmthorn=:,<'thh'

IFACEWORDSsunmoon=:<;._1 ' calmoons moons sunriseset0 sunriseset1'

LF=:10{a.

NAMEALPHA=:'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_'

NORISESET=:99

ROOTWORDShtmthorn=:<;._1 ' ROOTWORDShtmthorn IFACEWORDShtmthorn'

ROOTWORDSsunmoon=:<;._1 ' IFACEWORDSsunmoon ROOTWORDSsunmoon calmoons sunriseset0 sunriseset1 today yeardates'

TAB=:9{a.

TEMPFILE0=:'c:\temp\md5tmp.txt'

TeXPtCm=:28.3999999999999986

TeXPtIn=:72.269999999999996

TeXPtMm=:2.83999999999999986

USBDRIVEVOLUME=:'USBK01'

pi=:3.14159265358979312

showpass soput ".'nl_',SOLOCALE,'_ i.4' [ cocurrent 'base' NB.{*JOD*}
".soclear NB.{*JOD*}
cocurrent SO__JODobj NB.{*JOD*}


BesselJ=:1 : '(^&m@:-: % (!m)"_)* [: ''''H. (m+1) _0.25 * *:'

MillerRabin=:100&$: :(4 : 0)"0

NB.*MillerRabin v-- Miller Rabin probabalistic prime test.
NB.
NB. m  MillerRabin n is 0  or 1. If  0  then n is not prime; if 1
NB. then n is prime with an error probability of at most 0.25^m
NB.
NB. verbatim:
NB.
NB. from J Wiki:
NB. http://www.jsoftware.com/jwiki/Essays/Primality_Tests#20081031001648
NB.
NB. monad:  pa =. MillerRabin ia | Xa
NB.
NB.   MillerRabin 3454545452242x
NB.
NB. dyad:   ps =. iaM MillerRabin ia | Xa
NB.
NB.  10 MillerRabin p: 2000000

 d=. {:s=. huo y-1
 e=. 2x^#s
 for_a. 1+x ?@$ y-1 do.
  if. 1~:(a y&|@^ d) y&|@^ e do. 0 return. end.
 end.
 1
)

Note=:3 : '0 0 $ 0 : 0' :[

afterlaststr=:] }.~ #@[ + 1&(i:~)@([ E. ])

afterstr=:] }.~ #@[ + 1&(i.~)@([ E. ])

allomask=:[: (*./\. +. *./\) =

allotrim=:] #~ [: -. [: (*./\. +. *./\) =

alltrim=:] #~ [: -. [: (*./\. +. *./\) ' '&=

allwhitetrim=:] #~ [: -. [: (*./\. +. *./\) ] e. (9 10 13 32{a.)"_

antimode=:3 : 0

NB.*antimode v-- finds the least frequently occurring  item(s) in
NB. a list.
NB.
NB. monad:  ul =. antimode ul
NB.
NB.   antimode ?.500#100
NB.   antimode ;:'blah blah blah yada yada wisdom'


if. 0 < # y =. ,y do.    NB. no antimodes for null lists
  f =. #/.~ y            NB. nub frequency
  (~. y) #~ f e. <./ f   NB. lowest frequency items
else. y
end.
)

append=:1!:3 ]`<@.(32&>@(3!:0))

apply=:128!:2

arccos=:_2&o.

arccosh=:_6&o.

arcsin=:_1&o.

arcsinh=:_5&o.

arctan=:_3&o.

arctanh=:_7&o.

assert=:0 0"_ $ 13!:8^:((0: e. ])`(12"_))

atags=:'<'&,@,&' ' ; '</'&,@,&'>'

atomfrl=:{.^:((,1) -: $)

attrvalue=:'"'"_ beforestr ([ , '="'"_) afterstr '>'"_ beforestr ]

bcfd=:2&#.@('01'&i.)^:_1

beforelaststr=:] {.~ 1&(i:~)@([ E. ])

beforestr=:] {.~ 1&(i.~)@([ E. ])

belongstrs=:4 : 0

NB.*belongstrs v-- select sublists between  nonnested delimiters
NB. retaining delimiters.
NB.
NB. dyad:  blcl =. (clStart;clEnd) belongstrs cl
NB.        blnl =. (nlStart;nlEnd) belongstrs nl
NB.
NB.   ('start';'end') belongstrs 'start yada yada end boo hoo start ahh end'
NB.
NB.   NB. also applies to numeric delimiters
NB.   (1 1;2 2) belongstrs 1 1 66 666 2 2 7 87 1 1 0 2 2

's e'=. x
llst=. (s E. y) +. e E. y
mask=. ~:/\ llst
((mask#llst) <;.1 mask#y) ,&.> <e
)

bernoulli=:3 : 0

NB.*bernoulli v-- generate first N Bernoulli numbers.
NB.
NB. verbatim: see J wiki
NB.
NB. http://202.67.223.49/jwiki/Essays/Bernoulli_Numbers
NB.
NB. monad:  rl =. bernoulli iaN
NB.
NB.   bernoulli 13

b=. 1 _1r2
for_m. 2x*}.i.>.-:y do. b=. b,0,~(1+m)%~-+/b*(i.m)!1+m end.
}:^:(2|y) b
)

betweenidx=:4 : 0

NB.*betweenidx v-- indexed sublists between nonnested delimiters.
NB.
NB. Cuts  up  lists   containing   balanced  nonnested  start/end
NB. delimiters into boxed lists of indexed sublists.
NB.
NB. Note:  this  verb does a simple count for  delimiter balance.
NB. This  is  a   necessary  but  not  sufficient  condition  for
NB. delimiter balance.
NB.
NB. dyad:  (ilIdx ;< blcl) =. (clStart;clEnd) betweenidx cl
NB.        (ilIds ;< blnl) =. (nlStart;nlEnd) betweenidx nl
NB.
NB.   ('start';'end') betweenidx 'start yada yada end boo hoo start ahh end'
NB.
NB.   '{}' betweenidx 'go{ahead}{}cut{me}{up}{}'
NB.
NB.   NB. also applies to numeric delimiters
NB.   (1 1;2 2) betweenidx 1 1 66 666 2 2 7 87 1 1 0 2 2

if. #y do.
  's e'=. x                      NB. start/end delimiters
  assert. -. s -: e              NB. they must differ
  em=. e E. y                    NB. end mask
  sm=. (-#s) |.!.0 s E. y        NB. start mask
  mc=. +/sm                      NB. middle count
  assert. mc=+/em                NB. delimiter balance
  c=. (1 (0)} sm +. em) <;.1 y   NB. cut list

  NB. insert any missing middles to insure all indexed
  NB. sublists correspond to a location in the cut list
  ex=. 1 #~ >: +: mc
  ex=. (-. sm {.;.1 em) (>: +: i. mc)} ex
  c=. ex #^:_1 c

  ((# i.@#) (#c)$0 1);<c         NB. prefix indexes
else.
  (i.0);<y                       NB. empty arg result
end.
)

betweenidx2=:4 : 0

NB.*betweenidx2    v--   indexed   sublists   between   nonnested
NB. delimiters.
NB.
NB. Cuts  up   lists   containing  balanced  nonnested  start/end
NB. delimiters into boxed lists of indexed sublists.
NB.
NB. Slight  improvement on (betweenidx). This version immediately
NB. quits when no delimiters are found and the empty argument and
NB. no tags  found  result now  has the same  boxing structure as
NB. nonnull results.
NB.
NB. Note: this  verb does a simple  count for delimiter  balance.
NB. This  is  a  necessary  but  not   sufficient  condition  for
NB. delimiter balance.
NB.
NB. dyad:  (ilIdx ;< blcl) =. (clStart;clEnd) betweenidx2 cl
NB.        (ilIds ;< blnl) =. (nlStart;nlEnd) betweenidx2 nl
NB.
NB.   ('start';'end') betweenidx2 'start yada yada end boo hoo start ahh end'
NB.
NB.   '{}' betweenidx2 'go{ahead}{}cut{me}{up}{}'
NB.
NB.   NB. also applies to numeric delimiters
NB.   (1 1;2 2) betweenidx2 1 1 66 666 2 2 7 87 1 1 0 2 2

if. #y do.
  's e'=. x                      NB. start/end delimiters
  assert. -. s -: e              NB. they must differ
  em=. e E. y                    NB. end mask

  NB. quit if no delimiters
  if. -.1 e. em do. (i.0);<<y return. end.

  sm=. (-#s) |.!.0 s E. y        NB. start mask
  mc=. +/sm                      NB. middle count
  assert. mc=+/em                NB. delimiter balance
  c=. (1 (0)} sm +. em) <;.1 y   NB. cut list

  NB. insert any missing middles to insure all indexed
  NB. sublists correspond to a location in the cut list
  ex=. 1 #~ >: +: mc
  ex=. (-. sm {.;.1 em) (>: +: i. mc)} ex
  c=. ex #^:_1 c

  ((# i.@#) (#c)$0 1);<c         NB. prefix indexes
else.
  (i.0);<<y                      NB. empty arg result
end.
)

betweenstrs=:4 : 0

NB.*betweenstrs v-- select sublists between  nonnested delimiters
NB. discarding delimiters.
NB.
NB. dyad:  blcl =. (clStart;clEnd) betweenstrs cl
NB.        blnl =. (nlStart;nlEnd) betweenstrs nl
NB.
NB.   ('start';'end') betweenstrs 'start yada yada end boo hoo start ahh end'
NB.
NB.   NB. also applies to numeric delimiters
NB.   (1 1;2 2) betweenstrs 1 1 66 666 2 2 7 87 1 1 0 2 2

's e'=. x
llst=. ((-#s) (|.!.0) s E. y) +. e E. y
mask=. ~:/\ llst
(mask#llst) <;.1 mask#y
)

betweenstrs2=:4 : 0

NB.*betweenstrs2    v--   select   sublists   between   nonnested
NB. delimiters.
NB.
NB. Original (betweenstrs)  - replaced by (betweenstrs)  which is
NB. faster and requires significantly less memory.
NB.
NB. dyad:  blcl =. (clStart;clEnd) betweenstrs2 cl
NB.        blnl =. (nlStart;nlEnd) betweenstrs2 nl
NB.
NB.   ('start';'end') betweenstrs2 'start yada yada end boo hoo start ahh end'
NB.
NB.   NB. also applies to numeric delimiters
NB.   (1 1;2 2) betweenstrs2 1 1 66 666 2 2 7 87 1 1 0 2 2

's e'=. x
llst=. (s E. y) +. e E. y
mask=. ~:/\ llst
(#s) }.&.> (mask#llst) <;.1 mask#y
)

bfd=:2&#.@(0 1&i.)^:_1

blkaft=:3 : 0

NB.*blkaft v-- appends necessary blanks to J tokens.
NB.
NB. This verb appends some  necessary blanks to  J tokens so that
NB. raising  a token list and reparsing  produces  the same token
NB. list. A few unecessary blanks may be inserted.
NB.
NB. monad:  blkaft blcl
NB.
NB.   NB. line of J code
NB.   line=. 'c=. +./\"1 c > ~:/\"1 y. e. '''''''''
NB.   tokens=.  ;: line
NB.
NB.   NB. compare
NB.   (;: ; tokens) -: tokens
NB.   (;: ; blkaft tokens) -: tokens

NB. assume no blanks are required
r=. 0 #~ # y
t=. y

while.do.
 u=. ;: ;\ t
 v=. ~.&.>  ( <"1 |: u) -. L: 1  a:
 r=. r +. y e. ; {.&.> (1 < #&> v)#v

 if. y -: {: u do.
   NB. last tokenized row matches original
   break.
 else.
   NB. insert required blanks and reparse
   t=. ((r#t),&.>' ') (I. r)} t
 end.

end.

NB. insert required blanks and raise tokens
; ((r#y),&.>' ') (I. r)} y
)

bmi=:704.5"_ * ] % [: *: [

boxopen=:<^:(L. = 0:)

boxxopen=:<^:(L. < *@#)

bye=:2!:55

calendar=:3 : 0

NB.*calendar v-- calendar  for year as  12 element list. (y)  is
NB. one or more numbers: year, months.
NB.
NB. monad:  calendar ilYearMonths
NB.
NB.   calendar 2007   NB. full year
NB.   calendar 2007 7 NB. July only
NB.   calendar 2007 , >: i. 3   NB. first quarter

a=. ((j<100)*(-100&|){.6!:0'')+j=. {.y
b=. a+-/<.4 100 400%~<:a
r=. 28+3,(~:/0=4 100 400|a),10$5$3 2
r=. (-7|b+0,+/\}:r)|."0 1 r(]&:>:*"1>/)i.42
m=. (<:}.y),i.12*1=#y
h=. 'JanFebMarAprMayJunJulAugSepOctNovDec'
h=. ' Su Mo Tu We Th Fr Sa',:"1~_3(_12&{.)\h
<"2 m{h,"2[12 6 21 ($,) r{' ',3":1+i.31 1
)

calmoons=:3 : 0

NB.*calmoons v-- calendar dates of new and full moons. 0's denote
NB. new moons and 1's denote full moons.
NB.
NB. monad:  it =. calmoons ilYears
NB.
NB.   calmoons 1900 2000

NB. compute Julian dates and convert to calendar
j=. moons y
t=. fromjulian <. {. j

NB. attach new (0) and full (1) bits
j=. 0 [ t=. (, |: {: j) ,"0 1 ,/ t

NB. eliminate year overlap and duplicate dates
~. t #~  (1 {"1 t) e. y
)

cartfrpolar=:3 : 0

NB.*cartfrpolar  v--  cartesian coordinates (x, y, z)  from polar
NB. coordinates (r, theta, phi).
NB.
NB. monad:  cartfrpolar  ft
NB.
NB.  theta in [-90 deg, +90 deg]; phi in [-360 deg, +360 deg]

'r theta phi' =. |: y
rcst=. r * cosd theta
(rcst * cosd phi) ,"0 1 (rcst * sind phi) ,. r * sind theta
)

cd=:15!:0

cder=:15!:10

cderx=:15!:11

cdf=:15!:5

cfp=:+.@(r./)

changenqt=:4 : 0

NB.*changenqt v-- change not quoted.
NB.
NB. Similiar to (changestr) with the exception that J quoted text
NB. is not altered.
NB.
NB. dyad:  cl =. clReps changenqt cl
NB.
NB.   '/leave/quoted' changenqt 'leave '' leave these leave''s leave '

pairs=. 2 {."(1) _2 [\ <;._1 x      NB. change table
cnt=._1 [ lim=. # pairs
while. lim > cnt=.>:cnt do.         NB. process each change pair
  't c'=. cnt { pairs               NB. /target/change
  q=.~:/\ '''' = y                  NB. quote mask
  q=. q +. 0,}:q
  b=. t E. y                        NB. target mask
  if. +./b=. b *. -.q do.           NB. next if no target
    u=. I. b                        NB. target starts
    'l m'=. #&> cnt { pairs         NB. lengths
    p=. u + 0,+/\(<:# u)$ d=. m - l NB. change starts
    s=. * d                         NB. reduce < and > to =
    if. s = _1 do.
      b=. 1 #~ # b
      b=. ((l * # u)$ 1 0 #~ m,l-m) (,u +/ i. l)} b
      y=. b # y
      if. m = 0 do. continue. end.  NB. next for deletions
    elseif. s = 1 do.
      y=. y #~ >: d u} b            NB. first target char replicated
    end.
    y=.(c $~ m *# u) (,p +/i. m)} y  NB. insert replacements
  end.
end. y                              NB. altered string
)

changestr=:4 : 0

NB.*changestr v-- replaces substrings - see long documentation.
NB.
NB. dyad:  clReps changestr cl
NB.
NB.   NB. first character delimits replacements
NB.   '/change/becomes/me/ehh' changestr 'blah blah ...'

pairs=. 2 {."(1) _2 [\ <;._1 x      NB. change table
cnt=._1 [ lim=. # pairs
while. lim > cnt=.>:cnt do.         NB. process each change pair
  't c'=. cnt { pairs               NB. /target/change
  if. +./b=. t E. y do.             NB. next if no target
    r=. I. b                        NB. target starts
    'l q'=. #&> cnt { pairs         NB. lengths
    p=. r + 0,+/\(<:# r)$ d=. q - l NB. change starts
    s=. * d                         NB. reduce < and > to =
    if. s = _1 do.
      b=. 1 #~ # b
      b=. ((l * # r)$ 1 0 #~ q,l-q) (,r +/ i. l)} b
      y=. b # y
      if. q = 0 do. continue. end.  NB. next for deletions
    elseif. s = 1 do.
      y=. y #~ >: d r} b            NB. first target char replicated
    end.
    y=.(c $~ q *# r) (,p +/i. q)} y  NB. insert replacements
  end.
end. y                              NB. altered string
)

changetok=:4 : 0

NB.*changetok  v--  replaces  J name tokens within  a string. See
NB. long documentation.
NB.
NB. dyad:  clChanged =. clTokens changetok clStr
NB.
NB.   '/boo/hoo' changetok 'boo boo boohoo boohoo'

if. #pairs=. 2 {."(1) _2 [\ <;._1 x do.
  pairs=. pairs #~ _2 ~: (4!:0) {."1 pairs  NB. eliminate non-token pairs
end.
cnt=._1 [ lim=. # pairs
while. lim > cnt=. >:cnt do.         NB. process each change pair
  't c'=. cnt { pairs                NB. /target/change (*)=. t c
  if. +./b=. t E. y do.              NB. next if no targets
    u=. I. b                         NB. target starts
    'l m'=. #&> cnt { pairs          NB. lengths (*)=. l m
    q=. (u { ' ' , y) e. NAMEALPHA        NB. head chars
    r=. ((u + l) { y , ' ') e. NAMEALPHA  NB. tail chars
    u=. u #~ -. q +. r               NB. eliminate embedded tokens
    if. 0 = #u do. continue. end.    NB. next if no targets
    b=. 1 u} 0 #~ # b                NB. reset target mask
    p=. u + 0,+/\(<:# u)$ d =. m - l   NB. change starts
    s=. * d                          NB. reduce < and > to =
    if. s = _1 do.
      b=. 1 #~ # b
      b=. ((l * # u)$ 1 0 #~ m,l-m) (,u +/ i. l)} b
      y=. b # y
      if. m = 0 do. continue. end.   NB. next for deletions
    elseif. s = 1 do.
      y=. y #~ >: d u} b             NB. first target char replicated
    end.
    y=. (c $~ m *# u) (,p +/i. m)} y  NB. insert replacements
  end.
end. y                               NB. altered string
)

charsub=:4 : 0

NB.*charsub v-- single character pair replacements.
NB.
NB. dyad:  clPairs charsub cu
NB.
NB.   '-_$ ' charsub '$123 -456 -789'

'f t'=. ((#x)$0 1)<@,&a./.x
t {~ f i. y
)

citemize=:,:^:(2 > #@$)

showpass soput ".'nl_',SOLOCALE,'_ i.4' [ cocurrent 'base' NB.{*JOD*}
".soclear NB.{*JOD*}
cocurrent SO__JODobj NB.{*JOD*}


cos=:2&o.

cosd=:cos@rfd

cosh=:6&o.

crc=:128!:3

ctl=:}.@(,@(1&(,"1)@(-.@(*./\."1@(=&' '@])))) # ,@((10{a.)&(,"1)@]))

cutnestidx=:4 : 0

NB.*cutnestidx v-- cut list into nested runs and other.
NB.
NB. Nested runs are delimited by begin and end tags. This verb is
NB. oriented toward XML parsing where typical begin  end tags are
NB. <ul>  </ul>  and tags  with  attributes  like: <hoo  boy="2">
NB. </hoo>
NB.
NB. This verb can process numeric lists but care must be taken to
NB. insure the pad item (1{.0$y) does  not  match begin  and  end
NB. values.
NB.
NB. dyad:  (ilIdx ;< blcl) =. (clStart;clEnd) cutnestidx cl
NB.        (ilIdx ;< blnl) =. (nlStart;nlEnd) cutnestidx nl
NB.
NB.   xml=. 'yada <ol><li>one</li><ol><li>sub one</li></ol></ol> boo'
NB.   ('<ol';'</ol>') cutnestidx xml
NB.
NB.   88 99 cutnestidx (i.5),88,(10?10),99 88 5 5 5 5 5 99

if. #y do.
  's e'=. ,&.> x                NB. start end lists
  ut=. 1{.0$y                   NB. padding
  assert. -.s -: e              NB. they must differ
  assert. -.(s -:ut) +. e-:ut
  sp=. s E. ut=.y,ut            NB. start mask

  NB. quit if no delimiters
  if. -.1 e. sp do. (i.0);<<y return. end.

  ep=. e E. ut                  NB. end mask
  assert. (+/sp) = +/ep         NB. basic balance
  dp=. sp + - ep                NB. start end marks
  assert. 0 *./ . <: +/\ dp     NB. nested balance
  ep=. I. _1=dp [ sp=. I. 1=dp  NB. start end indexes
  ut=. +/\dp -. 0               NB. scanned marks
  dp=. /:~ sp,ep                NB. all indexes
  sp=. (firstones 1<:ut)#dp     NB. starts of nested
  ep=. (#e)+(0=ut)#dp           NB. starts of other
  dp=. /:~ ~.0,sp,ep            NB. cut starts
  ut=. }: 1 dp} (>:#y)#0        NB. cut mask
  (dp i. sp);<ut <;.1 y         NB. nest indexes cut list
else.
  (i.0);<<y                     NB. empty arg result
end.
)

cutstridx=:4 : 0

NB.*cutstridx v-- cut list into (x) and other.
NB.
NB. dyad:  (ilIdx ;< blcl) =. clStr cutstridx cl
NB.
NB.   'CHOP' cutstridx 'CHOP CHOP me up CHOP ehh'

if. 1 e. b=. x E. ,y do. 
  sp=. I. b
  op=. (0 e. sp) }. 0,sp + #x
  op=. /:~ sp,op -. #y
  (op i. sp) ;< (1 op} b) <;.1 y
else. 
  (i.0);<<y 
end.
)

datefrint=:0 100 100&#:@<.

dayage=:3 : 0

NB.*dayage v-- age in days.
NB.
NB. monad:  dayage ilYYYYMMDD
NB.
NB.   dayage 1953 7 2
NB.
NB. dyad:  pa dayage iaYYYYMMDD | iuYYYYMMDD
NB.
NB.   1 dayage 4 4$20000101 19500202 19000303
NB.   0 dayage 1986 8 14

0 dayage y
:
if. x do. n=. today~ 0 else. n=. today 0 end.
(x todayno n) - x todayno y
)

dayofweek=:(<;._1 ' Sunday Monday Tuesday Wednesday Thursday Friday Saturday')"_ {~ 7: | 1: + tojulian

dblquote=:'"'&,@:(,&'"')&.>

ddcheck=:ddcheck_jdd_

ddcnm=:ddcnm_jdd_

ddcol=:ddcol_jdd_

ddcon=:ddcon_jdd_

dddis=:dddis_jdd_

dderr=:dderr_jdd_

ddfch=:ddfch_jdd_

ddfet=:ddfet_jdd_

ddfrdms=:(60"_ #. ]) % 3600"_

ddsel=:ddsel_jdd_

ddsql=:ddsql_jdd_

ddsrc=:ddsrc_jdd_

ddtblx=:ddtblx_jdd_

debom=:] }.~ 3 * (239 187 191{a.) -: 3 {. ]

decomm=:3 : 0
                                                                 
NB.*decomm v--  removes comments  from j words. The (x) argument
NB. specifies whether all blank lines are removed or retained.   
NB.                                                              
NB. monad:  decomm ctWord                                        
NB.                                                              
NB.   decomm jcr 'decomm'  NB. decomment self                    
NB.                                                              
NB. dyad:  pa decomm ctWord                                      
NB.                                                              
NB.   1 decomm jcr 'decomm'  NB. remove blanks (default)         
NB.   0 decomm jcr 'decomm'  NB. retain all blank lines          
                                                                 
1 decomm y                                                      
:
NB. mask of unquoted comment starts                              
c=. ($y)$'NB.' E. ,y                                           
c=. +./\"1 c > ~:/\"1 y e. ''''                                 
y=. ,y                                                         
                                                                 
NB. blank out comments                                           
y=. ' ' (I. ,c)} y                                     
y=. y $~ $c                                                    
                                                                 
NB. remove blank lines - default                                 
if. x do. y #~ y +./ . ~: ' ' end.                            
)

dev=:-"_1 _ mean

dewhitejscript=:3 : 0

NB.*dewhitejscript  v--  removes  all  redundant  blanks  from  J
NB. scripts.
NB.
NB. monad:  dewhitejscript cl
NB.
NB.   dewhitejscript read 'c:\any\j\script.ijs'

NB. replace any tabs with single blanks
y=. ' ' (I. y=TAB)} y

NB. remove blank lines and all comments from script
y=. ;:&.> <"1 decomm ];. _1 LF,y-.CR

NB. remove redundant blanks in code
; (blkaft&.> y) ,&.> <CRLF
)

dfb=:2&#.@(0 1&i.)

dfbc=:2&#.@('01'&i.)

dfh=:16&#.@('0123456789ABCDEF'&i.)

dfr=:*&57.2957795130823229

discreterandom=:4 : 0

NB.*discreterandom   v--   random   numbers   from   a   discrete
NB. distribution.
NB.
NB. dyad:  ftValuesProbs discreterandom iaTrials
NB.
NB.  (x) is a 2-row floating matrix where
NB.    0{x is discrete values
NB.    1{x is corresponding probabilities
NB.
NB.  (0 1 2 3 ,: 0.85 0.05 0.05 0.05) discreterandom 100

v=. 0{x
p=. 1{x
f=. 0,+/\p%+/p
l=. #f
r=. /:f,randunif y
s=. +/\l>r
r=. s r } r
v {~ <:l}.r
)

dmsfrdd=:<. ,. 60 60 #: 3600 * 1 | ,

dollars1913=:0.0477472002778018892 * ]

dollars1970=:0.18713044149279931 * ]

dstat=:3 : 0

NB.*dstat v-- descriptive statistics
NB.
NB. monad: ct =. dstal nl
NB.
NB.   dstat  ?.1000#100
NB.
NB. dyad:  ct =.  faRound dstat nl
NB.
NB.   0.1 dstat  ?.1000#100

0.0001 dstat y
:
t=. '/sample size/minimum/maximum/1st quartile/2nd quartile/3rd quartile/first mode'
t=. t , '/first antimode/mean/std devn/skewness/kurtosis'
min=. <./ 
max=. >./
t=. ,&':  ' ;._1 t
v=. $,min,max,q1,median,q3,({.@mode2),({.@antimode),mean,stddev,skewness,kurtosis
t,. ": x round ,. v , y
)

dtslash=:] }.~ [: - '\' = {:

dupmask=:] e. ] #~ [: -. ~:

each=:&.>

earthdist=:4 : 0

NB.*earthdist v-- distance in km between n points on the Earth's surface.
NB.
NB. dyad:  (fl | ft) earthdist (fl | ft)
NB. 
NB.   NB. Paris longitude, latitude
NB.   NB. ddfrdms computes decimal degrees from degree, minutes, seconds
NB.   l1     =. ddfrdms _2 _20 _14    NB.  2d 20m 14s (East)
NB.   theta1 =. ddfrdms 48 50 11      NB. 48d 40m 11s (North)
NB.
NB.   NB. Washington
NB.   l2     =. ddfrdms 77 3 56       NB. 77d  3m 56s (West)
NB.   theta2 =. ddfrdms 38 55 17      NB. 38d 55m 17s (North)
NB.
NB.   NB. rounded to 2 decimals matches Meeus
NB.   6181.63 = ". '0.2' 8!:2 (l1,theta1) earthdist l2,theta2
NB.
NB.   NB. table arguments
NB.   (|: 5 # ,: l1,theta1) earthdist |: 5 # ,: l2,theta2

a=.  6378.14      NB. Earth's mean radius (km)
fl=. % 298.257    NB. Earth's flattening (a * 1 - fl) is polar radius

NB. zero distances mask
b=.  *./ x = y

NB. longitudes and latitudes in decimal degrees
NB. western longitudes +, northern latitudes +
NB. (*)=. l1 l2 theta1 theta2
'l1 theta1'=.  x [ 'l2 theta2'=. y

f=.      rfd -: theta1 + theta2
g=.      rfd -: theta1 - theta2
lambda=. rfd -: l1 - l2

sqrsin=. *: @ sin
sqrcos=. *: @ cos

sinlam=.  sqrsin lambda [ coslam=. sqrcos lambda
sqrcosg=. sqrcos g [ sqrsing=. sqrsin g
sqrsinf=. sqrsin f [ sqrcosf=. sqrcos f

s=. (coslam * sqrsing) + sinlam * sqrcosf
c=. (coslam * sqrcosg) + sinlam * sqrsinf

omega=. arctan %: s % c
r3=. 3 * (%: s * c) % omega
d=.  +: omega * a
h1=. (<: r3) % +: c
h2=. (>: r3) % +: s

NB. required distance
d=. d * (>: fl*h1*sqrsinf*sqrcosg) - fl*h2*sqrcosf*sqrsing

NB. handle any zero distances
if. +./ b do.
  NB. cannot do b*d as d is undefined _. for zero distances
  if. #$ d do. 0 (I. b)} d elseif. b do. 0 elseif. 1 do. d end.
else.
  d
end.
)

easter=:3 : 0

NB.*easter  v-- calculates  the date of  Easter  using the church
NB. algorithm.
NB.
NB. The  church  algorithm  is  a  close  approximation  of   the
NB. astronomical method  of computing the  date of Easter. Easter
NB. is the  first Sunday  after the  first  full  moon  after the
NB. spring solstice.
NB.
NB. monad: itMNDD =. easter ilYears
NB.
NB.   easter 2001
NB.   easter 2001 + i. 100


NB. invalid before 1583
assert. 1583 <: <./ y

NB. vector J                                scalar Basic
y1=. y % 19                           NB.  Y1=Y/19
a=. <. 0.001 + 19 * 1 | y1            NB.  A=INT((Y1-INT(Y1))*19+.001)
b=. <. b1=. y % 100                   NB.  B1=Y/100: B=INT(B1)
c=. <. 0.001 + 100 * 1 | b1           NB.  C=INT((B1-INT(B1))*100+.001)
d=. <. d1=. b % 4                     NB.  D1=B/4: D=INT(D1)
e=. <. 0.001 + 4 * 1 | d1             NB.  E=INT((D1-INT(D1))*4+.001)
f=. <. 0.001 + 25 %~ b + 8            NB.  F=INT(((B+8)/25)+.001)
g=. <. (>: b - f) % 3                 NB.  G=INT((B-F+1)/3)
h1=. 30 %~ 15 + g -~ d -~ b + 19*a    NB.  H1=(19*A+B-D-G+15)/30
h=. <. 0.001 + 30 * 1 | h1            NB.  H=INT((H1-INT(H1))*30+.001 )
i=. <. c1=. c % 4                     NB.  C1=C/4: I=INT(C1)
k=. <. 0.001 + 4 * c1 - i             NB.  K=INT((C1-I)*4+.001)
l1=. 7 %~ k -~ h -~ 32 + 2*i + e      NB.  L1=(32+2*E+2*I-H-K)/7
l=. <. 0.001 + 7 * 1 | l1             NB.  L=INT((L1-INT(L1))*7+.001)
m=. <. 451 %~ a + (11*h) + 22*l       NB.  M=INT((A+11*H+22*L)/451)
n=. <. n1=. 31 %~ 114 + (h+l) - 7*m   NB.  N1=(H+L-7*M+114)/31: N=INT(N1)
p=. <.0.001 + 31 * n1 - n             NB.  P=INT((N1-N)*31+.001)
n ,: >: p                             NB.  result is month & day numbers
)

eletags=:4 : 0

NB.*eletags v-- encloses xml text (y) in xml element tag.
NB.
NB. dyad:  clTag eletags clXml

tag=. alltrim x
'<',tag,'>',y,'</',tag,'>'
)

empty=:(i.0 0)"_

emptyshow=:[: (i.0 0)"_ ] [ 1!:2&2

enquote=:'"' , '"' ,~ ] #~ [: -. [: (*./\. +. *./\) ' '&=

epsfrps=:3 : 0

NB.*epsfrps   v--  convert  postscript   (ps)   to   encapsulated
NB. postscript (eps).
NB.
NB. Many simple postscript files can be converted to encapsulated
NB. postscript with this simple hack. The postscript generated by
NB. the graphviz addon can be  converted with this verb. WARNING:
NB. this type of hack will not work for most postscript files and
NB. may stop working for graphviz outputs in the future.
NB.
NB. monad:  clPathfileEPS =. epsfrps clPathfilePs

'missing .ps file extension' assert  1 e. '.ps' E. y

ps=. read y                                 NB. get postscript PS
eps=. '%!PS-Adobe-3.0 EPSF-3.0',CRLF,ps     NB. instant EPS
epsfile=. ('.eps' ,~ '.'&beforelaststr) y   NB. eps file
eps write epsfile                           NB. save eps data
epsfile                                     NB. file name result
)

erase=:[: 4!:55 ;: ::]

error=:13!:8&101

factors=:(*/ .^"1 (#: i.@(*/))@:>:)/@(__&q:)

showpass soput ".'nl_',SOLOCALE,'_ i.4' [ cocurrent 'base' NB.{*JOD*}
".soclear NB.{*JOD*}
cocurrent SO__JODobj NB.{*JOD*}


fappend=:([: , [) (#@[ [ 1!:3) ::(_1:) [: fboxname ]

fboxname=:([: < 8 u: >) ::]

fc=:3!:5

ferase=:1!:55 ::(_1:)@(fboxname&>)@boxopen

fexist=:1:@(1!:4) ::0:@(fboxname&>)@boxopen

fgr=:3 : 0

NB.*fgr v-- find group root words
NB.
NB. monad:  clRoots=. fgr clGroup

NB. require 'jod' !(*)=. badrc_ajod_ ok_ajod_ jderr_ajod_ grp usedby
if. badrc_ajod_ gn=. grp y do. gn return. else. gn=. }.gn end.

rn=. gn -."1 0~ gn usedby"0 1 gn
if. *./ mask=. ;0 {"1 rn do.
 gn=. /:~ ~. gn #~ 0=#&> 1 {"1 rn
 rw=. 'ROOTWORDS',alltrim y
 NB. return in form ready to store in jod
 'pr ',(quote rw),LF,rw,'=: ',(5!:5) <'gn'
else.
 (jderr_ajod_ 'usedby errors'),<(-. mask)#rn
end.
)

firstone=:] > [: }: 0: , ]

firstones=:> (0: , }:)

firstones2=:> |.!.0

fmtswex=:3 : 0

NB.*fmtswex v-- format short comments for inclusion in header comments.
NB.
NB. monad:  cl =. fmtswex blNames
NB.
NB.   get 'ROOTSwaypoints' [ od ;:'gps utils' [ 3 od''
NB.   fmtswex ROOTSwaypoints   

NB. require 'general/jod' !(*)=. fsen
t=. >&.> <"1 |: fsen&> y
ctl 'NB. ' ,"1 ((0 pick t) ,"1 '  - ') ,. 1 pick t
)

fob=:([: > [ {~ [: < 1 ; (0 { [) i. [: < ]) ::('noun fetch error' (13!:8) 255"_)

freq=:~. ; #/.~

freqdist=:~.@] ,: #/.~

freqlist=:~. ,: [: <"0 #/.~

fromascii85=:3 : 0

NB.*fromascii85 v-- decode ASCII85 representation.
NB.
NB. Inverse of (toascii85).
NB.
NB. monad:  cl =. fromascii85 clA85

r=. ,y
r=. a.i.r
r=. (r > 32) # r
r=. (2 * (a.i.'<~') -: 2 {. r) }. r
r=. (-2 * (a.i.'~>') -: _2 {. r) }. r
m=. r = a.i.'z'
r=. r - 33
r=. 0 (I.m) } r
r=. (1+4*m) # r
b=. 5 | #r
r=. r,84 #~ b{ 0 4 3 2 1
r=. a.{~ ,(4#256) #: 85 #. _5 [\ r
r }.~ - b { 0 0 3 2 1
)

frombase64=:3 : 0

NB.*frombase64  v--  from  base  64  representation  -  inverse  of
NB. tobase64.
NB.
NB. verbatim: source convert/misc/base64 addon
NB.
NB. monad: cl =. frombase64 clB64
NB.
NB.   frombase64 tobase64 'encode me'

pad=. _2 >. (y i. '=') - #y
pad }. a. {~ #. _8 [\ , (6#2) #: BASE64 i. y
)

fromjulian=:3 : 0

NB.*fromjulian v-- converts Julian day numbers to dates, converse
NB. (tojulian).
NB.
NB. monad:  itYYYYMMDD =. fromjulian nlJulian
NB.
NB.   juldayno=. 1 tojulian 17770704 19530702 20000101 20331225
NB.   fromjulian juldayno
NB.
NB. dyad:  i[1,2]YYYYMMDD =. fromjulian nlJulian
NB.
NB.   0 fromjulian juldayno   NB. monad
NB.   1 fromjulian juldayno

0 fromjulian y
:
NB. Gregorian Calendar correction
b=.      2299161 <: y
jalpha=. <. 36524.25 %~ _0.25 + y - 1867216
ja=.     (y * -. b) + b * y + 1 + jalpha - <. 0.25 * jalpha

jb=. ja + 1524
jc=. <. 6680.0 + ((jb - 2439870) - 122.1) % 365.25
jd=. <. (365 * jc) + 0.25 * jc
je=. <. (jb - jd) % 30.6001

id=. (jb - jd) - <. 30.6001 * je
mm=. je - 1
mm=. mm - 12 * mm > 12

iyyy=. jc - 4715
iyyy=. iyyy - mm > 2
iyyy=. iyyy - iyyy <: 0

NB. convert result format
if. x do. 100 #. |: iyyy , mm ,: id  else. |: iyyy , mm ,: id end.
)

fsize=:1!:4 ::(_1:)@(fboxname&>)@boxopen

fuserows=:>@((>@[ ,"1 >@])/)

fwrite=:([: , [) (#@[ [ 1!:2) ::(_1:) [: fboxname ]

geomean=:# %: */

getele=:] belongstrs~ [: tags [: alltrim [

geteleattr=:] belongstrs~ [: atags [: alltrim [

geteleattrtext=:[: '>'&afterstr&.> ] betweenstrs~ [: atags [: alltrim [

geteletext=:] betweenstrs~ [: tags [: alltrim [

geteletextidx=:] betweenidx~ [: tags [: alltrim [

gspn=:3 : 0

NB.*gspn v-- get short path file name.
NB.
NB. Proof positive that  some  useful  code can be extracted from
NB. the  JCE monster. This little  snippet uses the winapi to get
NB. the short path file 8.3 dos name from long file names.
NB.
NB. monad:  clShort =. gspn clPathpat
NB.
NB.   gspn 'verylongfilename.ehh'
NB.
NB.   NB. use with dir verb
NB.   gspn&> 1 dir 'c:\pictures\2007\365\*.*'

first=. >@{.
snd=. 1&pick
empty=. ''"_
res=. 0&pick >@{. 2&pick f.
a=. (empty`a1)@.(0"_ <: first)
dropoldresbufandappendnewone=. (1&|.)@: (] ,  <@:(#&'*') @: (>@{.) ) @: }: @: }:
a1=. (res`(a@:gsp@:dropoldresbufandappendnewone))@.(first > 3&pick) 						
gsp=. ('kernel32 GetShortPathNameA i *c *c i'&cd)
c=. ( ; (#&'*' ; ])&(>:@:#) )	
a@:gsp@:c y
)

harmean=:mean&.%

hfd=:16&#.@('0123456789ABCDEF'&i.)^:_1

histogram=:<:@(#/.~)@(i.@#@[ , I.)

histogram2=:<:@(#/.~)@(i.@>:@#@[ , |.@[ (#@[ - I.) ])

host=:[: 2!:0 '('"_ , ] , ' || true)'"_

huo=:<.@-:^:(0 = 2&|)^:a:

ic=:3!:4

ifc=:3 : 0

NB.*ifc v-- format interface comment text.
NB.
NB. Looks up interface  words  of a  group  and formats  text for
NB. insertion into group headers and postprocessors.
NB.
NB. monad:  ifc clGroupName
NB. dyad:   iaOption ifc clGroupName

1 ifc y
:
NB. require 'jod' !(*)=. badrc_ajod_ get jderr_ajod_ badcl_ajod_
if. badcl_ajod_ y do. jderr_ajod_ 'invalid group name' return.
else.
  iface=. 'IFACEWORDS',alltrim y
end.

NB. set comment style (header, postprocessor)
cpx=. ;(x-:1){ (<'NB.  ';' - '),<'NB. ';'  NB. '

NB. define interface list in jod scratch locale
NB. !(*)=. SO__JODobj erase__SO__JODobj locsfx_ajod_ nl__SO__JODobj
if. badrc_ajod_ rc=. (;SO__JODobj) get iface   do. rc   return.
elseif.  ilist=. ".iface , ;locsfx_ajod_ ;SO__JODobj
         erase__SO__JODobj nl__SO__JODobj i. 4
         badrc_ajod_ rc=. 0 8 get /:~ ~.ilist  do. rc return.
elseif.  0=#txt=. >1{rc do. jderr_ajod_ 'no interface words' return.
elseif.do.
   ctl fuserows >&.> <"1 |: ((#txt)#,:cpx) ,&.> txt
end.
)

intersect=:[: ~. ] -. ] -. [

intfrdate=:0 100 100&#.@:<.

isatom=:0 = #@$

isboxed=:32&=@(3!:0)

ischar=:2&=@(3!:0)

iscomplex=:16"_ = 3!:0

isint=:1 4 e.~ 3!:0

isnan=:128!:5

isopen=:32&~:@(3!:0)

isotimestamp=:3 : 0

NB.*isotimestamp v-- format time as: YYYY-MM-DD HR:MN:SC.ddd
NB.
NB. Yet another timestamp formart. (y) is one or more time stamps
NB. in 6!:0 format.
NB.
NB. monad: cl =. isotimestamp nlTime | ntTime
NB.
NB.   isotimestamp 6!:0 ''
NB.
NB.   isotimestamp 10 # ,: 6!:0 ''  NB. table

r=. }: $y
t=. _6 [\ , 6 {."1 y
d=. '--b::' 4 7 10 13 16 }"1 [ 4 3 3 3 3 3 ": <.t
d=. d ,. }."1 [ 0j3 ": ,. 1 | {:"1 t
c=. {: $d
d=. ,d
d=. '0' (I. d=' ')} d
d=. ' ' (I. d='b')} d
(r,c) $ d
)

isunicode=:131072"_ = 3!:0

isunique=:[: -. 0 e. ~:

jcr=:[: ];._1 (10{a.) , [: 5!:5 <

jpathsep=:'/'&(('\' I.@:= ])})

julfrcal=:3 : 0

NB.*julfrcal v-- Julian dates from calendar dates.
NB.
NB. Astronomical Julian date. Similiar to (tojulian)  but handles
NB. the fact that Julian days start at noon rather than  midnight
NB. for calendar days.
NB.
NB. monad:  fl =. julfrcal ilYYYYMMDD | itYYYYMMDD
NB.
NB.   julfrcal 2001 9 11
NB.   julfrcal 1776 1941 1867 , 7 12 7 ,: 4 7 1
NB.
NB.   NB. zero date is roughly the age of the oldest bristlecone pines (coincidence?)
NB.   julfrcal -4711 10 29.5   

NB. vector J                       NB.  scalar BASIC
'y m d'=. y                        NB.  INPUT "Y,M,D ";Y,M,D
g=. 1582 <: y                      NB.  G=1: IF Y<1582 THEN G=0
f=. (d - d1) - 0.5 [ d1=. <. d     NB.  D1=INT(D): F=D-D1-0.5
j=. - <. 7 * 4 %~ <.y + 12 %~ m+9  NB.  J=-INT(7*(INT((M+9)/12)+Y)/4)
                                   NB.  IF G=0 THEN 805
s=. * m-9 [ a=. | m-9              NB.  S=SGN(M-9): A=ABS(M-9)
j3=. <. y + s * <. a%7             NB.  J3=INT(Y+S*INT(A/7))
j3=. - <. 3r4 * >: <. j3 % 100     NB.  J3=-INT((INT(J3/100)+1)*3/4)
j=. j + (<.275 * m%9) + d1 + g*j3  NB. 805  J=J+INT(275*M/9)+D1+G*J3
j=. j + 1721027 + (2*g) + 367*y    NB.  J=J+1721027+2*G+367*Y
b=. f >: 0                         NB.  IF F>=0 THEN 825
f=. f + b [ j=. j - b              NB.  F=F+1: J=J-1
f + j
)

showpass soput ".'nl_',SOLOCALE,'_ i.4' [ cocurrent 'base' NB.{*JOD*}
".soclear NB.{*JOD*}
cocurrent SO__JODobj NB.{*JOD*}


justdrv=:[: }: ] #~ [: +./\. ':'&=

justdrvpath=:[: }: ] #~ [: +./\. '\'&=

justext=:''"_`(] #~ [: -. [: +./\. '.'&=)@.('.'&e.)

justfile=:(] #~ [: -. [: +./\ '.'&=)@(] #~ [: -. [: +./\. e.&':\')

justfileext=:] #~ [: -. [: +./\. '\'&=

justpath=:[: }: ] #~ ([: -. [: +./\. ':'&=) *. [: +./\. '\'&=

jvn=:3 : 0

NB.*jvn-- J version number.
NB.
NB. monad:  na =. jvn uuIgnore

NB. J version number
ver=. 9!:14 ''
ver=. (ver e. '0123456789/')#ver

NB. return version 6.01 if string is not numeric
100 %~ , 601 ". (ver i. '/') {. ver
)

jvr=:] , '=: ' , [: 5!:5 <

kurtosis=:# * +/@(^&4)@dev % *:@ssdev

lastone=:] > [: }. ] , 0:

lastones=:> 1&(|.!.0)

leap=:$ $ [: -/ 0 = 4 100 400 4000 |/ ,

lfp=:#;.1

ljerr=:13!:12

ljust=:' '&$: :(] |."_1~ i."1&0@(] e. [))

lsfit=:3 : 0

NB.*lsfit v-- coefficients of polynomical fitting data points.
NB.
NB. Lease squares  polynomial  curve fit.  (y)  is  a two  column
NB. matrix of X, Y. (x) is polynomial order (default 2).
NB.
NB. monad:  lsfit ftXY
NB.
NB. dyad:  n lsfit ftXY

2 lsfit y
:
'ax ay'=. |: y
ay%.ax^/i.>:x
)

ltrim=:] #~ [: -. [: *./\ ' '"_ = ]

lut=:3 : 0

NB.*lut v-- load local utilities locale (ijod) and make words base available.
NB.
NB. monad:  lut clWord | blclWords
NB. dyad:   clLocale lut clWord | blclWords

'ijod' lut y
:
NB. require 'jod' !(*)=. getrx badrc_ajod_ cocurrent coinsert
if. badrc_ajod_ rc=. x getrx y do. rc
else.
  NB. coinsert x [ cocurrent 'base' 
  rc
end.
)

md5fromstring=:3 : 0

NB.*md5fromstring v-- computer md5 hash from character list.
NB.
NB. monad:  md5fromstring cl

y write TEMPFILE0

NB. requires md5 on shell path !(*)=. shell
32{.shell 'md5.exe -l ',TEMPFILE0
)

mean=:+/ % #

median=:-:@(+/)@((<. , >.)@midpt { /:~)

mema=:15!:3

memf=:15!:4

memr=:15!:1

memw=:15!:2

midpt=:-:@<:@#

mode2=:3 : 0

NB.*mode2 v-- finds  the  most frequently occurring item(s) in  a
NB. list.
NB.
NB. monad:  ul =. mode2 ul
NB.
NB.   mode2 ?.500#100
NB.   mode2 ;:'I do what I do because I am what I am'

if. 0 < # y =. ,y do.     NB. null lists have no modes
  f =. #/.~ y             NB. nub frequency
  (~. y) #~ f e. >./ f    NB. highest frequency items
else. y
end.
)

monthsbetween=:4 : 0

NB.*monthsbetween v--  list of  month counts between two YYYYMMDD
NB. dates.
NB.
NB. dyad:  ilYYYYMMDD monthsbetween ilYYYYMMDD
NB.
NB.   2007 7 2 monthsbetween 2009 9 22

NB. order on year
 'x y'=. /:~  x,:y

if. 0=d=. (0{y) - 0{x  do. (1{y) - 1{x  else. (12-1{x),((d=1)}.(|<:d)#12),1{y end.
)

moons=:3 : 0

NB.*moons v-- times of new and full moons for n calendar years.
NB.
NB. The  result  is  rank 3 numeric array  where  ({.  moons) are
NB. Julian day numbers and ({: moons)  is  a  logical  mask  with
NB. (0)'s denoting new moons and (1)'s denoting full moons.
NB.
NB. monad:  ftJulian=. moons ilYears
NB.
NB.        moons 1996 1997 2002

NB.  vector J                         scalar Basic
y=. , y
r1=. 1r180p1                          NB.  R1=3.14159265/180
k0=. <. 12.3685 * y - 1900            NB.  K0=INT((Y-1900)*12.3685)
t=.  (y - 1899.5) % 100               NB.  T=(Y-1899.5)/100
t2=. *: t [ t3=. t^3                  NB.  T2=T*T: T3=T*T*T
j0=. 2415020 + 29 * k0                NB.  J0=2415020+29*K0
f0=. (0.0001178*t2) - 0.000000155*t3  NB.  F0=0.0001178*T2-0.000000155*T3
f0=. f0 + 0.75933 + 0.53058868*k0     NB.  F0=F0+0.75933+0.53058868*K0
f0=. (f0-(0.000837*t))-0.000335*t2    NB.  F0=F0-0.000837*T-0.000335*T2
m0=. k0 * 0.08084821133               NB.  M0=K0*0.08084821133
m0=. 359.2242 + 360 * 1 | m0          NB.  M0=360*(M0-INT(M0))+359.2242
m0=. m0 - 0.0000333*t2                NB.  M0=M0-0.0000333*T2
m0=. m0 - 0.00000347*t3               NB.  M0=M0-0.00000347*T3
m1=. k0 * 0.07171366128               NB.  M1=K0*0.07171366128
m1=. 306.0253 + 360 * 1 | m1          NB.  M1=360*(M1-INT(M1))+306.0253
m1=. m1 + 0.0107306*t2                NB.  M1=M1+0.0107306*T2
m1=. m1 + 0.00001236*t3               NB.  M1=M1+0.00001236*T3
b1=. k0 * 0.08519585128               NB.  B1=K0*0.08519585128
b1=. 21.2964 + 360 * 1 | b1           NB.  B1=360*(B1-INT(B1))+21.2964
b1=. b1 - 0.0016528*t2                NB.  B1=B1-0.0016528*T2
b1=. b1 - 0.00000239*t3               NB.  B1=B1-0.00000239*T3

NB. rank conjuntion vectorizes BASIC loop
k9=. i. 29                            NB.  FOR K9=0 TO 28
j=.  j0 +"1 0 ] 14*k9                 NB.  J=J0+14*K9
f=.  f0 +"1 0 ] 0.765294*k9           NB.  F=F0+0.765294*K9
k=.  k9 % 2                           NB.  K=K9/2
m5=. r1 * m0 +"1 0 k*29.10535608      NB.  M5=(M0+K*29.10535608)*R1
m6=. r1 * m1 +"1 0 k*385.81691806     NB.  M6=(M1+K*385.81691806)*R1
b6=. r1 * b1 +"1 0 k*390.67050646     NB.  B6=(B1+K*390.67050646)*R1
f=.  f - 0.4068 * sin m6              NB.  F=F-0.4068*SIN(M6)
f=.  f + (0.1734 - 0.000393*t) *"1 1 sin m5   NB. F=F+(0.1734-0.000393*T)*SIN(M5)
f=.  f + 0.0161 * sin 2*m6            NB.  F=F+0.0161*SIN(2*M6)
f=.  f + 0.0104 * sin 2*b6            NB.  F=F+0.0104*SIN(2*B6)
f=.  f - 0.0074 * sin m5-m6           NB.  F=F-0.0074*SIN(M5-M6)
f=.  f - 0.0051 * sin m5+m6           NB.  F=F-0.0051*SIN(M5+M6)
f=.  f + 0.0021 * sin 2*m5            NB.  F=F+0.0021*SIN(2*M5)
f=.  f + 0.0010 * sin m6 -~ 2*b6      NB.  F=F+0.0010*SIN(2*B6-M6)
j=.  j + f                            NB.  J=J+INT(F): F=F-INT(F)
u=.  0 1 $~ # k9                      NB. IF U=0 THEN PRINT " NEW MOON ";
j ,: |: (#y) # ,: u                   NB. IF U=1 THEN PRINT "FULL MOON ";
)

movgmean=:-@[ (# %: */)\ ]

movmean=:-@[ (+/ % #)\ ]

nc=:4!:0

nextversion=:] + 1r2"_ * 1: - ]

ngc=:3 : 0

NB.*ngc v-- new group class template.
NB.
NB. This verb runs through all the tasks required to turn a group
NB. into a self contained class file.  The default  postprocessor
NB. inserts the group's names into the base locale.
NB.
NB. monad:  ngc clGroupName
NB.
NB.   ngc 'mynewgroup'
NB.
NB. dyad:  iaOption ngc clGroupName
NB.
NB.   NB. update existing groups - resets any header or postpostprocessor
NB.   0 ngc 'mygroup'

1 ngc y
:
NB. require 'jod' !(*)=. dnl get grp put JSCRIPT_ajod_ badrc_ajod_ 
NB. !(*)=. jderr_ajod_ ok_ajod_ badcl_ajod_ badil_ajod_
if.     badil_ajod_ x do. jderr_ajod_ 'invalid option'     return.
elseif. badcl_ajod_ y do. jderr_ajod_ 'invalid group name' return.
elseif.do.
  gname=. alltrim y
  new=. 1={.x
end.

if. new *. (<gname) e. 2 dnl gname do. jderr_ajod_ 'group (',gname,') already exists' return.
elseif. badrc_ajod_ rc=. grp gname do. rc return.
elseif.do.
  glist=. }.rc
end.

NB. group header and postprocessor
if. badrc_ajod_ rc=. 1 get ;:'teststub poststub' do. rc return. else. 'rc ghp'=. rc end.

NB. group root and interface lists - create temp values
NB. in jod scratch locale and destroy after put
NB. !(*)=. SO__JODobj erase__SO__JODobj locsfx_ajod_ nl__SO__JODobj
irlists=. (;:'ROOTWORDS IFACEWORDS') ,&.> <gname
(irlists ,&.> locsfx_ajod_ SO__JODobj)=. irlists;<''
if.     badrc_ajod_ rc=. (;SO__JODobj) put irlists do. rc return.
elseif. desc=. ('root words (' ;'interface words (') ,. irlists
        desc=.irlists ,. <"1 ;"1 desc ,. <') group'
        badrc_ajod_ rc=. 0 8 put desc              do. rc return.
elseif.do.
  erase__SO__JODobj nl__SO__JODobj i. 4
end.

if. -.new do. irlists=. (~.irlists , glist) -. a: end.

NB. create/update group with lists
if. badrc_ajod_ rc=. grp gname;irlists do. rc return. end.

NB. group class header
author=. CLASSAUTHOR
head=. ;1{0{ghp
now=. ; |. 3 {. <;._1' ',timestamp ''
yynow=. 2 }. now
head=.('/{~T~}/',gname,'/{~D~}/',now,'/{~SD~}/',yynow,'/{~A~}/',alltrim author)changestr head
if. badrc_ajod_ rc=. 2 1 put gname;head do. rc return. end.

NB. group post processor !(*)=. POSTAMBLEPFX_ajodtools_
post=. ;1{1{ghp
post=. ('/{~T~}/',gname) changestr post
if. badrc_ajod_ rc=. 4 put (POSTAMBLEPFX_ajodtools_,gname);JSCRIPT_ajod_;post do. rc
else.
  ok_ajod_ 'class group with postprocessor created/updated ->';gname
end.
)

nob=:([: (] ,: ".&.>) ;: ::]) ::('noun pack error' (13!:8) 255"_) :[:

onelength=:(] > [: }: 0: , ]) +/;.1 ]

pack=:[: (, ,&< ".)&> [: /:~ ;: ::]

parity=:~:/

parsecsv=:3 : 0

NB.*parsecsv v--  parses comma delimited  files. (x) is the field
NB. delimiter. Lines are delimited with either CRLF or LF
NB.
NB. monad:  btcl =. parsecsv cl
NB. dyad:   btcl =. ca parsecsv cl
NB.
NB.   ',' parsecsv read 'c:\comma\delimted\text.csv'


',' parsecsv y
:
'separater cannot be the " character' assert -. x -: '"'

NB. CRLF delimited *.csv text to char table
y=.  x ,. ];._2 y -. CR

NB. bit mask of unquoted " field delimiters
b=. -. }. ~:/\ '"' e.~  ' ' , , y
b=. ($y) $ b *. , x = y

NB. use masks to cut lines
b <;._1"1 y
)

parsevolumes=:[: 3 5 10&{&> [: <;._1&.> ' ' ,&.> ]

patpartstr=:4 : 0

NB.*patpartstr v-- split list into sublists of pattern and non-pattern.
NB.
NB. dyad:  (ilIdx ;< blcl) =. clPattern patpartstr clStr
NB.
NB.   'hoo' patpartstr 'hoohoohoo'  
NB.   'ab.c' patpartstr   'abhc yada yada abNcabuc boo freaking hoo'
NB.   'nada' patpartstr 'nothing to match'
NB.
NB.   NB. result pattern indexes and split list
NB.   'idx substrs'=. 'yo[a-z]*'  patpartstr 'yo yohomeboy no no yoman'
NB.   idx{substrs  NB. patterns

NB. require 'regex' !(*)=. rxmatches
if. #pat=. ,"2 x rxmatches y do.
  mask=. (#y)#0
  starts=. 0 {"1 pat
  ends=. starts + <: 1 {"1 pat
  m1=. 1 (0,starts)} mask 
  m2=. _1 (|.!. 0) 1 ends} mask 
  m2=. m1 +. m2 
  mask=. 1 starts} mask
  idx=. (m2 {.;.1 mask) # i. +/m2       
  idx;< m2 <;.1 y
else.
  (i.0);<<y
end.
)

pfc=:({. , 6.28318530717958623&|@{:)@:(*.@(j./))

pfl=:[: ; {.&1&.>

pick=:>@{

polyprod=:+//.@(*/)

portchars=:[: 9!:7 '+++++++++|-'"_ [ ]

postit=:]`,.@.(1&>:@(#@$))^:2

pwf=:3 : 0

NB.*pwf v-- write put dictionary words as script files.
NB.
NB. monad:  pwf clPattern
NB.
NB.   pwf 're'  NB. write put dictionary words with prefix 're'
NB.   pwf ''    NB. write all put dictionary words
NB.
NB. dyad:   clPath pwf clPattern
NB.
NB.   'c:/temp' pwf 'de' NB. write to given directory

'' pwf y
:
NB. JOD references !(*)=. dnl get badrc_ajod_ ok_ajod_ 
NB. !(*)=. isempty_ajod_ jpathsep_ajod_ makedir_ajod_ write_ajod_
pk=.  >@{                        
tsl=. ] , ('\'"_ = {:) }. '\'"_  
if.     badrc_ajod_ ws=. 0 _1 dnl y        do. ws return.
elseif. badrc_ajod_ ws=. 0 10 get 1 pk ws  do. ws return.
NB. individual word scripts using short description text for tacits
elseif. badrc_ajod_ ws=. 0 0 1 wttext__MK__JODobj 1 pk ws  do. ws return.
elseif.do.
  try.
    NB. if (x) path is empty use put dictionary directory (alien\words)
    if. isempty_ajod_ x do.
      DL=. {:{.DPATH__ST__JODobj NB. !(*)=. DL
      NB. insure subdirectory when (x) is empty
      NB. when (x) is nonempty assume it exists
      makedir_ajod_ <jpathsep_ajod_ tsl x=. ALI__DL,'words'
    end.
    NB. write individual word files
    ws=. 1 pk ws
    wpf=. (<jpathsep_ajod_ tsl x) ,&.> (0 {"1 ws) ,&.> <'.ijs'
    ok_ajod_ wpf [ (toHOST&.> 1 {"1 ws) write_ajod_&.> wpf
  catchd. jderr_ajod_ 'unable to write all word file(s)'
  end.
end.
)

q1=:median@((median > ]) # ]) ::_:

q3=:median@((median < ]) # ]) ::_:

showpass soput ".'nl_',SOLOCALE,'_ i.4' [ cocurrent 'base' NB.{*JOD*}
".soclear NB.{*JOD*}
cocurrent SO__JODobj NB.{*JOD*}


quote=:''''&,@(,&'''')@(#~ >:@(=&''''))

randunif=:(? % <:)@:($&2147483647) :({.@[ + ({: - {.)@[ * $:@])

read=:1!:1&(]`<@.(32&>@(3!:0)))

readcsv=:','&$: :([: <;._2&> [ ,&.>~ [: <;._2 [: (] , ((10{a.)"_ = {:) }. (10{a.)"_) (13{a.) -.~ [: 1!:1&(]`<@.(32&>@(3!:0))) ])

readcsvs=:','&$: :([: s:@<;._2&> [ ,&.>~ [: <;._2 [: (] , ((10{a.)"_ = {:) }. (10{a.)"_) (13{a.) -.~ [: 1!:1&(]`<@.(32&>@(3!:0))) ])

readnoun=:3!:2@(1!:1&(]`<@.(32&>@(3!:0))))

readtd=:[: <;._1"1 (9{a.) ,. [: ];._2 [: (] , ((10{a.)"_ = {:) }. (10{a.)"_) (13{a.) -.~ 1!:1&(]`<@.(32&>@(3!:0)))

readtd2=:[: <;._2&> (9{a.) ,&.>~ [: <;._2 [: (] , ((10{a.)"_ = {:) }. (10{a.)"_) (13{a.) -.~ 1!:1&(]`<@.(32&>@(3!:0)))

readtd2s=:[: s:@<;._2&> (9{a.) ,&.>~ [: <;._2 [: (] , ((10{a.)"_ = {:) }. (10{a.)"_) (13{a.) -.~ 1!:1&(]`<@.(32&>@(3!:0)))

readtdbom=:[: <;._2&> (9{a.) ,&.>~ [: <;._2 [: (] , ((10{a.)"_ = {:) }. (10{a.)"_) (13{a.) -.~ [: (] }.~ 3 * (239 187 191{a.) -: 3 {. ]) 1!:1&(]`<@.(32&>@(3!:0)))

readtds=:[: s:@:<;._1"1 (9{a.) ,. [: ];._2 [: (] , ((10{a.)"_ = {:) }. (10{a.)"_) (13{a.) -.~ 1!:1&(]`<@.(32&>@(3!:0)))

readvtd=:3 : 0

NB.*readvtd v-- read variable length tab delimited files.
NB.
NB. Variable  length  TAB  delimited files are files  with  lines
NB. delimited by LF or CRLF and  items within lines  delimited by
NB. TAB  characters.  The first line item is associated with  all
NB. subsequent items. Lines with a leading item and no associated
NB. items are removed.
NB.
NB. monad:  btcl =. readvtd clPathFile
NB.
NB.   dat=. 'test',TAB,'me',LF,'again',LF, }: ;( ;:'oh that felt so so good') ,&.> TAB
NB.   dat write 'c:/temp/vte.txt'
NB.
NB.   readvtd 'c:/temp/vte.txt'

d=. ((<;._1)@:(TAB&,))&.> (<;._2 tlf (read y) -. CR) -. a:
((<: #&> d) # {.&> d) ,. ; }.&.> d
)

realpart=:{."1@+.

reb=:3 : 0

NB.*reb v-- removes redundant blanks - leading, trailing multiple
NB.
NB. monad:  reb cl
NB. dyad:  ua reb ul

' ' reb y
:
y=. x , y
b=. x = y
}.(b*: 1|.b)#y
)

rebc=:] #~ [: -. '  '&E.

rebrow=:] #~ [: -. [: *./"1 ' '&=

rebtbcol=:] #"1~ [: -. [: *./ [: *./\."1 ' '&=

rebu=:] #~ [: -. (2: # [) E. ]

refirstone=:-. +. firstone

remdotargs=:3 : 0

NB.*remdotargs  v--  replaces dotted J arguments in  scripts with
NB. undotted equivalents.
NB.
NB. J  6.01 changed explicit argument  syntax from x. y. m. n. u.
NB. v. to x y m  n u v. Like most incompatible J changes  the new
NB. scheme  is  better.   Unfortunately  changing  something   as
NB. fundamental  as argument syntax  forces a  massive inspection
NB. and modification of exsisting code. Simple search and replace
NB. can easily convert 95% of existing J code alas that remaining
NB. 5% is still going  to force you  to inspect almost every line
NB. of explicit J code.
NB.
NB. This verb  implements  a much  smarter search and replace  by
NB. using  J's own parsing  rules as  defined in  Roger's elegant
NB. word formation on lines (wfl) verb.
NB.
NB. monad:  cl =. remdotargs clJscript
NB.
NB.   scr=. read 'c:\joddictionaries\504\flickrut\script\flickrAPI.ijs'
NB.   'q s'=. remdotargs scr

NB. cut scripts into tokens - cuts into commented text
st=. wfl_z_ y

NB. remove blanks surrounding all tokens
bst=. alltrim&.> st

NB. find any current x y m n u v tokens and rename
lcn=. ;:'x y m n u v'
cnx=. I. bst e. lcn
lcnnew=. (cnx { bst) ,&.> <'789'  NB. ugly suffix
assert. -. +./lcnnew e. st
st=. lcnnew cnx} st

NB. find and replace unquoted arguments
dargs=. ;:'x. y. m. n. u. v.'
uqx=. I. bst e. dargs
st=. ((uqx{st) -.&.> '.') uqx} st

NB. does a string appear in a list of strings
mch=. [: +./&> E.L:0

NB. for quoted strings inspection is a 
NB. necessary but we can narrow the context 
qst=. st {~ I. (<'''''') = ({. , {:) &.> st
qdots=. dargs ,. (I.&.> <"1 dargs mch"0 1 qst) {&.> <qst

NB. quoted, script
qdots;;st
)

requoted=:4 : 0

NB.*requoted v-- replaces atoms in "quoted" lists.
NB.
NB. Replaces all (1{x) in simple nonnested atom runs delimited by
NB. (0{x) with (2{x).
NB.
NB. dyad:  ulRep =. uaQuoteCharRep requoted ul
NB.
NB.   NB. replace ,'s in " delimited characters
NB.   ('",',1{a.) requoted 'this , "damm quoted comma , screws up my" , based parsing'
NB.
NB.   NB. numeric quotes
NB.   1 2 9 requoted 0 0 0 1 2 3 1 0 1 2 2 2 1 0

NB. quote, atom, replacement (must be distinct)
'q c r'=. x

if. +./b=. q=y do.
  'unbalanced quotes' assert 0=2|+/b
  
  NB. replacements
  p=. I. (c=y) *. ~:/\b
  r p} y
else.
  y
end.
)

rfd=:*&0.0174532925199432955

rflip=:_2: |: |.@$ $ ,

rjust=:' '&$: :(] |."_1~ +/"1@(-.@(<./\."1@([ = ]))))

round=:[ * [: <. 0.5 + %~

rtrim=:] #~ [: -. [: *./\. ' '"_ = ]

runlengths=:#;.1@(}:@(1 , -.)@((-:"_1) 1&|.))

sdcheck=:sdcheck_jsocket_

sdclose=:sdclose_jsocket_

sdconnect=:sdconnect_jsocket_

sdgethostbyname=:sdgethostbyname_jsocket_

sdrecv=:sdrecv_jsocket_

sdsend=:sdsend_jsocket_

sdsocket=:sdsocket_jsocket_

shortlongnames=:3 : 0

NB.*shortlongnames v-- long and short file names from directory pattern.
NB.
NB. monad:  shortlongnames clPathfilepat
NB.
NB.   shortlongnames 'c:\pictures\2007\365\*.*'

NB. require 'dir' !(*)=. dir
long=.  1 dir y  
short=. gspn&> long
long=.  >long
short=. (>:short i:"1 0 '\')}."0 1 short
long=.  (>:long i:"1 0 '\')}."0 1 long
short;long
)

showpass=:] [ 1!:2&2

sin=:1&o.

sind=:sin@rfd

sinh=:5&o.

skewness=:%:@# * +/@(^&3)@dev % ^&1.5@ssdev

smoutput=:0 0 $ 1!:2&2

sob=:[: :(([ {"1~ (0 { [) i. [: ;: ::[ ]) ::('noun selection error' (13!:8) 255"_))

splitstrs=:4 : 0

NB.*splitstrs v-- splits character lists into sublists that start
NB. with (s) and end with (e).
NB.
NB. dyad:  (cl ; cl) splitstrs cl
NB.
NB.   ('cut';'up') splitstrs 'O.J. cut his wife up'
NB.   ';' splitstrs ';useful;edge;condition'

's e'=. x
(1 (0)} (s E. y) +. (-#e) |. e E. y) <;.1 y
)

ssdev=:+/@:*:@dev

sslash=:('\'"_ = {.) }. '\'"_ , ]

stddev=:%:@:var

sunriseset0=:3 : 0

NB.*sunriseset0 v-- computes sun rise and set times - see group documentation.
NB.
NB. monad:  itHM =. sunriseset0 ilBLHMD | ftBLHMD

NB. latitude, longitude, time-zone, month, day !(*)=. b l h m d
y=. # b [ 'b l h m d'=. |: tabit y
b=. dr * b [ rd =. % dr=. 1r180p1

NB. day number within year
n=. _30 + d + (<.9 %~ 275 * m) - 2 * <. 12 %~ m + 9

NB. sun's mean longitude
lg0=. 4.8771 + 0.0172 * (n + 0.5) - l % 360

NB. equation of time
c=. 0.03342 * sin lg0 + 1.345
c2=. rd * c -~ (arctan tan lg0 + c) - arctan 0.9175 * tan lg0 + c
cd=. %: 1 - *: sd=. 0.3978 * sin lg0 + c
sc=. (0.0145 + sd * sin b) % cd * cos b

NB. to handle the three cases enmass without redundant calculations
NB. a boolean table is computed.  1's in each row satisfy a case.
items=. i. #sc [ cases=. (<&_1 , 1&>:@| ,: 1&<) sc

NB. set result table to sun never sets
hrmn=. |: (y , 4)$ NORISESET , 1 0 0

NB. adjust for the sun's declination and atmospheric refraction
pos=. items #~ 1 { cases
c3=. rd * arctan (pos{sc) % %: 1 - *: pos{sc
lc=. (pos{l) + pos{c2

NB. time zone adjusted sunrise times
st=. (6 - pos{h) - (lc + c3) % 15
mn=. <.(st - hr) * 60 [ hr=. <. st
hrmn=. hr (<0;pos)} hrmn
hrmn=. mn (<1;pos)} hrmn

NB. time zone adjusted sunset times
st=. (18 - pos{h) - (lc - c3) % 15
mn=. <.(st - hr) * 60 [ hr=. <. st
hrmn=. hr (<2;pos)} hrmn
hrmn=. mn (<3;pos)} hrmn

NB. sun never rises and result table with rows hr,mr,hs,ms
pos=. items #~ 0 {cases
0 (<1;pos)} hrmn
)

sunriseset1=:3 : 0

NB.*sunriseset1 v-- computes sun rise and set times - see group documentation.
NB.
NB. monad:  itHM =. sunriseset1 flBLHMDY | ftBHMDY 

NB. latitude, longitude, time-zone, month, day, year !(*)=. la lo tz m d y
y=. # la [ 'la lo tz m d y'=. |: tabit y
dr=. 1r180p1 [ dd=. 360 % 365.25636 [ rt=. 50r60

NB. days into year with leap year adjustment
dm=. 0 31 59 90 120 151 181 212 243 273 304 334
dl=. (2 {. dm) , >: 2 }. dm
bl=. 0 = 4 | y [ m=. <: m
dy=. d + ((-.bl) * m { dm) + bl * m { dl
dy=. 0.5 + dy - lo % 360

NB. (th) angle Earth has moved since winter solstice
th=. 9.357001 + (dd * dy) + 1.914 * sin dr * (dd * dy) - 3.97
c3=. 0.3978 * cos dr * th
dc=. (- % dr) * arctan c3 % %: 1 - c3 ^ 2

NB. adjust for positive and negative latitudes
bl=. la < 0
a1=. ((-.bl) * (90 - la) + dc) + bl * (90 + la) - dc
a2=. ((-.bl) * (la - 90) + dc) + bl * (_90 - la) - dc

NB. sun never rises or sets masks
nvset =. a2 >: - rt [ nvrise=. a1 < - rt

NB. corrections
drla=. dr * la   [ drdc=. dr * dc
c1=. ((sin - dr * rt) - (sin drdc) * sin drla) % (cos drdc) * cos drla
t2=. dr %~ arctan (%: 1 - c1 ^ 2) % c1
t1=. 360 - t2 [ bl=. c1 < 0
t2=. (t2 * -.bl) + bl * 180 + t2
t1=. (t1 * -.bl) + bl * 360 - t2

NB. first order equation of time
et=. 0.1511 * sin dr * 17.86 + 2 * dddy=. dd * dy
et=. (_0.1276 * sin dr * dddy - 3.97) - et
drla=. drdc=. dddy=. 0

NB. time zone adjusted rise and set times
tr=. (t1 % 15) - 12 [ ts=. t2 % 15
tr=. tr - et [ ts=. ts - et
s=. ts + tc [ r=.tr + tc [ tc=.(-tz) - lo % 15
hrmn=. (<. r) ,: 1 round 60 * 1|r
hrmn=. hrmn , (<.12 + s) ,: 1 round 60 * 1|s

NB. adjust for when sun never rises or sets
hrmn=. hrmn *"1 -. bl [ bl=. nvset +. nvrise
hrmn=. NORISESET (<0;bl # pos) } hrmn [ pos=. i. {: $ hrmn
1 (<1;nvset # pos) } hrmn
)

symreadtd=:[: s:@<;._2&> (9{a.) ,&.>~ [: <;._2 [: (] , ((10{a.)"_ = {:) }. (10{a.)"_) (13{a.) -.~ 1!:1&(]`<@.(32&>@(3!:0)))

tabit=:]`,:@.(1&>:@(#@$))^:2

showpass soput ".'nl_',SOLOCALE,'_ i.4' [ cocurrent 'base' NB.{*JOD*}
".soclear NB.{*JOD*}
cocurrent SO__JODobj NB.{*JOD*}


tags=:'<'&,@,&'>' ; '</'&,@,&'>'

tan=:3&o.

tand=:tan@rfd

tanh=:7&o.

tap=:i.@! A. i.

tapl=:([: (i.@! A. i.) #) { ]

textform2=:63&$: :(4 : 0)

NB.*textform2 v-- wraps and justifies character table (y).
NB.
NB. This  verb forms an  (n*len)  character matrix. The blanks in
NB. each  row of the output matrix are padded so that the line is
NB. right  and left justified.  The number  of rows in the output
NB. table depends upon how many are needed to hold the input data
NB. in the justified format.
NB.
NB. Note: This verb is  a verbatim translation of  an APL utility
NB. and has not been optimized for J.
NB.
NB. monad:  cmWrap =. textform2 c[0..2]Text
NB.
NB.   textform2 1000$' How can I justify this ehh. '
NB.
NB. dyad:  cmWrap =. iaWidth textform2 c[0..2]Text
NB.
NB.   50 textform2 10#,:' four score and seven years ago our '

i=. 0
v=. reb , y ,"1 ' '
j=. #v
b=. j$0
while. j > a=. i + x do.
  k=.  i + i. >:a - i
  if. #c=. (' ' = k{v)#k do.
    i=. >: {: c
    g=. ({:k) - <:i
    c=. (1 >. <:#c) {. c
    f=. #c
    d=. f $ <. g%f
    d=. (>:{.d) (i. f|g)} d
    b=. d ((f?f){c)} b
  else.
    b=. 1 a} b
    i=. a
  end.
end.
v=. (>:b) # v
e=. >: x
r=. >.(#v) % e
(r,x) {. (r,e)$(e*r){.v
)

timestamp=:3 : 0

NB.*timestamp v-- formats timestamp as dd mmm yyyy hr:mn:sc
NB.
NB. monad:  cl =. timestamp zu | nlTime
NB. 
NB.   timestamp ''              NB. empty now
NB.   timestamp 2007 9 16       NB. fills missing
NB.   timestamp 1953 7 2 12 33   

if. 0 = #y do. w=. 6!:0'' else. w=. y end.
r=. }: $ w
t=. 2 1 0 3 4 5 {"1 [ _6 [\ , 6 {."1 <. w
d=. '+++::' 2 6 11 14 17 }"1 [ 2 4 5 3 3 3 ": t
mth=. _3[\'   JanFebMarAprMayJunJulAugSepOctNovDec'
d=. ,((1 {"1 t) { mth) 3 4 5 }"1 d
d=. '0' (I. d=' ') } d
d=. ' ' (I. d='+') } d
(r,20) $ d
)

tlf=:] , ((10{a.)"_ = {:) }. (10{a.)"_

tms=:6!:2 , 7!:2@]

toCRLF=:2&}.@:;@:((13{a.)&,&.>@<;.1@((10{a.)&,)@toJ)

toHOST=:toCRLF

toJ=:((10{a.) I.@(e.&(13{a.))@]} ])@:(#~ -.@((13 10{a.)&E.@,))

toascii85=:3 : 0

NB.*toascii85 v-- to ascii85 representation.
NB.
NB. From convert/misc/ascii85 addon.
NB.
NB. Converts  a  list  of  bytes to  an  ASCII85  representation:
NB. essentially all the  "visible" ASCII characters.  Useful  for
NB. encoding arbitrary byte  lists as a  portable stream. Returns
NB. lines of length no more than 75 + LF
NB.
NB. The encoding does not begin with <~, though sometimes this is
NB. allowed.  However  PDF  files  do  not  accept  this  prefix.
NB. Decoding does support the prefix.
NB.
NB. monad:  clA85 =. toascii85 cl

r=. ,y
len=. #r
r=. 256 #. _4[\ a.i.r
m=. 0 (_1) } r = 0
n=. 5 * I.m
r=. a. {~ 33 + ,(5#85) #: r
r=. 'z' n } r
m=. 1 n } 5 # -. m
r=. m # r
r=. (- (4|len) { 0 3 2 1) }. r
r=. }: ,(_75 [\ r),.LF
('~>',LF) ,~ (r i: ' ') {. r
)

tobase64=:3 : 0

NB.*tobase64 v-- to base 64 representation.
NB.
NB. source convert/misc/base64 addon
NB.
NB. monad: clB64 =. tobase64 cl
NB.
NB.   tobase64 'encode me'

res=. BASE64 {~ #. _6 [\ , (8#2) #: a. i. y
res, (0 2 1 i. 3 | # y) # '='
)

todate=:3 : 0

NB.*todate v-- convert (todayno) integers to dates.
NB.
NB. WARNING:  valid only for Gregorian dates after  and including
NB. 1800 1 1.
NB.
NB. monad:  todate ilYYYYMMDD
NB.
NB.   dates=. 19530702 19520820 20000101 20000229
NB.   todate todayno 0 100 100 #: dates
NB.
NB. dyad:  pa todayno itYYYYMMDD
NB.
NB.   dates -: 1 todate todayno 0 100 100 #: dates  NB. identity

0 todate y
:
s=. $y
a=. 657377.75 +, y
d=. <. a - 36524.25 * c=. <. a % 36524.25
d=. <.1.75 + d - 365.25 * y=. <. (d+0.75) % 365.25
r=. (1+12|m+2) ,: <. 0.41+d-30.6* m=. <. (d-0.59) % 30.6
r=. s $ |: ((c*100)+y+m >: 10) ,r
if. x do. r=. 100 #. r end.
r
)

today=:3 : 0

NB.*today v-- returns todays date.
NB.
NB. monad:  ilYYYYMMDD =. today uu
NB.
NB.   today 0    NB. ignores argument
NB.
NB. dyad:  iaYYYYMMDD =. uu today uu
NB.
NB.   0 today 0

3&{.@(6!:0) ''
:
0 100 100 #. <. 3&{.@(6!:0) ''
)

todayno=:3 : 0

NB.*todayno v-- convert dates to day numbers, converse  (todate).
NB.
NB. WARNING: valid only for  Gregorian dates after  and including
NB. 1800 1 1.
NB.
NB. monad:  todayno ilYYYYMMDD
NB.
NB.   dates=. 19530702 19520820 20000101 20000229
NB.   todayno 0 100 100 #: dates
NB.
NB. dyad:  pa todayno itYYYYMMDD
NB.
NB.   1 todayno dates

0 todayno y
:
a=. y
if. x do. a=. 0 100 100 #: a end.
a=. ((*/r=. }: $a) , {:$a) $,a
'y m d'=. <"_1 |: a
y=. 0 100 #: y - m <: 2
n=. +/ |: <. 36524.25 365.25 *"1 y
n=. n + <. 0.41 + 0 30.6 #. (12 | m-3),"0 d
0 >. r $ n - 657378
)

tojulian=:3 : 0

NB.*tojulian v--  convert dates  to Julian  day numbers (see long
NB. documentation).
NB.
NB. monad:  tojulian itYYYYMMDD
NB.
NB.   dates=. 1812 1900 2001 ,. 1 7 9 ,. 10 10 10
NB.   tojulian dates
NB.
NB. dyad:  pa tojulian ilYYYYMMDD|itYYYYMMDD
NB.
NB.   0 tojulian dates
NB.   1 tojulian 100 #.dates

0 tojulian y
:
NB. convert dates to standard form
if. x do. y=. 0 100 100 #: y end.
y=. ((*/r=. }: $y) , {:$y) $,y
'y m d'=. <"_1 |: y

if. 0 e. y do. 'error tojulian: there are no zero years' return. end.

NB. The following adapts an atomic (scalar) C algorithm
NB. to efficiently work on J numeric lists of unspecified size
NB. by using a bit mask (b) to apply if-else logic enmass.

NB.  list oriented J               scalar C
jy=. y + y = 0                     NB.  if (jy == 0) ++jy;

b=. 2 < m                          NB.  if (mm > 2) {
jm=. b * m + 1                     NB.    jm = mm + 1;
jm=. jm + b * m + 13 [ b=. -. b    NB.  } else {
jy=. jy - b                        NB.    --jy; jm = mm + 13: }

jul=. 1720995 + d + (<. 30.6001 * jm) + <. 365.25 * jy

NB. Gregorian calendar adjustment
b=. 588829 <: d + 31 * m + 12 * y
(jul * -. b) + b * jul + (2-ja) + <.0.25 * ja=. <. 0.01 * jy
)

tolower=:3 : 0

NB.*tolower v-- convert to lower case.
NB.
NB. monad: cl =. tolower cl

x=. I. 26 > n=. ((65+i.26){a.) i. t=. ,y
($y) $ ((x{n) { (97+i.26){a.) x}t
)

toupper=:3 : 0

NB.*toupper v-- convert to upper case
NB.
NB. monad:  cl =. toupper cl

x=. I. 26 > n=. ((97+i.26){a.) i. t=. ,y
($y) $ ((x{n) { (65+i.26){a.) x}t
)

tranclose=:(+. +./ .*.~)^:_

tranclose2=:# (i.~ {. ]) [: }. (, #) {~^:a: 0:

treesum=:4 : 0

NB.*treesum v-- sums values at tree nodes.
NB.
NB. Sums up values associated  with the nodes of trees. This verb
NB. (due to Roger Hui) sums values at tree nodes - can be applied
NB. to nontrivial trees with millions of nodes.
NB.
NB. dyad:  nlSum =. nlValues treesum ilTreenodes
NB.
NB.   m=: _1+2^20       NB. node count
NB.   n=: m ?@$ 20      NB. node values
NB.
NB.   p0=: (p: ^:_1) >: i.m  NB. tree (0 is root)
NB.   p1=: 0,2#i.<.-:m       NB. complete binary tree
NB.
NB.   n treesum p0
NB.   n treesum p1

d=. ((</.i.@#) y) -.&.> i=. ~.y
while. 1 do.
  c=. #&>d
  j=. (*c)#i
  i=. c#i
  e=. ;d
  t=. i +//. e{x
  if. 0 *./@:= t do. x return. end.
  x=. (t+j{x) j}x
  d=. i <@;/. (j i. e){d,a:
  i=. j
end.
)

truth=:#:@i.@(2&^)

ts=:6!:2 , 7!:2@]

tsfrunixsecs=:3 : 0

NB.*tsfrunixsecs v-- (yyyy mm dd hh nn ss) timestamp from unix seconds.
NB.
NB. monad:  tsfrunixsecs ilSeconds
NB. 
NB.   tsfrunixsecs 1126531243
NB.
NB.   tsfrunixsecs 1126531243 + 10000?5e8 NB. 10000 random future timestamps


NB. second count cannot be negative
assert. 0 <: <./y

NB. 86400 seconds per day; 62091 unix day zero for (todayno)
'days daysecs'=.  y (<.@% ,: |~) 86400
(todate 62091 + days) ,. 24 60 60 #: daysecs
)

tslash=:] , ('\'"_ = {:) }. '\'"_

tslash2=:([: - '\/' e.~ {:) }. '/' ,~ ]

tsrep=:3 : 0

NB.*tsrep v-- timestamp representation as a single number.
NB.
NB. verbatim: 
NB. [opt] timerep times
NB.   opt=0  convert timestamps to numbers (default)
NB.       1  convert numbers to timestamps
NB.
NB. timestamps are in 6!:0 format, or matrix of same.
NB.
NB. examples:
NB.    tsrep 1800 1 1 0 0 0
NB. 0
NB.    ":!.13 tsrep 1995 5 23 10 24 57.24
NB. 6165887097240

0 tsrep y
:
if. x do.
  r=. $y
  'w n t'=. |: 0 86400 1000 #: ,y
  w=. w + 657377.75
  d=. <. w - 36524.25 * c=. <. w % 36524.25
  d=. <.1.75 + d - 365.25 * w=. <. (d+0.75) % 365.25
  s=. (1+12|m+2) ,: <. 0.41+d-30.6* m=. <. (d-0.59) % 30.6
  s=. |: ((c*100)+w+m >: 10) ,s
  r $ s,. (_3{. &> t%1000) +"1 [ 0 60 60 #: n
else.
  a=. ((*/r=. }: $y) , {:$y) $, y
  'w m d'=. <"_1 |: 3{."1 a
  w=. 0 100 #: w - m <: 2
  n=. +/ |: <. 36524.25 365.25 *"1 w
  n=. n + <. 0.41 + 0 30.6 #. (12 | m-3),"0 d
  s=. 3600000 60000 1000 +/ .*"1 [ 3}."1 a
  r $ s+86400000 * n - 657378
end.
)

tstamp=:timestamp

ucpfrncrd=:[: ".;._1 '#;' -.~ ]

ucpfrutf8=:3 u: 7 u: ]

unixsecsfrts=:3 : 0

NB.*unixsecsfrts v-- unix seconds from (yyyy mm dd hh nn ss) timestamp.
NB.
NB. monad:  ilSeconds =. unixsecsfrts il | itTimestamps
NB.
NB.   now=. unixsecsfrts (6!:0)''  NB. unix seconds count now
NB.
NB.   pastsecs=. <. now - 1000?5e7  
NB.   pastsecs -: unixsecsfrts tsfrunixsecs pastsecs  NB. identity

NB. 86400 seconds per day; 62091 unix day zero for (todayno)
assert. 0 <: <./dn=. (todayno 3{."1 y) - 62091
<. (86400 * dn) + 60 #. _3 {."1 y
)

unpack=:3 : 0

NB.*unpack v-- inverse of pack.
NB.
NB. Unpacks  and assigns  nouns stored in (y)  boxed  name  value
NB. table.
NB.
NB. monad:  cl =. unpack bt
NB.
NB.   p=. pack_ajod_ nl_ajod_ 0   NB. nouns from (ajod) locale
NB.   unpack p                    NB. unpacks in (base) locale
NB.   unpack_loc_ p               NB. unpacks in (loc) - unpack is in (loc)
NB.
NB. dyad:  cl =. clLoc unpack bt
NB.
NB.   '1' unpack p    NB. unpack into numbered locale
NB.   'boo' unpack p  NB. unpack into named locale

'' unpack y
:
if. 0 e. $y do. '' return. end.
NB. y=. citemize y
NB. nms=. toupper&.> {."1 y
y=. (,:^:(2 > #@$)) y
nms=. {."1 y
NB. target locale
if. #x=. ,x do. nms=. nms ,&.> <'_',(x-.' '),'_' end.
(nms)=: {:"1 y
nms
)

usbdrive=:3 : 0

NB.*usbdrive v-- first mounted USB drive.
NB.
NB. monad:  usbdrive clUsbvolume
NB.
NB.   usbdrive ''         NB. use default (USBDRIVEVOLUME)
NB.   usbdrive 'THISDRV'  NB. search for given volume name


vols=. volumes 0 NB. all mounted volumes

assert. 0<#vols
if. #y do. usbdrv=. alltrim y else. usbdrv=. USBDRIVEVOLUME end.

if. +./mask=. (<usbdrv) +./@:E.&> vols do.
  usb=. >(mask i. 1){vols
  ({. (#'Volume in drive ') }. usb),':'
else.
  ''  NB. nothing mounted
end.
)

utf8=:8&u:

utf8frncrd=:8 u: 4 u: ucpfrncrd

valdate=:3 : 0

NB.*valdate v-- validates lists or tables of YYYY MM DD Gregorian
NB. calendar dates.
NB.
NB. monad:  valdate il|it
NB.
NB.   valdate 1953 7 2
NB.   valdate 1953 2 29 ,: 1953 2 28  NB. not a leap year

s=. }:$y
'w m d'=. t=. |:((*/s),3)$,y
b=. *./(t=<.t),(_1 0 0<t),12>:m
day=. (13|m){0 31 28 31 30 31 30 31 31 30 31 30 31
day=. day+(m=2)*-/0=4 100 400|/w
s$b*d<:day
)

var=:ssdev % <:@#

volumes=:3 : 0

NB.*volumes v789-- scans volumes c-z and returns current drives.
NB.
NB. monad:  volumes iaDcnt
NB.
NB.   volumes 0   NB. scan all 23 volumes c-z
NB.   volumes 7   NB. scan volumes cdefghi

NB. require 'task' !(*)=. shell
dcnt=.(23&<.@|@<.)`(23"_)@.(0&=) y
drives=. ':' ,:~ ((i. dcnt )+ a. i. 'c'){a.
vs=. shell&.> <"1 'vol ' ,"1 |: drives
found=. <'Volume in drive '
vs=. (found +./@E.&> vs) # vs
alltrim&.> vs -.&.> <CR,LF,TAB
)

wd=:11!:0

weekday=:7 | 3 + todayno

weeknumber=:3 : 0

NB.*weeknumber v-- gives the year and weeknumber of date.
NB.
NB. A week  belongs to  a year iff 4 days of  the week  belong to
NB. that year. From J library (dates).
NB.
NB. Note: does not generalize to array arguments.
NB.
NB. verbatim: see
NB.
NB. http://www.phys.uu.nl/~vgent/calendar/isocalendar.htm
NB.
NB. monad: il =. weeknumber ilYYYYMMDD
NB.
NB.   weeknumber 2005 1 2
NB.   weeknumber 1953 7 2


yr=. {.y
sd=. 1 ((i.~weekday){]) ((<:yr),.12,.29+i.3),yr,.1,.1+i.4
wk=. >.7%~>: y -&todayno sd
if. wk >weeksinyear yr do.
  (>:yr),1
elseif. wk=0 do.
  (,weeksinyear)<:yr
elseif. do.
  yr,wk
end.
)

weeknumber2=:3 : 0

NB.*weeknumber2  v--  computes  year week number for  YYYY  MM DD
NB. dates.
NB.
NB. Generalization of the (weeknumber) verb in standard J library
NB. script  (dates).  This  verb  accepts  an  integer  table  of
NB. YYYYMMDD  dates.   (weeknumber2)  is  much  faster  than  the
NB. equivalent  (weeknumber"1) on  large  arguments  but consumes
NB. more memory.
NB.
NB. monad:  itYYYYWN =. weeknumber2 itYYYYMMDD | ilYYYYMMDD
NB.
NB.   weeknumber2 1953 7 2
NB.
NB.   dt=. yeardates 2010  NB. all 2010 dates
NB.   wk=. weeknumber2 dt
NB.
NB.   NB. weeks in year - weeks start on Monday
NB.   (<"0 ~.{:"1 wk) ,. ( {:"1 wk) </. dt

y=.  tabit y
yr=. {."1 y
sd=. ((<:yr) ,."0 2 ] 12,.29+i.3) ,. yr ,."0 2 ] 1,.1+i.4
sd=. ((weekday sd) (i."1) 1) {"_1 sd
wk=. >.7%~>: y -&todayno sd
wy=. weeksinyear yr
wn=. yr,.wk

NB. adjust at year boundaries
if. +./mask=. wk > wy  do.
  wn=. ((>:mask#yr),.1) (I. mask) } wn
elseif. +./mask=. wk=0 do.
  wn=. ((,.weeksinyear)<: mask#yr) (I. mask) } wn
end.

wn
)

weeksbetween=:4 : 0

NB.*weeksbetween  v--  list  of  week counts between  two  YYYYWC
NB. dates.
NB.
NB. dyad:  ilYYYYWC weeksbetween ilYYYYWC
NB.
NB.   a=. weeknumber 1953 7 2 [ b=. weeknumber 2009 9 2
NB.   b weeksbetween a

NB. order on year
 'x y'=. /:~  x,:y

if. (0{x) = 0{y  do. (1{y) - 1{x
else.
  ((weeksinyear 0{x) - 1{x),(weeksinyear (0{x) + >: }: i. 0{y - x),1{y
end.
)

weeksinyear=:52 + [: +./"1 [: [ 4 = [: weekday (2 2$1 1 12 31) ,"0 1/~ ]

wfl=:wfl_z_

winlcchars=:[: 9!:7 (a.{~16+i.11)"_ [ ]

winpathsep=:'\'&(('/' I.@:= ])})

showpass soput ".'nl_',SOLOCALE,'_ i.4' [ cocurrent 'base' NB.{*JOD*}
".soclear NB.{*JOD*}
cocurrent SO__JODobj NB.{*JOD*}


wrapwords=:4 : 0

NB.*wrapwords v-- wrap words into lines of length (x).
NB.
NB. This algorithm: due to Roger Hui. Wraps words (nonblank) runs
NB. into lines of length (x) without breaking words. Words cannot
NB. be longer  than (x).  Transitive closure  is used to  compute
NB. where appropriate newline (LF) characters replace blanks.
NB.
NB. dyad:  cl =. iaWidth wrapwords clWords
NB.
NB.   27 wrapwords 7770$'go ahead make my day and surprise me'

NB. remove extra blanks and CRLF
y=. reb y -. CRLF

e=. (' ' I.@:= y),#y
LF (e {~ <: tranclose2 e I. (x+2)+}:_1,e)} y
)

write=:1!:2 ]`<@.(32&>@(3!:0))

writenoun=:([: 3!:1 [) (1!:2 ]`<@.(32&>@(3!:0))) ]

writetd=:] (1!:2 ]`<@.(32&>@(3!:0)))~ [: 2&}.@:;@:((13{a.)&,&.>@<;.1@((10{a.)&,)@(((10{a.) I.@(e.&(13{a.))@]} ])@:(#~ -.@((13 10{a.)&E.@,)))) [: }.@(,@(1&(,"1)@(-.@(*./\."1@(=&' '@])))) # ,@((10{a.)&(,"1)@])) [: }."1 [: ;"1 (9{a.) ,&.> [

yeardates=:3 : 0

NB.*yeardates v-- returns all valid dates for n calendar years.
NB.
NB. The monad returns an integer table with YYYY MM DD rows.  The
NB. dyad returns dates as a list of YYYYMMDD integers.
NB.
NB. This algorithm  uses  a  series of outer-products  and  ravel
NB. reductions to form a cross  product rather  than  the  direct
NB. catalog verb ({).
NB.
NB. monad:  itYYYYMMDD =. yeardates ilYears
NB.
NB.   yeardates 2000
NB.
NB.   yeardates 2001 + i. 100  NB. all dates in 21st century
NB.
NB.
NB. dyad:  ilYYYYMMDD =. uu yeardates ilYears
NB.
NB.   0 yeardates 2001
NB.
NB.   yeardates~  1999 2000 2001   NB. useful idiom

NB. generate all possible dates in years
days =. ,/ (,y) ,"0 1/ ,/ (>: i. 12) ,"0/ >: i. 31

NB. remove invalid dates
days #~ valdate days
:
NB. convert to yyyy mm dd format
0 100 100 #. yeardates y
)

yyyymondd=:3 : 0

NB.*yyyymondd v-- today in (yyyymondd;hrmnss) format.
NB.
NB. Yet another date format verb. We can never have enough!
NB.
NB. monad:  (clDate ; clTime) =. yyyymondd uuIgnore

fmt=.'r<0>2.0'
months=. _3 [\ '   janfebmaraprmayjunjulaugsepoctnovdec'
'yy mn dd'=. 3{.now=. 6!:0''
date=. (":yy),(mn{months),,fmt (8!:2) dd
time=. }.;':' ,&.> fmt (8!:0) _3 {. now
date;time
)

showpass soput ".'nl_',SOLOCALE,'_ i.4' [ cocurrent 'base' NB.{*JOD*}
".soclear NB.{*JOD*}
cocurrent SO__JODobj NB.{*JOD*}
zz=:''
zz=:zz,'328 2$''BASE64'';''base 64 encoding alphabet'';''BOM'';''Byte Order Mark: '
zz=:zz,'UTF-8 EF,BB,BF (hex) or 239 187 191 (dec) '';''BesselJ'';''Bessel funct'
zz=:zz,'ions via Hypergeometric adverb'';''CLASSAUTHOR'';''author text inserted'
zz=:zz,' by (ngc) in group class headers - cannot have ''''/'''' character'';''CP'
zz=:zz,'IANNUAL'';''annual CPI consumer price index'';''CR'';''carriage return ch'
zz=:zz,'aracter'';''CRLF'';''carriage return line feed character pair'';''CUUR000'
zz=:zz,'0SA0'';''US consumer price index time series 1913 to 2008 - see long '
zz=:zz,'documentation'';''DROPBOX'';''main root of synch directory'';''IFACEWORDS'
zz=:zz,'htmthorn'';''interface words (IFACEWORDShtmthorn) group'';''IFACEWORDSs'
zz=:zz,'unmoon'';''interface words (IFACEWORDSsunmoon) group'';''LF'';''line feed'
zz=:zz,' character'';''MillerRabin'';''Miller Rabin probabalistic prime test'';'''
zz=:zz,'NAMEALPHA'';''valid characters in J names'';''NORISESET'';''indicates sun'
zz=:zz,' never rises or sets in (sunriseset0) and (sunriseset1) results'';''N'
zz=:zz,'ote'';''note placeholder - see long documentation'';''ROOTWORDShtmthorn'
zz=:zz,''';''root words (ROOTWORDShtmthorn) group      '';''ROOTWORDSsunmoon'';'''
zz=:zz,'root words (ROOTWORDSsunmoon) group      '';''TAB'';''tab character'';''T'
zz=:zz,'EMPFILE0'';''temporary file must point to extant directory'';''TeXPtCm'''
zz=:zz,';''TeX points per centimeter'';''TeXPtIn'';''TeX points per inch'';''TeXPt'
zz=:zz,'Mm'';''TeX points per millimeter'';''USBDRIVEVOLUME'';''USB drive volume '
zz=:zz,'label'';''afterlaststr'';''retains string (y) after last occurrence of '
zz=:zz,'(x)'';''afterstr'';''retains string after first occurrence of (x)'';''all'
zz=:zz,'omask'';''mask outer (leading and trailing) item runs in lists'';''allo'
zz=:zz,'trim'';''trim all outer items - '''' ''''&allotrim is same as alltrim'';''a'
zz=:zz,'lltrim'';''trims all leading and trailing blanks'';''allwhitetrim'';''tri'
zz=:zz,'ms all leading and trailing white space'';''antimode'';''finds the leas'
zz=:zz,'t frequently occurring item(s) in a list'';''append'';''appends a list '
zz=:zz,'of bytes to file'';''apply'';''applies the verb in string (x) to (y)'';'''
zz=:zz,'arccos'';''arc cosine'';''arccosh'';''hyperbolic arc cosine'';''arcsin'';''ar'
zz=:zz,'c sine'';''arcsinh'';''hyperbolic arc sine'';''arctan'';''arc tangent'';''arc'
zz=:zz,'tanh'';''hyperbolic arc tangent'';''assert'';''signal with optional messa'
zz=:zz,'ge'';''atags'';''attribute xml BEGIN and END tags'';''atomfrl'';''atom from'
zz=:zz,' list'';''attrvalue'';''extracts text of xml attribute'';''bcfd'';''binary '
zz=:zz,'character from decimal: bcfd 42'';''beforelaststr'';''retains string (y'
zz=:zz,') before last occurrence of (x)'';''beforestr'';''retains string before'
zz=:zz,' first occurrence of (x)'';''belongstrs'';''select sublists between non'
zz=:zz,'nested delimiters retaining delimiters'';''bernoulli'';''generate first'
zz=:zz,' N Bernoulli numbers'';''betweenidx'';''indexed sublists between nonnes'
zz=:zz,'ted delimiters'';''betweenidx2'';''indexed sublists between nonnested d'
zz=:zz,'elimiters'';''betweenstrs'';''select sublists between nonnested delimit'
zz=:zz,'ers discarding delimiters'';''betweenstrs2'';''select sublists between '
zz=:zz,'nonnested delimiters'';''bfd'';''binary from decimal: bfd 42'';''blkaft'';'
zz=:zz,'''appends necessary blanks to J tokens'';''bmi'';''body mass index (y) w'
zz=:zz,'eight in pounds (x) height in inches'';''boxopen'';''boxes open nouns'';'
zz=:zz,'''boxxopen'';''boxes nonempty open nouns'';''bye'';''immediately terminate'
zz=:zz,'s J session'';''calendar'';''calendar for year as 12 element list'';''cal'
zz=:zz,'moons'';''calendar dates of new and full moons'';''cartfrpolar'';''cartes'
zz=:zz,'ian coordinates (x, y, z) from polar coordinates (r, theta, phi)'';'''
zz=:zz,'cd'';''call dll'';''cder'';''dll error information'';''cderx'';''dll GetLastE'
zz=:zz,'rror information'';''cdf'';''free dlls'';''cfp'';''2D coordinate from polar'
zz=:zz,': cfp pfc 1 1'';''changenqt'';''change not quoted'';''changestr'';''replace'
zz=:zz,'s substrings - see long documentation'';''changetok'';''replaces J name'
zz=:zz,' tokens within a string'';''charsub'';''single character pair replaceme'
zz=:zz,'nts'';''citemize'';''atoms to lists, lists to tables, other ranks uncha'
zz=:zz,'nged'';''cos'';''cosine radians'';''cosd'';''cosine degrees'';''cosh'';''hyperb'
zz=:zz,'olic cosine'';''crc'';''cyclic redundancy check: crc ''''test string'''''';'''
zz=:zz,'ctl'';''character table to newline delimited list'';''cutnestidx'';''cut '
zz=:zz,'list into nested runs and other'';''cutstridx'';''cut list into (x) and'
zz=:zz,' other'';''datefrint'';''YYYYMMDD to YYYY MM DD lists'';''dayage'';''age in'
zz=:zz,' days'';''dayofweek'';''weekday from YYYY MM DD dates - see long docume'
zz=:zz,'ntation'';''dblquote'';''enclose all character lists in blcl in " quote'
zz=:zz,'s'';''ddcheck'';''REFERENCE - ODBC interface verb - require ''''dd'''''';''dd'
zz=:zz,'cnm'';''REFERENCE - ODBC interface verb - require ''''dd'''''';''ddcol'';''RE'
zz=:zz,'FERENCE - ODBC interface verb - require ''''dd'''''';''ddcon'';''REFERENCE '
zz=:zz,'- ODBC interface verb - require ''''dd'''''';''dddis'';''REFERENCE - ODBC i'
zz=:zz,'nterface verb - require ''''dd'''''';''dderr'';''REFERENCE - ODBC interface'
zz=:zz,' verb - require ''''dd'''''';''ddfch'';''REFERENCE - ODBC interface verb - '
zz=:zz,'require ''''dd'''''';''ddfet'';''REFERENCE - ODBC interface verb - require '
zz=:zz,'''''dd'''''';''ddfrdms'';''decimal degrees from degrees, minutes, seconds -'
zz=:zz,' inverse (dmsfrdd)'';''ddsel'';''REFERENCE - ODBC interface verb - requ'
zz=:zz,'ire ''''dd'''''';''ddsql'';''REFERENCE - ODBC interface verb - require ''''dd'
zz=:zz,''''''';''ddsrc'';''REFERENCE - ODBC interface verb - require ''''dd'''''';''ddt'
zz=:zz,'blx'';''REFERENCE - ODBC interface verb - require ''''dd'''''';''debom'';''re'
zz=:zz,'move any leading BOM: Byte Order Mark UTF-8 EF,BB,BF (hex)'';''decomm'
zz=:zz,''';''removes comments from j words'';''dev'';''deviation about mean'';''dew'
zz=:zz,'hitejscript'';''removes all redundant blanks from J scripts'';''dfb'';''d'
zz=:zz,'ecimal from binary: dfb 1 0 0 1 1'';''dfbc'';''decimal from character b'
zz=:zz,'inary: dfbc ''''10011'''''';''dfh'';''decimal from hex'';''dfr'';''degrees from'
zz=:zz,' radian'';''discreterandom'';''random numbers from a discrete distribut'
zz=:zz,'ion'';''dmsfrdd'';''degrees, minutes, seconds from decimal degrees - in'
zz=:zz,'verse (ddfrdms)'';''dollars1913'';''constant 1913 dollars from 2007 CPI'
zz=:zz,' index - see long documentation'';''dollars1970'';''constant 1970 dolla'
zz=:zz,'rs from 2007 CPI index'';''dstat'';''descriptive statistics'';''dtslash'';'
zz=:zz,'''drops trailing slash \ character'';''dupmask'';''mask of duplicate ite'
zz=:zz,'ms'';''each'';''adverb alias &.>'';''earthdist'';''distance in km between n'
zz=:zz,' points on the Earth''''s surface'';''easter'';''calculates the date of E'
zz=:zz,'aster using the church algorithm'';''eletags'';''encloses xml text (y) '
zz=:zz,'in xml element tag'';''empty'';''null non-displaying (covert) result'';'''
zz=:zz,'emptyshow'';''display noun then return 0 0$'''''''' empty table'';''enquote'
zz=:zz,''';''enclose in " quotes - surrounding blanks removed'';''epsfrps'';''con'
zz=:zz,'vert postscript (ps) to encapsulated postscript (eps)'';''erase'';''era'
zz=:zz,'se words'';''error'';''abort with error message'';''factors'';''factors of '
zz=:zz,'positive integers'';''fappend'';''append to file (UTF8 file names) retu'
zz=:zz,'rns #bytes if successful _1 otherwise'';''fboxname'';''boxes UTF8 names'
zz=:zz,''';''fc'';''float/character conversion'';''ferase'';''erase files - cl | bl'
zz=:zz,'cl of path file names'';''fexist'';''1 if file exists 0 otherwise'';''fgr'
zz=:zz,''';''find group root words'';''firstone'';''0''''s all but the first 1 in r'
zz=:zz,'uns of 1''''s'';''firstones'';''0''''s all but first 1 in runs of 1''''s - li'
zz=:zz,'ke (firstone) but differs for nulls'';''firstones2'';''optimized (first'
zz=:zz,'ones) - fastest firstone''''s - differs with (firstones) on nulls'';''f'
zz=:zz,'mtswex'';''format short comments for inclusion in header comments'';''f'
zz=:zz,'ob'';''fetch single noun value from (nob) package: p nob ''''nounname'''''
zz=:zz,''';''freq'';''frequency distribution'';''freqdist'';''frequency distributio'
zz=:zz,'n of numeric items'';''freqlist'';''frequency distribution of boxed lis'
zz=:zz,'t items'';''fromascii85'';''decode ASCII85 representation'';''frombase64'''
zz=:zz,';''from base 64 representation - inverse of tobase64'';''fromjulian'';'''
zz=:zz,'converts Julian day numbers to dates, converse (tojulian)'';''fsize'';'
zz=:zz,'''size of file in bytes'';''fuserows'';''opens and catenates boxed lists'
zz=:zz,' on the last axis'';''fwrite'';''write to file (UTF8 file names) return'
zz=:zz,'s #bytes if successful _1 otherwise'';''geomean'';''geometric mean of a'
zz=:zz,' list'';''getele'';''get nonnested pure xml elements with enclosing beg'
zz=:zz,'in end tags'';''geteleattr'';''get nonnested attribute xml elements wit'
zz=:zz,'h enclosing begin end tags'';''geteleattrtext'';''get element text foll'
zz=:zz,'owing attributes'';''geteletext'';''get pure element text'';''geteletexti'
zz=:zz,'dx'';''index and get pure element text'';''gspn'';''get short path file n'
zz=:zz,'ame'';''harmean'';''harmonic mean'';''hfd'';''hex from decimal'';''histogram'''
zz=:zz,';''computes histograms uses right open intervals [xi,xi+1) - see lon'
zz=:zz,'g document'';''histogram2'';''variation on (histogram) uses left open i'
zz=:zz,'ntervals (xi, xi+1]'';''host'';''returns result of linux/unix commands '
zz=:zz,'as text string'';''huo'';''halve until odd'';''ic'';''integer/character con'
zz=:zz,'version'';''ifc'';''format interface comment text'';''intersect'';''unique '
zz=:zz,'item intersection'';''intfrdate'';''YYYY MM DD lists to YYYYMMDD intege'
zz=:zz,'rs'';''isatom'';''1 if atom 0 otherwise'';''isboxed'';''tests for boxed dat'
zz=:zz,'a'';''ischar'';''tests for character data'';''iscomplex'';''1 if argument i'
zz=:zz,'s complex 0 otherwise'';''isint'';''tests for nonextended integers - bo'
zz=:zz,'oleans are considered integers'';''isnan'';''1 if NAN (not a number) 0 '
zz=:zz,'otherwise'';''isopen'';''tests for open data'';''isotimestamp'';''format ti'
zz=:zz,'me as: YYYY-MM-DD HR:MN:SC'';''isunicode'';''1 if data is unicode 0 oth'
zz=:zz,'erwise'';''isunique'';''1 if items are unique 0 otherwise'';''jcr'';''chara'
zz=:zz,'cter table representation of j words, call:  jcr ''''verb'''''';''jpathse'
zz=:zz,'p'';''standarizes J path delimiter to unix/linux forward slash'';''julf'
zz=:zz,'rcal'';''Julian dates from calendar dates'';''justdrv'';''extracts the dr'
zz=:zz,'ive from qualified file names'';''justdrvpath'';''extract drive and pat'
zz=:zz,'h from qualified file names'';''justext'';''extracts the extension from'
zz=:zz,' qualified file names'';''justfile'';''file name from fully qualified f'
zz=:zz,'ile names'';''justfileext'';''file name and extension from fully qualif'
zz=:zz,'ied file'';''justpath'';''extracts only the path from qualified file na'
zz=:zz,'mes'';''jvn'';''J version number'';''jvr'';''named character list represent'
zz=:zz,'ation of J words'';''kurtosis'';''kurtosis'';''lastone'';''0''''s all but the'
zz=:zz,' last 1 in runs of 1''''s'';''lastones'';''0''''s all but last 1 in runs of'
zz=:zz,' 1''''s - fastest lastones''''s verb'';''leap'';''bit list with 1''''s markin'
zz=:zz,'g leap years'';''lfp'';''lengths from partition: see pfl'';''ljerr'';''last'
zz=:zz,' J error'';''ljust'';''left justify table'';''lsfit'';''coefficients of pol'
zz=:zz,'ynomical fitting data points'';''ltrim'';''trim left (leading) blanks'';'
zz=:zz,'''lut'';''load local utilities locale and make words base available'';'''
zz=:zz,'md5fromstring'';''computer md5 hash from character list'';''mean'';''mean'
zz=:zz,' value of a list'';''median'';''median value of a list'';''mema'';''memory '
zz=:zz,'allocate'';''memf'';''memory free'';''memr'';''memory read'';''memw'';''memory '
zz=:zz,'write'';''midpt'';''mid-point'';''mode2'';''finds the most frequently occur'
zz=:zz,'ring item(s) in a list'';''monthsbetween'';''list of month counts betwe'
zz=:zz,'en two YYYYMMDD dates'';''moons'';''times of new and full moons for n c'
zz=:zz,'alendar years'';''movgmean'';''moving geometric mean'';''movmean'';''moving'
zz=:zz,' mean'';''nc'';''J name class'';''nextversion'';''next version number given'
zz=:zz,' current (y) version - see long documentation'';''ngc'';''new group cla'
zz=:zz,'ss template'';''nob'';''transposed noun (pack) allows: (0{p)=. 1{p=. no'
zz=:zz,'b nl 0'';''onelength'';''lengths of contigous runs of 1''''s in bit lists'
zz=:zz,''';''pack'';''packs locale nouns into boxed name value table: pack_loc_'
zz=:zz,' nl_loc_ 0'';''parity'';''1 if boolean list has an even number of 1''''s '
zz=:zz,'0 otherwise'';''parsecsv'';''parses comma delimited files'';''parsevolume'
zz=:zz,'s'';''splits (volumes) result into (drive,label,serial) table'';''patpa'
zz=:zz,'rtstr'';''split list into sublists of pattern and non-pattern'';''pfc'';'
zz=:zz,'''2D polar from coordinate: pfc 1 1'';''pfl'';''partition from lengths: '
zz=:zz,'see lfp'';''pi'';''pi - 1p1'';''pick'';''select and disclose array items'';'''
zz=:zz,'polyprod'';''polynomial product - see long documentation'';''portchars'''
zz=:zz,';''portable box drawing characters'';''postit'';''promotes only atoms an'
zz=:zz,'d lists to column tables'';''pwf'';''write put dictionary words as scri'
zz=:zz,'pt files'';''q1'';''first quartile'';''q3'';''third quartile'';''quote'';''quot'
zz=:zz,'es character lists for execution'';''randunif'';''uniform random number'
zz=:zz,'s - see long documention'';''read'';''reads a file as a list of bytes'';'
zz=:zz,'''readcsv'';''read comma separated table files - see long document'';''r'
zz=:zz,'eadcsvs'';''read and parse comma separated table files as symbols - s'
zz=:zz,'ee long document'';''readnoun'';''reads a J binary noun file'';''readtd'';'
zz=:zz,'''read and parse TAB delimited table files'';''readtd2'';''read TAB deli'
zz=:zz,'mited table files - faster than (readtd) - see long document'';''read'
zz=:zz,'td2s'';''read TAB delimited table files as symbols - see long documen'
zz=:zz,'t'';''readtdbom'';''read TAB delimited table files ignoring any leading'
zz=:zz,' BOM'';''readtds'';''read and parse TAB delimited table files as symbol'
zz=:zz,'s - see long document'';''readvtd'';''read variable length tab delimite'
zz=:zz,'d files'';''realpart'';''real part of complex numbers'';''reb'';''removes r'
zz=:zz,'edundant blanks - leading, trailing multiple'';''rebc'';''removes multi'
zz=:zz,'ple blanks (char only)'';''rebrow'';''deletes all blank rows from chara'
zz=:zz,'cter table'';''rebtbcol'';''remove trailing blank columns'';''rebu'';''gene'
zz=:zz,'ralization of (rebc) (x) argument is any atom'';''refirstone'';''bits r'
zz=:zz,'etaining first element of contigous 1 runs and surrounding 0''''s'';''r'
zz=:zz,'emdotargs'';''replaces dotted J arguments in scripts with undotted eq'
zz=:zz,'uivalents'';''requoted'';''replaces atoms in "quoted" lists'';''rfd'';''rad'
zz=:zz,'ians from degrees'';''rflip'';''transposes J arrays to R'';''rjust'';''righ'
zz=:zz,'t justify table'';''round'';''round y to nearest x (e.g. 1000 round 123'
zz=:zz,'45)'';''rtrim'';''trim right (trailing) blanks'';''runlengths'';''lengths o'
zz=:zz,'f item runs in lists'';''sdcheck'';''REFERENCE - socket interface verb '
zz=:zz,'- require ''''socket'''''';''sdclose'';''REFERENCE - socket interface verb '
zz=:zz,'- require ''''socket'''''';''sdconnect'';''REFERENCE - socket interface ver'
zz=:zz,'b - require ''''socket'''''';''sdgethostbyname'';''REFERENCE - socket inter'
zz=:zz,'face verb - require ''''socket'''''';''sdrecv'';''REFERENCE - socket interf'
zz=:zz,'ace verb - require ''''socket'''''';''sdsend'';''REFERENCE - socket interfa'
zz=:zz,'ce verb - require ''''socket'''''';''sdsocket'';''REFERENCE - socket interf'
zz=:zz,'ace verb - require ''''socket'''''';''shortlongnames'';''long and short fil'
zz=:zz,'e names from directory pattern'';''showpass'';''show and then pass noun'
zz=:zz,''';''sin'';''sine radians'';''sind'';''sin degrees'';''sinh'';''hyperbolic sine'
zz=:zz,''';''skewness'';''skewness'';''smoutput'';''session manager output'';''sob'';'''
zz=:zz,'select (nob) package subset: p sob ;:''''just us ehh'''''';''splitstrs'';'''
zz=:zz,'splits character lists into sublists that start with (s) and end wi'
zz=:zz,'th (e)'';''ssdev'';''sum of square deviations (2)'';''sslash'';''prefix lea'
zz=:zz,'ding \ character if necessary'';''stddev'';''standard deviation (altern'
zz=:zz,'ate spelling)'';''sunriseset0'';''computes sun rise and set times - see'
zz=:zz,' group documentation'';''sunriseset1'';''computes sun rise and set time'
zz=:zz,'s - see group documentation'';''symreadtd'';''read TAB delimited table '
zz=:zz,'files as symbols - see (readtd2)'';''tabit'';''promotes only atoms and '
zz=:zz,'lists to tables'';''tags'';''xml BEGIN and END tags'';''tan'';''tan radians'
zz=:zz,''';''tand'';''tan degrees'';''tanh'';''hyperbolic tangent'';''tap'';''table of '
zz=:zz,'all permutations'';''tapl'';''table of all permutations of list items'';'
zz=:zz,'''textform2'';''wraps and justifies character table (y)'';''timestamp'';'''
zz=:zz,'formats timestamp as dd mmm yyyy hr:mn:sc'';''tlf'';''appends trailing '
zz=:zz,'line feed character if necessary'';''tms'';''times (seconds) and space '
zz=:zz,'(bytes) to execute sentence'';''toCRLF'';''converts character strings t'
zz=:zz,'o CRLF delimiter'';''toHOST'';''converts character strings to host deli'
zz=:zz,'miter'';''toJ'';''converts character strings to J delimiter LF'';''toasci'
zz=:zz,'i85'';''to ascii85 representation'';''tobase64'';''to base 64 representat'
zz=:zz,'ion'';''todate'';''convert (todayno) integers to dates'';''today'';''return'
zz=:zz,'s todays date'';''todayno'';''convert dates to day numbers, converse (t'
zz=:zz,'odate)'';''tojulian'';''convert dates to Julian day numbers (see long d'
zz=:zz,'ocumentation)'';''tolower'';''convert to lower case'';''toupper'';''convert'
zz=:zz,' to upper case'';''tranclose'';''computes a transitive closure'';''trancl'
zz=:zz,'ose2'';''transitive closure'';''treesum'';''sums values at tree nodes'';''t'
zz=:zz,'ruth'';''nth order truth table'';''ts'';''times (seconds) and space (byte'
zz=:zz,'s) to execute sentence'';''tsfrunixsecs'';''(yyyy mm dd hh nn ss) times'
zz=:zz,'tamp from unix seconds'';''tslash'';''appends trailing \ character if n'
zz=:zz,'ecessary'';''tslash2'';''appends trailing / iff last character is not \'
zz=:zz,' or /'';''tsrep'';''timestamp representation as a single number'';''tstam'
zz=:zz,'p'';''ALIAS - replace with (timestamp)'';''ucpfrncrd'';''unicode cope poi'
zz=:zz,'nts from NCR decimal character encoding - see long documentation'';'''
zz=:zz,'ucpfrutf8'';''unicode code points from utf8 character strings'';''unixs'
zz=:zz,'ecsfrts'';''unix seconds from (yyyy mm dd hh nn ss) timestamp'';''unpac'
zz=:zz,'k'';''inverse of pack'';''usbdrive'';''first mounted USB drive'';''utf8'';''c'
zz=:zz,'haracter list to UTF-8'';''utf8frncrd'';''utf8 character strings from u'
zz=:zz,'nicode NCR decimal strings'';''valdate'';''validates lists or tables of'
zz=:zz,' YYYY MM DD Gregorian calendar dates'';''var'';''var'';''volumes'';''scans '
zz=:zz,'volumes c-z and returns current drives'';''wd'';''windows driver'';''week'
zz=:zz,'day'';''day of week see long document:  weekday 1953 7 2'';''weeknumber'
zz=:zz,''';''gives the year and weeknumber of date'';''weeknumber2'';''computes y'
zz=:zz,'ear week number for YYYY MM DD dates'';''weeksbetween'';''list of week '
zz=:zz,'counts between two YYYYWC dates'';''weeksinyear'';''gives number of wee'
zz=:zz,'ks in year - see long document'';''wfl'';''REFERENCE - word formation o'
zz=:zz,'n lines - to use load the group (wordformation)'';''winlcchars'';''wind'
zz=:zz,'ows lucida console box drawing characters'';''winpathsep'';''standarize'
zz=:zz,'s J path delimiter to windows back slash'';''wrapwords'';''wrap words i'
zz=:zz,'nto lines of length (x)'';''write'';''writes a list of bytes to file'';'''
zz=:zz,'writenoun'';''writes a J noun file'';''writetd'';''format and write TAB d'
zz=:zz,'elimited table files'';''yeardates'';''returns all valid dates for n ca'
zz=:zz,'lendar years'';''yyyymondd'';''today in (yyyymondd;hrmnss) format''     '
zz=:16678{.zz
showpass 0 8 put ". ".'zz_',SOLOCALE,'_' [ cocurrent 'base' NB.{*JOD*}
".soclear NB.{*JOD*}

cocurrent SO__JODobj NB.{*JOD*}
zz=:''
zz=:zz,'3 2$<;.(_1) 124 67 80 73 65 78 78 85 65 76 124 97 110 110 117 97 10'
zz=:zz,'8 32 67 80 73 32 99 111 110 115 117 109 101 114 32 112 114 105 99 1'
zz=:zz,'01 32 105 110 100 101 120 124 67 85 85 82 48 48 48 48 83 65 48 124 '
zz=:zz,'42 67 85 85 82 48 48 48 48 83 65 48 32 110 45 45 32 32 67 111 110 1'
zz=:zz,'15 117 109 101 114 32 80 114 105 99 101 32 73 110 100 101 120 32 11'
zz=:zz,'6 105 109 101 32 115 101 114 105 101 115 32 100 97 116 97 46 13 10 '
zz=:zz,'13 10 84 104 105 115 32 67 80 73 32 115 101 114 105 101 115 32 119 '
zz=:zz,'97 115 32 101 120 116 114 97 99 116 101 100 32 102 114 111 109 32 1'
zz=:zz,'16 104 101 32 85 83 32 68 101 112 97 114 116 109 101 110 116 32 111'
zz=:zz,' 102 32 76 97 98 111 114 32 119 101 98 32 115 105 116 101 46 13 10 '
zz=:zz,'13 10 104 116 116 112 58 47 47 119 119 119 46 98 108 115 46 103 111'
zz=:zz,' 118 47 99 112 105 47 13 10 13 10 84 104 101 32 115 101 114 105 101'
zz=:zz,' 115 32 104 101 97 100 101 114 32 105 115 58 32 13 10 13 10 83 101 '
zz=:zz,'114 105 101 115 32 73 100 58 32 32 32 32 67 85 85 82 48 48 48 48 83'
zz=:zz,' 65 48 13 10 13 10 78 111 116 32 83 101 97 115 111 110 97 108 108 1'
zz=:zz,'21 32 65 100 106 117 115 116 101 100 13 10 65 114 101 97 58 32 32 3'
zz=:zz,'2 32 32 32 32 32 32 85 46 83 46 32 99 105 116 121 32 97 118 101 114'
zz=:zz,' 97 103 101 13 10 73 116 101 109 58 32 32 32 32 32 32 32 32 32 65 1'
zz=:zz,'08 108 32 105 116 101 109 115 13 10 66 97 115 101 32 80 101 114 105'
zz=:zz,' 111 100 58 32 32 49 57 56 50 45 56 52 61 49 48 48 13 10 13 10 84 1'
zz=:zz,'04 101 32 100 97 116 97 32 99 97 110 32 117 115 101 100 32 116 111 '
zz=:zz,'32 97 112 112 114 111 120 105 109 97 116 101 32 99 111 110 115 116 '
zz=:zz,'97 110 116 32 85 83 32 100 111 108 108 97 114 115 32 111 118 101 11'
zz=:zz,'4 32 116 104 101 32 103 105 118 101 110 32 116 105 109 101 32 112 1'
zz=:zz,'01 114 105 111 100 46 124 78 111 116 101 124 42 78 111 116 101 32 1'
zz=:zz,'18 45 45 32 110 111 116 101 32 112 108 97 99 101 104 111 108 100 10'
zz=:zz,'1 114 10 10 32 67 108 101 118 101 114 32 112 114 111 109 112 116 32'
zz=:zz,' 117 116 105 108 105 116 121 32 32 116 104 97 116 32 34 115 119 97 '
zz=:zz,'108 108 111 119 115 34 32 116 104 101 32 40 121 41 32 32 97 114 103'
zz=:zz,' 117 109 101 110 116 46 32 67 97 110 10 32 98 101 32 32 117 115 101'
zz=:zz,' 100 32 116 111 32 100 105 115 112 108 97 121 44 32 40 98 117 116 3'
zz=:zz,'2 110 111 116 32 32 101 120 101 99 117 116 101 41 44 32 118 101 114'
zz=:zz,' 98 97 116 105 109 32 117 110 99 111 109 109 101 110 116 101 100 10'
zz=:zz,' 32 116 101 120 116 32 105 110 32 74 32 115 99 114 105 112 116 115 '
zz=:zz,'46 10 10 109 111 110 97 100 58 32 32 122 116 32 61 46 32 78 111 116'
zz=:zz,' 101 32 117 117 73 103 110 111 114 101 10 10 32 32 78 111 116 101 3'
zz=:zz,'2 39 77 65 82 75 69 82 32 84 69 88 84 39 10 50 32 42 32 50 10 105 4'
zz=:zz,'6 32 50 32 51 10 41 10 10 32 32 78 111 116 101 32 105 46 32 50 32 5'
zz=:zz,'1 10 39 73 32 105 103 110 111 114 101 32 97 108 108 32 116 101 120 '
zz=:zz,'116 39 10 50 32 43 32 51 10 41 10 10 10{a.                         '
zz=:2655{.zz
showpass 0 9 put ". ".'zz_',SOLOCALE,'_' [ cocurrent 'base' NB.{*JOD*}
".soclear NB.{*JOD*}

cocurrent SO__JODobj NB.{*JOD*}
zz=:''
zz=:zz,'4 2$''bmi'';(42 98 109 105 32 118 45 45 32 98 111 100 121 32 109 97 1'
zz=:zz,'15 115 32 105 110 100 101 120 46 32 84 104 101 32 98 111 100 121 32'
zz=:zz,' 109 97 115 115 32 105 110 100 101 120 32 105 115 32 97 32 109 101 '
zz=:zz,'97 115 117 114 101 32 111 102 10 104 111 119 32 102 97 116 32 121 1'
zz=:zz,'11 117 32 97 114 101 46 32 40 121 41 32 105 115 32 121 111 117 114 '
zz=:zz,'32 119 101 105 103 104 116 32 105 110 32 112 111 117 110 100 115 32'
zz=:zz,' 97 110 100 32 40 120 41 32 105 115 32 121 111 117 114 10 104 101 1'
zz=:zz,'05 103 104 116 32 105 110 32 32 105 110 99 104 101 115 46 32 65 32 '
zz=:zz,'40 98 109 105 41 32 98 101 116 119 101 101 110 32 50 53 32 97 110 1'
zz=:zz,'00 32 50 57 46 57 32 109 101 97 110 115 32 121 111 117 32 32 97 114'
zz=:zz,' 101 10 111 118 101 114 119 101 105 103 104 116 46 32 65 32 40 98 1'
zz=:zz,'09 105 41 32 103 114 101 97 116 101 114 32 116 104 97 110 32 51 48 '
zz=:zz,'32 105 115 32 111 98 101 115 101 46 10 10 100 121 97 100 58 32 102 '
zz=:zz,'97 124 102 108 32 98 109 105 32 102 97 124 102 108 10 10 32 32 78 6'
zz=:zz,'6 46 32 109 121 32 98 109 105 39 115 32 102 111 114 32 118 97 114 1'
zz=:zz,'05 111 117 115 32 119 101 105 103 104 116 115 10 32 32 55 51 32 98 '
zz=:zz,'109 105 32 49 57 48 32 49 57 53 32 50 48 48 32 50 48 53 32 50 49 48'
zz=:zz,' 32 50 49 53 32 50 50 48{a.);''changestr'';(42 99 104 97 110 103 101 '
zz=:zz,'115 116 114 32 118 45 45 32 114 101 112 108 97 99 101 115 32 115 11'
zz=:zz,'7 98 115 116 114 105 110 103 115 32 119 105 116 104 105 110 32 97 3'
zz=:zz,'2 115 116 114 105 110 103 46 10 10 84 104 105 115 32 97 108 103 111'
zz=:zz,' 114 105 116 104 109 32 119 97 115 32 97 100 97 112 116 101 100 32 '
zz=:zz,'102 114 111 109 32 97 110 32 65 80 76 32 97 108 103 111 114 105 116'
zz=:zz,' 104 109 46 32 73 116 32 114 101 113 117 105 114 101 115 10 104 105'
zz=:zz,' 103 104 32 115 112 101 101 100 32 98 111 111 108 101 97 110 32 98 '
zz=:zz,'105 116 32 32 109 97 110 105 112 117 108 97 116 105 111 110 32 97 1'
zz=:zz,'10 100 32 105 115 32 110 111 116 32 32 97 115 32 101 102 102 101 99'
zz=:zz,' 116 105 118 101 10 105 110 32 99 117 114 114 101 110 116 32 32 74 '
zz=:zz,'32 115 121 115 116 101 109 115 32 97 115 32 105 116 32 32 105 115 3'
zz=:zz,'2 105 110 32 115 111 109 101 32 32 65 80 76 32 115 121 115 116 101 '
zz=:zz,'109 115 46 32 68 101 115 112 105 116 101 10 74 39 115 32 110 111 11'
zz=:zz,'0 45 111 112 116 105 109 97 108 32 98 111 111 108 101 97 110 115 32'
zz=:zz,' 116 104 105 115 32 118 101 114 98 32 105 115 32 115 116 105 108 10'
zz=:zz,'8 32 102 97 115 116 32 101 110 111 117 103 104 32 116 111 32 98 101'
zz=:zz,' 10 102 114 117 105 116 102 117 108 108 121 32 97 112 112 108 105 1'
zz=:zz,'01 100 46 32 32 79 110 32 32 109 121 32 32 52 48 48 77 72 90 32 78 '
zz=:zz,'84 32 32 109 97 99 104 105 110 101 32 32 121 111 117 32 99 97 110 3'
zz=:zz,'2 109 97 107 101 10 50 48 44 48 48 48 32 108 101 110 103 116 104 32'
zz=:zz,' 105 110 99 114 101 97 115 105 110 103 32 114 101 112 108 97 99 101'
zz=:zz,' 109 101 110 116 115 44 32 40 116 104 101 32 119 111 114 115 116 32'
zz=:zz,' 99 97 115 101 41 44 32 105 110 32 97 10 49 32 32 109 101 103 97 98'
zz=:zz,' 121 116 101 32 32 115 116 114 105 110 103 32 32 105 110 32 97 112 '
zz=:zz,'112 114 111 120 105 109 97 116 101 108 121 32 32 111 110 101 32 32 '
zz=:zz,'115 101 99 111 110 100 46 32 32 70 111 114 32 32 49 48 48 10 107 10'
zz=:zz,'5 108 111 98 121 116 101 32 32 115 116 114 105 110 103 115 32 116 1'
zz=:zz,'21 112 105 99 97 108 32 111 112 101 114 97 116 105 111 110 115 32 9'
zz=:zz,'9 111 109 112 108 101 116 101 32 105 115 32 108 101 115 115 32 116 '
zz=:zz,'104 97 110 32 32 97 10 116 101 110 116 104 32 111 102 32 115 101 99'
zz=:zz,' 111 110 100 46 10 10 72 105 103 104 32 115 112 101 101 100 32 115 '
zz=:zz,'117 98 115 116 114 105 110 103 32 114 101 112 108 97 99 101 109 101'
zz=:zz,' 110 116 32 105 115 32 100 105 102 102 105 99 117 108 116 32 116 11'
zz=:zz,'1 32 97 99 104 105 101 118 101 32 105 110 32 74 10 97 110 100 32 65'
zz=:zz,' 80 76 32 101 110 118 105 114 111 110 109 101 110 116 115 46 32 84 '
zz=:zz,'104 105 115 32 118 101 114 98 32 119 111 117 108 100 32 98 101 32 9'
zz=:zz,'7 32 103 111 111 100 32 99 97 110 100 105 100 97 116 101 32 102 111'
zz=:zz,' 114 10 97 110 32 101 120 116 101 114 110 97 108 32 99 111 109 112 '
zz=:zz,'105 108 101 100 32 114 111 117 116 105 110 101 46 10 10 100 121 97 '
zz=:zz,'100 58 32 32 99 108 67 104 97 110 103 101 100 32 61 46 32 99 108 84'
zz=:zz,' 97 114 103 101 116 115 32 99 104 97 110 103 101 115 116 114 32 99 '
zz=:zz,'108 83 116 114 10 10 32 32 39 47 99 104 97 110 103 101 47 98 101 99'
zz=:zz,' 111 109 101 115 39 32 99 104 97 110 103 101 115 116 114 32 39 99 1'
zz=:zz,'04 97 110 103 101 32 109 101 39 10 10 32 32 39 47 100 101 108 101 1'
zz=:zz,'16 101 39 32 99 104 97 110 103 101 115 116 114 32 39 100 101 108 10'
zz=:zz,'1 116 101 32 109 101 39 32 32 32 78 66 46 32 110 117 108 108 32 114'
zz=:zz,' 101 112 108 97 99 101 109 101 110 116 32 100 101 108 101 116 101 1'
zz=:zz,'15 10 10 32 32 78 66 46 32 102 105 114 115 116 32 99 104 97 114 97 '
zz=:zz,'99 116 101 114 32 105 115 32 100 101 108 105 109 105 116 101 114 10'
zz=:zz,' 10 32 32 39 46 114 101 109 111 118 101 46 46 112 117 114 103 101 4'
zz=:zz,'6 46 119 105 112 101 39 32 99 104 97 110 103 101 115 116 114 32 39 '
zz=:zz,'114 101 109 111 118 101 112 117 114 103 101 119 105 112 101 39 10 1'
zz=:zz,'0 32 32 39 47 39 32 99 104 97 110 103 101 115 116 114 32 39 110 111'
zz=:zz,' 116 104 105 110 103 32 104 97 112 112 101 110 115 39 10 10 32 32 3'
zz=:zz,'9 39 32 99 104 97 110 103 101 115 116 114 32 39 110 111 116 104 105'
zz=:zz,' 110 103 32 104 97 112 112 101 110 115 39 10 10 32 32 39 47 110 111'
zz=:zz,' 116 104 105 110 103 47 104 97 112 112 101 110 115 39 32 99 104 97 '
zz=:zz,'110 103 101 115 116 114 32 39 110 111 32 109 97 116 99 104 101 115 '
zz=:zz,'32 116 111 32 99 104 97 110 103 101 39 10 10 32 32 78 66 46 32 109 '
zz=:zz,'117 108 116 105 112 108 101 32 114 101 112 108 97 99 101 109 101 11'
zz=:zz,'0 116 115 32 97 114 101 32 109 97 100 101 32 105 110 32 108 101 102'
zz=:zz,' 116 32 116 111 32 114 105 103 104 116 32 111 114 100 101 114 10 10'
zz=:zz,' 32 32 116 32 61 46 32 39 111 110 99 101 32 97 108 108 32 116 104 1'
zz=:zz,'05 110 103 115 32 119 101 114 101 32 109 97 110 121 39 10 10 32 32 '
zz=:zz,'39 47 109 97 110 121 47 99 104 97 110 103 101 115 47 97 108 108 47 '
zz=:zz,'97 116 47 111 110 99 101 47 101 104 104 39 32 99 104 97 110 103 101'
zz=:zz,' 115 116 114 32 116 10 10 32 32 78 66 46 32 101 118 101 110 32 110 '
zz=:zz,'117 108 108 32 115 117 98 116 114 105 110 103 32 114 101 112 108 97'
zz=:zz,' 99 101 109 101 110 116 115 32 97 114 101 32 97 108 108 111 119 101'
zz=:zz,' 100 10 10 32 32 39 47 47 88 88 39 32 99 104 97 110 103 101 115 116'
zz=:zz,' 114 32 39 105 110 115 101 114 116 32 98 105 103 32 120 32 99 104 9'
zz=:zz,'7 114 115 32 97 114 111 117 110 100 32 117 115 39 10 10 32 32 78 66'
zz=:zz,' 46 32 102 105 110 97 108 108 121 32 97 108 108 32 116 104 105 115 '
zz=:zz,'32 97 112 112 108 105 101 115 32 105 110 32 97 32 99 108 101 97 110'
zz=:zz,' 32 101 108 101 103 97 110 116 10 32 32 78 66 46 32 119 97 121 32 1'
zz=:zz,'16 111 32 85 78 73 67 79 68 69 32 115 116 114 105 110 103 115 32 97'
zz=:zz,' 115 32 119 101 108 108 10 10 32 32 117 99 104 97 114 115 61 46 32 '
zz=:zz,'117 58 32 49 48 51 51 32 43 32 105 46 32 53 48 48 32 32 78 66 46 32'
zz=:zz,' 117 110 105 99 111 100 101 32 115 116 114 105 110 103 10 32 32 100'
zz=:zz,' 97 116 97 116 121 112 101 32 117 99 104 97 114 115 32 32 32 32 32 '
zz=:zz,'32 32 32 32 32 32 32 78 66 46 32 40 100 97 116 97 116 121 112 101 4'
zz=:zz,'1 32 102 114 111 109 32 106 32 112 114 111 102 105 108 101 10 10 32'
zz=:zz,' 32 117 115 117 98 48 61 46 32 40 49 48 48 43 105 46 49 49 41 123 1'
zz=:zz,'17 99 104 97 114 115 32 32 78 66 46 32 115 117 98 115 116 114 105 1'
zz=:zz,'10 103 115 10 32 32 117 115 117 98 49 61 46 32 40 51 49 51 43 105 4'
zz=:zz,'6 55 41 123 117 99 104 97 114 115 10 32 32 100 97 116 97 116 121 11'
zz=:zz,'2 101 32 117 115 117 98 48 10 32 32 100 97 116 97 116 121 112 101 3'
zz=:zz,'2 117 115 117 98 49 10 10 32 32 78 66 46 32 115 116 114 105 110 103'
zz=:zz,' 115 32 116 104 97 116 32 119 105 108 108 32 110 111 116 32 111 99 '
zz=:zz,'99 117 114 32 105 110 32 116 104 101 32 111 114 105 103 105 110 97 '
zz=:zz,'108 10 32 32 117 110 101 119 48 61 46 32 117 58 32 52 48 48 50 55 4'
zz=:zz,'3 105 46 51 51 10 32 32 117 110 101 119 49 61 46 32 117 58 32 53 48'
zz=:zz,' 50 49 55 43 105 46 55 10 10 32 32 43 46 47 32 117 110 101 119 48 3'
zz=:zz,'2 69 46 32 117 99 104 97 114 115 32 32 32 78 66 46 32 110 111 116 3'
zz=:zz,'2 105 110 32 117 99 104 97 114 115 10 32 32 43 46 47 32 117 110 101'
zz=:zz,' 119 49 32 69 46 32 117 99 104 97 114 115 10 10 32 32 117 99 104 97'
zz=:zz,' 114 115 110 101 119 61 46 32 40 39 47 39 44 117 115 117 98 48 44 3'
zz=:zz,'9 47 39 44 117 110 101 119 48 44 39 47 39 44 117 115 117 98 49 44 3'
zz=:zz,'9 47 39 44 117 110 101 119 49 41 32 99 104 97 110 103 101 115 116 1'
zz=:zz,'14 32 117 99 104 97 114 115 10 10 32 32 43 46 47 32 117 110 101 119'
zz=:zz,' 48 32 69 46 32 117 99 104 97 114 115 110 101 119 32 32 78 66 46 32'
zz=:zz,' 110 111 119 32 105 110 32 115 116 114 105 110 103 10 32 32 43 46 4'
zz=:zz,'7 32 117 110 101 119 49 32 69 46 32 117 99 104 97 114 115 110 101 1'
zz=:zz,'19{a.);''changetok'';(42 99 104 97 110 103 101 116 111 107 32 118 45 '
zz=:zz,'45 32 114 101 112 108 97 99 101 115 32 74 32 110 97 109 101 32 116 '
zz=:zz,'111 107 101 110 115 32 119 105 116 104 105 110 32 97 32 115 116 114'
zz=:zz,' 105 110 103 46 10 10 84 104 105 115 32 97 108 103 111 114 105 116 '
zz=:zz,'104 109 32 32 119 97 115 32 97 100 97 112 116 101 100 32 102 114 11'
zz=:zz,'1 109 32 32 40 99 104 97 110 103 101 115 116 114 41 32 97 110 100 3'
zz=:zz,'2 105 115 32 32 115 105 109 105 108 97 114 10 119 105 116 104 32 11'
zz=:zz,'6 104 101 32 101 120 99 101 112 116 105 111 110 32 116 104 97 116 3'
zz=:zz,'2 105 116 32 111 110 108 121 32 114 101 112 108 97 99 101 115 32 74'
zz=:zz,' 32 110 97 109 101 32 116 111 107 101 110 115 46 10 10 100 121 97 1'
zz=:zz,'00 58 32 99 108 67 104 97 110 103 101 100 32 61 46 32 99 108 84 111'
zz=:zz,' 107 101 110 115 32 99 104 97 110 103 101 116 111 107 32 99 108 83 '
zz=:zz,'116 114 10 10 32 32 39 47 99 104 97 110 103 101 47 98 101 99 111 10'
zz=:zz,'9 101 115 39 32 99 104 97 110 103 101 116 111 107 32 39 99 104 97 1'
zz=:zz,'10 103 101 32 109 101 32 32 110 111 99 104 97 110 103 101 39 10 10 '
zz=:zz,'32 32 39 47 100 101 108 101 116 101 39 32 99 104 97 110 103 101 116'
zz=:zz,' 111 107 32 39 100 101 108 101 116 101 32 109 101 39 32 32 32 78 66'
zz=:zz,' 46 32 110 117 108 108 32 114 101 112 108 97 99 101 109 101 110 116'
zz=:zz,' 32 100 101 108 101 116 101 115 10 10 32 32 39 47 105 47 99 104 97 '
zz=:zz,'110 103 101 47 121 111 117 47 109 117 116 97 116 101 39 32 99 104 9'
zz=:zz,'7 110 103 101 116 111 107 32 39 105 32 116 104 105 115 32 116 111 3'
zz=:zz,'2 121 111 117 32 110 111 116 121 111 117 39 10 10 32 32 78 66 46 32'
zz=:zz,' 102 105 114 115 116 32 99 104 97 114 97 99 116 101 114 32 105 115 '
zz=:zz,'32 100 101 108 105 109 105 116 101 114 10 32 32 39 46 114 101 109 1'
zz=:zz,'11 118 101 46 46 112 117 114 103 101 46 46 119 105 112 101 39 32 99'
zz=:zz,' 104 97 110 103 101 116 111 107 32 39 114 101 109 111 118 101 32 11'
zz=:zz,'2 117 114 103 101 32 119 105 112 101 39 10 10 32 32 78 66 46 32 116'
zz=:zz,' 97 114 103 101 116 115 32 116 104 97 116 32 97 114 101 32 110 111 '
zz=:zz,'116 32 74 32 110 97 109 101 115 32 97 114 101 32 105 103 110 111 11'
zz=:zz,'4 101 100 10 32 32 39 47 55 55 36 47 98 111 111 47 98 111 121 115 4'
zz=:zz,'7 103 105 114 108 115 39 32 99 104 97 110 103 101 116 111 107 32 39'
zz=:zz,' 98 111 121 115 32 55 55 36 32 98 111 121 115 32 55 55 36 39 10 10 '
zz=:zz,'32 32 39 47 38 38 38 38 47 42 42 42 42 47 94 94 94 47 40 40 40 39 3'
zz=:zz,'2 99 104 97 110 103 101 116 111 107 32 39 38 38 38 38 32 94 94 94 3'
zz=:zz,'2 97 108 108 32 98 97 100 32 110 111 116 104 105 110 103 32 104 97 '
zz=:zz,'112 112 101 110 115 39 10 10 32 32 39 47 103 111 111 100 47 37 37 4'
zz=:zz,'7 94 94 47 98 97 100 47 117 103 108 121 47 38 37 37 36 36 36 39 32 '
zz=:zz,'99 104 97 110 103 101 116 111 107 32 39 103 111 111 100 32 103 111 '
zz=:zz,'111 100 101 114 32 94 94 32 117 103 108 121 32 110 111 116 117 103 '
zz=:zz,'108 121 39 10 10 32 32 39 47 39 32 99 104 97 110 103 101 116 111 10'
zz=:zz,'7 32 39 110 111 116 104 105 110 103 32 104 97 112 112 101 110 115 3'
zz=:zz,'9 10 10 32 32 39 39 32 99 104 97 110 103 101 116 111 107 32 39 110 '
zz=:zz,'111 116 104 105 110 103 32 104 97 112 112 101 110 115 39 10 10 32 3'
zz=:zz,'2 39 47 47 47 47 47 47 47 47 39 32 99 104 97 110 103 101 116 111 10'
zz=:zz,'7 32 39 110 111 116 104 105 110 103 32 104 97 112 112 101 110 115 3'
zz=:zz,'9 10 10 32 32 39 47 110 111 116 104 105 110 103 47 104 97 112 112 1'
zz=:zz,'01 110 115 39 32 99 104 97 110 103 101 116 111 107 32 39 110 111 32'
zz=:zz,' 109 97 116 99 104 101 115 32 116 111 32 99 104 97 110 103 101 39 1'
zz=:zz,'0 10 32 32 78 66 46 32 109 117 108 116 105 112 108 101 32 114 101 1'
zz=:zz,'12 108 97 99 101 109 101 110 116 115 32 97 114 101 32 109 97 100 10'
zz=:zz,'1 32 105 110 32 108 101 102 116 32 116 111 32 114 105 103 104 116 3'
zz=:zz,'2 111 114 100 101 114 10 32 32 116 32 61 46 32 39 111 110 99 101 32'
zz=:zz,' 97 108 108 32 116 104 105 110 103 115 32 119 101 114 101 32 109 97'
zz=:zz,' 110 121 39 10 10 32 32 39 47 109 97 110 121 47 99 104 97 110 103 1'
zz=:zz,'01 115 47 97 108 108 47 97 116 47 111 110 99 101 47 101 104 104 39 '
zz=:zz,'32 99 104 97 110 103 101 116 111 107 32 116{a.);''dayofweek'';42 100 '
zz=:zz,'97 121 111 102 119 101 101 107 32 118 45 45 32 119 101 101 107 100 '
zz=:zz,'97 121 32 102 114 111 109 32 89 89 89 89 32 77 77 32 68 68 32 100 9'
zz=:zz,'7 116 101 115 46 10 10 109 111 110 97 100 58 32 32 98 108 99 108 32'
zz=:zz,' 61 46 32 100 97 121 111 102 119 101 101 107 32 105 108 89 89 89 89'
zz=:zz,' 77 77 68 68 32 124 32 105 116 89 89 89 89 77 77 68 68 10 10 32 32 '
zz=:zz,'100 97 121 111 102 119 101 101 107 32 50 48 48 49 32 57 32 49 49 10'
zz=:zz,' 10 32 32 100 97 116 101 115 61 46 32 49 57 53 51 48 55 48 50 32 49'
zz=:zz,' 57 53 54 48 55 49 56 32 49 57 53 57 49 50 49 49 32 49 57 56 54 48 '
zz=:zz,'56 49 52 32 49 57 57 49 48 50 49 57 32 49 57 51 53 48 55 48 54 32 4'
zz=:zz,'9 57 51 51 48 57 49 53 32 49 57 54 49 48 57 50 54 10 32 32 100 97 1'
zz=:zz,'16 101 115 61 46 32 48 32 49 48 48 32 49 48 48 32 35 58 32 47 58 12'
zz=:zz,'6 32 100 97 116 101 115 10 10 32 32 110 97 109 101 115 61 46 32 59 '
zz=:zz,'58 39 71 111 111 102 121 32 68 114 111 111 112 121 32 71 114 117 10'
zz=:zz,'9 112 121 32 68 117 109 112 121 32 83 108 101 101 112 121 32 66 117'
zz=:zz,' 109 112 121 32 68 117 109 98 111 32 68 111 110 97 108 100 39 10 10'
zz=:zz,' 32 32 110 97 109 101 115 32 44 46 32 40 60 34 49 32 100 97 116 101'
zz=:zz,' 115 41 32 44 46 32 100 97 121 111 102 119 101 101 107 32 100 97 11'
zz=:zz,'6 101 115 10{a.                                                    '
zz=:13013{.zz
showpass 0 9 put ". ".'zz_',SOLOCALE,'_' [ cocurrent 'base' NB.{*JOD*}
".soclear NB.{*JOD*}

cocurrent SO__JODobj NB.{*JOD*}
zz=:''
zz=:zz,'5 2$''dollars1913'';(100 111 108 108 97 114 115 49 57 49 51 32 118 45'
zz=:zz,' 45 32 99 111 110 115 116 97 110 116 32 49 57 49 51 32 100 111 108 '
zz=:zz,'108 97 114 115 32 102 114 111 109 32 50 48 48 55 32 67 80 73 13 10 '
zz=:zz,'13 10 67 111 110 118 101 114 116 115 32 99 117 114 114 101 110 116 '
zz=:zz,'32 100 111 108 108 97 114 115 32 116 111 32 49 57 49 51 32 100 111 '
zz=:zz,'108 108 97 114 115 32 98 97 115 101 100 32 111 110 32 116 104 101 3'
zz=:zz,'2 99 111 110 115 117 109 101 114 32 112 114 105 99 101 32 105 110 1'
zz=:zz,'00 101 120 46 13 10 13 10 109 111 110 97 100 58 32 32 110 117 32 61'
zz=:zz,' 46 32 100 111 108 108 97 114 115 49 57 49 50 32 110 117 67 117 114'
zz=:zz,' 114 101 110 116 13 10 13 10 32 32 78 66 46 32 99 111 110 118 101 1'
zz=:zz,'14 115 105 111 110 32 102 111 114 109 117 108 97 13 10 32 32 99 111'
zz=:zz,' 110 115 116 97 110 116 95 100 111 108 108 97 114 115 32 61 58 32 9'
zz=:zz,'9 117 114 114 101 110 116 95 100 111 108 108 97 114 115 32 42 32 40'
zz=:zz,' 112 114 101 118 105 111 117 115 95 67 80 73 32 37 32 99 117 114 11'
zz=:zz,'4 101 110 116 95 67 80 73 41 13 10 13 10 32 32 78 66 46 32 119 104 '
zz=:zz,'97 116 32 119 111 117 108 100 32 109 121 32 50 48 48 48 48 48 32 11'
zz=:zz,'6 111 119 110 104 111 109 101 32 98 101 32 119 111 114 116 104 32 1'
zz=:zz,'05 110 32 49 57 49 51 32 100 111 108 108 97 114 115 13 10 32 32 57 '
zz=:zz,'53 52 57 46 52 52 32 61 32 32 48 46 48 49 32 114 111 117 110 100 32'
zz=:zz,' 50 48 48 48 48 48 32 42 32 57 46 57 32 37 32 50 48 55 46 51 52 50 '
zz=:zz,'13 10 13 10 32 32 78 66 46 32 110 111 119 32 73 32 107 110 111 119 '
zz=:zz,'32 119 104 121 32 105 116 32 102 101 108 116 32 108 105 107 101 32 '
zz=:zz,'97 32 115 104 97 99 107 13 10 32 32 57 53 52 57 46 52 52 32 61 32 4'
zz=:zz,'8 46 48 49 32 114 111 117 110 100 32 100 111 108 108 97 114 115 49 '
zz=:zz,'57 49 51 32 50 48 48 48 48 48 13 10 13 10 32 32 78 66 46 32 104 111'
zz=:zz,' 119 32 109 117 99 104 32 119 111 117 108 100 32 97 32 49 57 49 51 '
zz=:zz,'32 115 109 97 108 108 32 109 105 108 108 105 111 110 97 105 114 101'
zz=:zz,' 32 98 101 32 119 111 114 116 104 32 116 111 100 97 121 13 10 32 32'
zz=:zz,' 40 100 111 108 108 97 114 115 49 57 49 51 94 58 95 49 41 32 49 101'
zz=:zz,' 54{a.);''earthdist'';(32 32 78 66 46 32 69 120 97 109 112 108 101 11'
zz=:zz,'5 32 117 115 105 110 103 32 101 97 114 116 104 100 105 115 116 13 1'
zz=:zz,'0 32 13 10 32 32 78 66 46 32 102 101 116 99 104 32 102 114 111 109 '
zz=:zz,'32 40 110 101 116 109 97 105 110 41 32 100 105 99 116 105 111 110 9'
zz=:zz,'7 114 121 32 116 111 32 114 117 110 32 102 111 108 108 111 119 105 '
zz=:zz,'110 103 13 10 13 10 32 32 78 66 46 32 111 100 32 39 110 101 116 109'
zz=:zz,' 97 105 110 39 32 91 32 51 32 111 100 32 39 39 13 10 32 32 78 66 46'
zz=:zz,' 32 103 101 116 32 59 58 39 100 100 102 114 100 109 115 32 114 111 '
zz=:zz,'117 110 100 39 13 10 32 32 78 66 46 32 103 101 116 114 120 32 39 10'
zz=:zz,'1 97 114 116 104 100 105 115 116 39 13 10 13 10 32 32 78 66 46 32 8'
zz=:zz,'4 104 101 32 101 120 97 109 112 108 101 32 103 105 118 101 110 32 1'
zz=:zz,'05 110 32 77 101 101 117 115 32 99 97 108 99 117 108 97 116 101 115'
zz=:zz,' 32 116 104 101 32 103 101 111 100 101 115 105 99 13 10 32 32 78 66'
zz=:zz,' 46 32 100 105 115 116 97 110 99 101 32 98 101 116 119 101 101 110 '
zz=:zz,'32 116 104 101 32 79 98 115 101 114 118 97 116 111 105 114 101 32 1'
zz=:zz,'00 101 32 80 97 114 105 115 32 97 110 100 32 116 104 101 13 10 32 3'
zz=:zz,'2 78 66 46 32 85 46 83 46 32 78 97 118 97 108 32 79 98 115 101 114 '
zz=:zz,'118 97 116 111 114 121 32 105 110 32 87 97 115 104 105 110 103 116 '
zz=:zz,'111 110 32 68 46 67 46 13 10 13 10 32 32 78 66 46 32 80 97 114 105 '
zz=:zz,'115 32 108 111 110 103 105 116 117 100 101 44 32 108 97 116 105 116'
zz=:zz,' 117 100 101 13 10 32 32 78 66 46 32 100 100 102 114 100 109 115 32'
zz=:zz,' 99 111 109 112 117 116 101 115 32 100 101 99 105 109 97 108 32 100'
zz=:zz,' 101 103 114 101 101 115 32 102 114 111 109 32 100 101 103 114 101 '
zz=:zz,'101 44 32 109 105 110 117 116 101 115 44 32 115 101 99 111 110 100 '
zz=:zz,'115 13 10 32 32 108 49 32 32 32 32 32 61 46 32 100 100 102 114 100 '
zz=:zz,'109 115 32 95 50 32 95 50 48 32 95 49 52 32 32 32 32 78 66 46 32 32'
zz=:zz,' 50 100 32 50 48 109 32 49 52 115 32 40 69 97 115 116 41 13 10 32 3'
zz=:zz,'2 116 104 101 116 97 49 32 61 46 32 100 100 102 114 100 109 115 32 '
zz=:zz,'52 56 32 53 48 32 49 49 32 32 32 32 32 32 78 66 46 32 52 56 100 32 '
zz=:zz,'52 48 109 32 49 49 115 32 40 78 111 114 116 104 41 13 10 13 10 32 3'
zz=:zz,'2 78 66 46 32 87 97 115 104 105 110 103 116 111 110 13 10 32 32 108'
zz=:zz,' 50 32 32 32 32 32 61 46 32 100 100 102 114 100 109 115 32 55 55 32'
zz=:zz,' 51 32 53 54 32 32 32 32 32 32 32 78 66 46 32 55 55 100 32 32 51 10'
zz=:zz,'9 32 53 54 115 32 40 87 101 115 116 41 13 10 32 32 116 104 101 116 '
zz=:zz,'97 50 32 61 46 32 100 100 102 114 100 109 115 32 51 56 32 53 53 32 '
zz=:zz,'49 55 32 32 32 32 32 32 78 66 46 32 51 56 100 32 53 53 109 32 49 55'
zz=:zz,' 115 32 40 78 111 114 116 104 41 13 10 13 10 32 32 78 66 46 32 114 '
zz=:zz,'111 117 110 100 101 100 32 116 111 32 50 32 100 101 99 105 109 97 1'
zz=:zz,'08 115 32 109 97 116 99 104 101 115 32 77 101 101 117 115 13 10 32 '
zz=:zz,'32 54 49 56 49 46 54 51 32 61 32 40 48 46 48 49 32 114 111 117 110 '
zz=:zz,'100 41 32 40 108 49 44 116 104 101 116 97 49 41 32 101 97 114 116 1'
zz=:zz,'04 100 105 115 116 32 108 50 44 116 104 101 116 97 50 13 10 13 10 3'
zz=:zz,'2 32 48 32 48 32 32 101 97 114 116 104 100 105 115 116 32 48 32 48 '
zz=:zz,'32 32 32 32 32 78 66 46 32 115 97 109 101 32 108 97 116 44 108 111 '
zz=:zz,'110 103 13 10 13 10 32 32 78 66 46 32 102 114 111 109 32 80 111 108'
zz=:zz,' 101 32 116 111 32 80 111 108 101 32 45 32 110 97 115 116 121 32 10'
zz=:zz,'5 110 102 105 110 105 116 105 101 115 32 105 110 32 116 114 105 103'
zz=:zz,' 32 102 117 110 99 116 105 111 110 115 13 10 32 32 48 32 57 48 32 1'
zz=:zz,'01 97 114 116 104 100 105 115 116 32 48 32 95 57 48 32 32 13 10 13 '
zz=:zz,'10 32 32 78 66 46 32 78 32 80 111 108 101 32 116 111 32 101 113 117'
zz=:zz,' 97 116 111 114 32 60 32 115 97 109 101 32 97 110 103 108 101 32 97'
zz=:zz,' 108 111 110 103 32 101 113 117 97 116 111 114 13 10 32 32 78 66 46'
zz=:zz,' 32 84 104 105 115 32 105 115 32 100 117 101 32 116 104 101 32 101 '
zz=:zz,'113 117 97 116 111 114 105 97 108 32 98 117 108 103 101 13 10 32 32'
zz=:zz,' 48 32 57 48 32 101 97 114 116 104 100 105 115 116 32 48 32 48 13 1'
zz=:zz,'0 32 32 48 32 48 32 101 97 114 116 104 100 105 115 116 32 57 48 32 '
zz=:zz,'48 13 10 13 10 32 32 78 66 46 32 117 115 101 32 111 102 32 79 68 66'
zz=:zz,' 67 32 97 110 100 32 69 120 99 101 108 32 108 111 99 97 116 105 111'
zz=:zz,' 110 32 100 97 116 97 98 97 115 101 13 10 32 32 78 66 46 32 114 101'
zz=:zz,' 113 117 105 114 101 115 32 114 101 103 105 115 116 101 114 105 110'
zz=:zz,' 103 32 40 108 97 116 108 111 110 103 46 120 108 115 41 32 13 10 32'
zz=:zz,' 32 78 66 46 32 97 115 32 97 110 32 79 68 66 67 32 100 97 116 97 32'
zz=:zz,' 115 111 117 114 99 101 46 13 10 13 10 32 32 78 66 46 32 108 111 97'
zz=:zz,' 100 32 39 100 100 39 32 32 78 66 46 32 109 97 107 101 32 79 68 66 '
zz=:zz,'67 32 86 101 114 98 115 32 97 118 97 105 108 97 98 108 101 13 10 32'
zz=:zz,' 32 99 104 32 32 61 46 32 100 100 99 111 110 32 39 100 115 110 61 1'
zz=:zz,'08 97 116 108 111 110 103 39 13 10 13 10 32 32 115 113 108 32 61 46'
zz=:zz,' 32 32 32 32 32 32 39 32 115 101 108 101 99 116 32 108 111 110 103 '
zz=:zz,'105 116 117 100 101 44 108 97 116 105 116 117 100 101 44 99 105 116'
zz=:zz,' 121 112 108 97 99 101 32 39 13 10 32 32 115 113 108 32 61 46 32 11'
zz=:zz,'5 113 108 44 32 39 32 102 114 111 109 32 96 108 97 116 108 111 110 '
zz=:zz,'103 36 96 32 39 13 10 13 10 32 32 115 104 32 61 46 32 115 113 108 3'
zz=:zz,'2 100 100 115 101 108 32 99 104 13 10 32 32 99 105 116 105 101 115 '
zz=:zz,'32 61 46 32 100 100 102 101 116 32 115 104 44 95 49 13 10 32 32 108'
zz=:zz,' 98 32 61 46 32 124 58 32 59 34 49 32 93 32 48 32 49 32 123 34 49 3'
zz=:zz,'2 99 105 116 105 101 115 13 10 13 10 32 32 78 66 46 32 108 97 115 1'
zz=:zz,'16 32 114 111 119 32 105 110 32 100 97 116 97 98 97 115 101 32 105 '
zz=:zz,'115 32 109 121 32 99 117 114 114 101 110 116 32 111 98 115 101 114 '
zz=:zz,'118 105 110 103 32 115 105 116 101 13 10 32 32 100 105 115 116 32 6'
zz=:zz,'1 46 40 123 58 34 49 32 108 98 41 32 101 97 114 116 104 100 105 115'
zz=:zz,' 116 32 108 98 13 10 32 32 111 114 100 32 61 46 32 47 58 32 100 105'
zz=:zz,' 115 116 13 10 13 10 32 32 78 66 46 32 105 110 99 114 101 97 115 10'
zz=:zz,'5 110 103 32 103 101 111 100 101 115 105 99 32 100 105 115 116 97 1'
zz=:zz,'10 99 101 115 32 102 114 111 109 32 109 121 32 111 98 115 101 114 1'
zz=:zz,'18 105 110 103 32 115 105 116 101 13 10 32 32 108 105 115 116 32 40'
zz=:zz,' 57 46 50 32 34 58 32 44 46 32 111 114 100 32 123 32 100 105 115 11'
zz=:zz,'6 41 32 44 46 32 39 32 39 32 44 46 32 111 114 100 32 123 32 62 32 1'
zz=:zz,'23 58 34 49 32 99 105 116 105 101 115{a.);''geteleattrtext'';(42 103 '
zz=:zz,'101 116 101 108 101 97 116 116 114 116 101 120 116 32 118 45 45 32 '
zz=:zz,'103 101 116 32 101 108 101 109 101 110 116 32 116 101 120 116 32 10'
zz=:zz,'2 111 108 108 111 119 105 110 103 32 97 116 116 114 105 98 117 116 '
zz=:zz,'101 115 46 13 10 13 10 83 105 109 105 108 105 97 114 32 32 116 111 '
zz=:zz,'32 40 103 101 116 101 108 101 116 101 120 116 41 32 101 120 99 101 '
zz=:zz,'112 116 32 116 104 97 116 32 116 104 101 32 101 120 116 114 97 99 1'
zz=:zz,'16 101 100 32 32 116 101 120 116 32 99 97 110 13 10 102 111 108 108'
zz=:zz,' 111 119 32 32 97 116 116 114 105 98 117 116 101 115 32 32 111 102 '
zz=:zz,'32 32 32 116 104 101 32 32 104 101 97 100 32 32 116 97 103 46 32 32'
zz=:zz,' 65 115 115 117 109 101 115 32 32 32 110 111 110 110 101 115 116 10'
zz=:zz,'1 100 13 10 101 108 101 109 101 110 116 115 46 13 10 13 10 100 121 '
zz=:zz,'97 100 58 32 32 99 108 84 97 103 32 103 101 116 101 108 101 97 116 '
zz=:zz,'116 114 116 101 120 116 32 99 108 88 109 108 13 10 13 10 13 10 32 3'
zz=:zz,'2 39 99 111 111 114 100 39 32 103 101 116 101 108 101 97 116 116 11'
zz=:zz,'4 116 101 120 116 32 39 60 99 111 111 114 100 32 108 97 116 61 34 5'
zz=:zz,'2 53 46 48 34 32 108 111 110 61 34 45 55 56 46 48 48 34 62 103 101 '
zz=:zz,'116 32 116 104 105 115 60 47 99 111 111 114 100 62 39{a.);''getelete'
zz=:zz,'xt'';(42 103 101 116 101 108 101 116 101 120 116 32 118 45 45 32 103'
zz=:zz,' 101 116 32 112 117 114 101 32 101 108 101 109 101 110 116 32 116 1'
zz=:zz,'01 120 116 13 10 13 10 82 101 116 117 114 110 115 32 116 104 101 32'
zz=:zz,' 116 101 120 116 32 98 101 116 119 101 101 110 32 112 117 114 101 3'
zz=:zz,'2 40 110 111 32 97 116 116 114 105 98 117 116 101 115 41 32 110 111'
zz=:zz,' 110 45 110 101 115 116 101 100 32 120 109 108 32 116 97 103 115 46'
zz=:zz,' 13 10 13 10 100 121 97 100 58 32 32 98 108 99 108 32 61 46 32 99 1'
zz=:zz,'08 84 97 103 32 103 101 116 101 108 101 116 101 120 116 32 99 108 8'
zz=:zz,'8 109 108 13 10 13 10 32 32 39 110 97 109 101 39 32 103 101 116 101'
zz=:zz,' 108 101 116 101 120 116 32 39 60 110 97 109 101 62 74 111 104 110 '
zz=:zz,'60 47 110 97 109 101 62 60 100 97 116 101 62 68 101 99 101 109 98 1'
zz=:zz,'01 114 32 49 48 44 32 50 48 48 55 60 47 100 97 116 101 62 60 110 97'
zz=:zz,' 109 101 62 67 97 115 112 101 114 60 47 110 97 109 101 62 39 13 10{'
zz=:zz,'a.);''geteletextidx'';42 103 101 116 101 108 101 116 101 120 116 105 '
zz=:zz,'100 120 32 118 45 45 32 105 110 100 101 120 32 97 110 100 32 103 10'
zz=:zz,'1 116 32 112 117 114 101 32 101 108 101 109 101 110 116 32 116 101 '
zz=:zz,'120 116 13 10 13 10 82 101 116 117 114 110 115 32 105 110 100 101 1'
zz=:zz,'20 101 115 32 111 102 32 97 110 100 32 99 117 116 32 112 117 114 10'
zz=:zz,'1 32 101 108 101 109 101 110 116 32 40 110 111 32 97 116 116 114 10'
zz=:zz,'5 98 117 116 101 115 41 32 110 111 110 45 110 101 115 116 101 100 3'
zz=:zz,'2 120 109 108 32 101 108 101 109 101 110 116 32 116 101 120 116 46 '
zz=:zz,'13 10 13 10 100 121 97 100 58 32 32 40 105 108 73 100 120 32 59 60 '
zz=:zz,'32 98 108 99 108 84 101 120 116 41 32 61 46 32 99 108 84 97 103 32 '
zz=:zz,'103 101 116 101 108 101 116 101 120 116 105 100 120 32 99 108 88 10'
zz=:zz,'9 108 13 10 13 10 32 32 39 108 111 110 39 32 103 101 116 101 108 10'
zz=:zz,'1 116 101 120 116 105 100 120 32 39 60 108 97 116 62 52 52 46 55 56'
zz=:zz,' 57 60 47 108 97 116 62 60 108 111 110 62 45 56 57 46 55 56 56 48 6'
zz=:zz,'0 47 108 111 110 62 39 13 10{a.                                    '
zz=:10818{.zz
showpass 0 9 put ". ".'zz_',SOLOCALE,'_' [ cocurrent 'base' NB.{*JOD*}
".soclear NB.{*JOD*}

cocurrent SO__JODobj NB.{*JOD*}
zz=:''
zz=:zz,',:<;.(_1) 124 104 105 115 116 111 103 114 97 109 124 42 104 105 115'
zz=:zz,' 116 111 103 114 97 109 32 32 115 45 45 32 32 101 102 102 105 99 10'
zz=:zz,'5 101 110 116 108 121 32 32 99 111 109 112 117 116 101 115 32 32 11'
zz=:zz,'4 105 103 104 116 32 32 111 112 101 110 32 32 105 110 116 101 114 1'
zz=:zz,'18 97 108 13 10 91 120 105 44 120 105 43 49 41 32 104 105 115 116 1'
zz=:zz,'11 103 114 97 109 115 46 13 10 13 10 84 104 105 115 32 32 118 101 1'
zz=:zz,'14 98 32 32 40 100 117 101 32 32 116 111 32 32 82 111 103 101 114 3'
zz=:zz,'2 32 72 117 105 41 32 32 99 111 109 112 117 116 101 115 32 32 104 1'
zz=:zz,'05 115 116 111 103 114 97 109 115 46 32 32 84 104 101 13 10 105 110'
zz=:zz,' 116 101 114 118 97 108 115 32 97 114 101 32 114 105 103 104 116 32'
zz=:zz,' 111 112 101 110 46 32 83 101 101 32 40 104 105 115 116 111 103 114'
zz=:zz,' 97 109 50 41 32 102 111 114 32 108 101 102 116 32 111 112 101 110 '
zz=:zz,'32 40 120 105 44 13 10 120 105 43 49 93 32 105 110 116 101 114 118 '
zz=:zz,'97 108 115 46 13 10 13 10 77 111 114 101 32 100 101 116 97 105 108 '
zz=:zz,'115 32 99 97 110 32 98 101 32 102 111 117 110 100 32 111 110 32 116'
zz=:zz,' 104 101 32 74 32 87 105 107 105 32 97 116 58 13 10 13 10 104 116 1'
zz=:zz,'16 112 58 47 47 119 119 119 46 106 115 111 102 116 119 97 114 101 4'
zz=:zz,'6 99 111 109 47 106 119 105 107 105 47 69 115 115 97 121 115 47 72 '
zz=:zz,'105 115 116 111 103 114 97 109 13 10 13 10 104 116 116 112 58 47 47'
zz=:zz,' 119 119 119 46 106 115 111 102 116 119 97 114 101 46 99 111 109 47'
zz=:zz,' 106 119 105 107 105 47 66 114 105 97 110 83 99 104 111 116 116 47 '
zz=:zz,'72 105 115 116 111 103 114 97 109 63 104 105 103 104 108 105 103 10'
zz=:zz,'4 116 61 37 50 56 104 105 115 116 111 103 114 97 109 50 37 50 57 13'
zz=:zz,' 10 13 10 109 111 110 97 100 58 32 105 108 67 110 116 115 32 61 46 '
zz=:zz,'32 105 108 73 110 116 101 114 118 97 108 115 32 104 105 115 116 111'
zz=:zz,' 103 114 97 109 32 110 108 68 97 116 97 13 10 13 10 32 32 40 49 48 '
zz=:zz,'32 42 32 105 46 32 49 48 41 32 104 105 115 116 111 103 114 97 109 3'
zz=:zz,'2 63 49 48 48 48 48 35 49 48 48 13 10 13 10 13 10 13 10{a.         '
zz=:1867{.zz
showpass 0 9 put ". ".'zz_',SOLOCALE,'_' [ cocurrent 'base' NB.{*JOD*}
".soclear NB.{*JOD*}

cocurrent SO__JODobj NB.{*JOD*}
zz=:''
zz=:zz,'9 2$''nextversion'';(42 110 101 120 116 118 101 114 115 105 111 110 3'
zz=:zz,'2 118 45 45 32 119 111 114 100 116 101 120 116 10 10 67 111 109 112'
zz=:zz,' 117 116 101 115 32 32 116 104 101 32 110 101 120 116 32 118 101 11'
zz=:zz,'4 115 105 111 110 32 110 117 109 98 101 114 32 103 105 118 101 110 '
zz=:zz,'32 116 104 101 32 32 99 117 114 114 101 110 116 32 118 101 114 115 '
zz=:zz,'105 111 110 46 10 73 110 32 32 109 121 32 32 32 110 111 116 32 32 1'
zz=:zz,'15 111 32 32 32 104 117 109 98 108 101 32 32 32 111 112 105 110 105'
zz=:zz,' 111 110 32 32 118 101 114 115 105 111 110 32 32 34 49 34 32 32 114'
zz=:zz,' 101 112 114 101 115 101 110 116 115 10 117 110 97 116 116 97 105 1'
zz=:zz,'10 97 98 108 101 32 112 101 114 102 101 99 116 105 111 110 32 97 11'
zz=:zz,'0 100 32 32 115 104 111 117 108 100 32 32 111 110 108 121 32 32 98 '
zz=:zz,'101 32 32 97 112 112 114 111 97 99 104 101 100 32 98 117 116 10 110'
zz=:zz,' 101 118 101 114 32 32 97 99 104 105 101 118 101 100 46 32 73 32 11'
zz=:zz,'5 116 111 108 101 32 116 104 101 32 32 105 100 101 97 32 32 102 114'
zz=:zz,' 111 109 32 75 110 117 116 104 46 32 72 101 32 117 115 101 115 32 8'
zz=:zz,'0 105 32 97 115 10 116 104 101 32 102 105 110 97 108 32 32 118 101 '
zz=:zz,'114 115 105 111 110 32 32 111 102 32 84 101 88 32 32 97 110 100 32 '
zz=:zz,'32 97 112 112 114 111 97 99 104 101 115 32 32 105 116 32 119 105 11'
zz=:zz,'6 104 32 32 100 101 99 105 109 97 108 10 97 112 112 114 111 120 105'
zz=:zz,' 109 97 116 105 111 110 115 46 10 10 84 104 101 32 105 100 101 97 1'
zz=:zz,'08 32 32 40 110 101 120 116 118 101 114 115 105 111 110 41 32 32 10'
zz=:zz,'0 101 102 105 110 105 116 105 111 110 32 119 111 117 108 100 32 98 '
zz=:zz,'101 32 32 97 32 32 115 101 114 105 101 115 32 116 104 97 116 10 118'
zz=:zz,' 101 114 121 32 115 108 111 119 108 121 32 97 112 112 114 111 97 99'
zz=:zz,' 104 101 115 32 49 32 32 119 104 105 108 101 32 109 105 110 105 109'
zz=:zz,' 105 122 105 110 103 32 32 116 104 101 32 34 115 105 122 101 34 32 '
zz=:zz,'111 102 32 116 104 101 10 114 97 116 105 111 110 97 108 32 118 101 '
zz=:zz,'114 115 105 111 110 32 110 117 109 98 101 114 46 32 72 101 114 101 '
zz=:zz,'32 115 105 122 101 32 105 115 32 97 32 100 105 103 105 116 32 99 11'
zz=:zz,'1 117 110 116 46 10 10 32 109 111 110 97 100 58 32 32 110 101 120 1'
zz=:zz,'16 118 101 114 115 105 111 110 32 114 97 86 101 114 115 105 111 110'
zz=:zz,' 10 10 32 32 32 78 66 46 32 102 105 114 115 116 32 116 101 110 32 1'
zz=:zz,'18 101 114 115 105 111 110 32 110 117 109 98 101 114 115 10 32 32 3'
zz=:zz,'2 110 101 120 116 118 101 114 115 105 111 110 94 58 40 62 58 105 46'
zz=:zz,' 32 49 48 41 32 48 10 10 10 10{a.);''polyprod'';(42 112 111 108 121 1'
zz=:zz,'12 114 111 100 32 118 45 45 32 112 111 108 121 110 111 109 105 97 1'
zz=:zz,'08 32 112 114 111 100 117 99 116 10 10 84 104 105 115 32 118 101 11'
zz=:zz,'4 98 32 109 117 108 116 105 112 108 105 101 115 32 116 119 111 32 1'
zz=:zz,'12 111 108 121 110 111 109 105 97 108 115 46 32 32 84 104 101 32 11'
zz=:zz,'2 111 108 121 110 111 109 105 97 108 115 32 97 114 101 10 114 101 1'
zz=:zz,'12 114 101 115 101 110 116 101 100 32 97 115 32 99 111 101 102 102 '
zz=:zz,'105 99 105 101 110 116 32 108 105 115 116 115 46 10 10 109 111 110 '
zz=:zz,'97 100 58 32 32 110 108 32 61 46 32 110 108 67 111 101 102 102 115 '
zz=:zz,'65 32 112 111 108 121 112 114 111 100 32 110 108 67 111 101 102 102'
zz=:zz,' 115 66 10 10 32 32 78 66 46 32 99 111 101 102 102 105 99 105 101 1'
zz=:zz,'10 116 115 10 32 32 97 61 46 32 49 32 51 32 51 32 49 10 32 32 98 61'
zz=:zz,' 46 32 53 32 52 32 51 32 50 32 49 10 10 32 32 97 32 112 111 108 121'
zz=:zz,' 112 114 111 100 32 98 10 10 32 32 78 66 46 32 99 111 101 102 102 1'
zz=:zz,'05 99 101 110 116 115 32 99 97 110 32 98 101 32 97 110 121 32 110 1'
zz=:zz,'17 109 101 114 105 99 32 116 121 112 101 10 32 32 99 61 46 32 48 46'
zz=:zz,' 53 32 48 46 55 51 32 53 46 55 32 57 46 51 10 10 32 32 97 32 112 11'
zz=:zz,'1 108 121 112 114 111 100 32 99 10 10 32 32 78 66 46 32 101 120 116'
zz=:zz,' 101 110 100 101 100 32 105 110 116 101 103 101 114 115 10 32 32 10'
zz=:zz,'0 61 46 32 40 51 42 32 62 58 32 105 46 32 52 120 41 94 54 48 10 10 '
zz=:zz,'32 32 97 32 112 111 108 121 112 114 111 100 32 99 10 10 10 10 10{a.'
zz=:zz,');''randunif'';(42 114 97 110 100 117 110 105 102 32 118 45 45 32 32 '
zz=:zz,'103 101 110 101 114 97 116 101 115 32 117 110 105 102 111 114 109 1'
zz=:zz,'08 121 32 100 105 115 116 114 105 98 117 116 101 100 32 114 97 110 '
zz=:zz,'100 111 109 32 110 117 109 98 101 114 115 46 13 10 32 84 104 105 11'
zz=:zz,'5 32 118 101 114 98 44 32 117 115 101 100 32 105 110 32 67 108 105 '
zz=:zz,'102 102 32 82 101 105 116 101 114 115 32 98 111 111 107 32 34 70 11'
zz=:zz,'4 97 99 116 97 108 115 32 86 105 115 117 97 108 97 122 97 116 105 1'
zz=:zz,'11 110 13 10 32 97 110 100 32 32 74 34 32 32 112 114 111 100 117 99'
zz=:zz,' 101 115 32 32 97 114 114 97 121 115 32 32 111 102 32 32 117 110 10'
zz=:zz,'5 102 111 114 109 108 121 32 32 100 105 115 116 114 105 98 117 116 '
zz=:zz,'101 100 32 32 114 97 110 100 111 109 13 10 32 110 117 109 98 101 11'
zz=:zz,'4 115 46 13 10 13 10 32 109 111 110 97 100 58 32 32 114 97 110 100 '
zz=:zz,'117 110 105 102 32 105 108 83 104 97 112 101 13 10 13 10 32 32 114 '
zz=:zz,'97 110 100 117 110 105 102 32 49 48 32 32 32 78 66 46 32 49 48 32 1'
zz=:zz,'17 110 105 102 111 114 109 32 110 117 109 98 101 114 115 32 102 114'
zz=:zz,' 111 109 32 105 110 116 101 114 118 97 108 32 91 48 44 49 93 13 10 '
zz=:zz,'13 10 32 32 114 97 110 100 117 110 105 102 32 53 32 53 32 32 78 66 '
zz=:zz,'46 32 53 32 53 32 97 114 114 97 121 32 111 102 32 50 53 32 117 110 '
zz=:zz,'105 102 111 114 109 32 91 48 44 49 93 32 110 117 109 98 101 114 115'
zz=:zz,' 13 10 13 10 32 100 121 97 100 58 32 32 105 108 82 97 110 103 101 3'
zz=:zz,'2 114 97 110 100 117 110 105 102 32 105 108 83 104 97 112 101 13 10'
zz=:zz,' 13 10 32 32 49 32 49 48 32 114 97 110 100 117 110 105 102 32 49 48'
zz=:zz,' 48 48 32 32 32 78 66 46 32 49 48 48 48 32 117 110 105 102 111 114 '
zz=:zz,'109 32 110 117 109 98 101 114 115 32 102 114 111 109 32 91 49 44 49'
zz=:zz,' 48 93 13 10 13 10 32 32 95 49 32 49 32 114 97 110 100 117 110 105 '
zz=:zz,'102 32 50 32 51 32 52 32 32 78 66 46 32 50 32 51 32 52 32 97 114 11'
zz=:zz,'4 97 121 32 111 102 32 117 110 105 102 111 114 109 115 32 102 114 1'
zz=:zz,'11 109 32 91 95 49 44 49 93 13 10 13 10 13 10{a.);''readcsv'';(42 114'
zz=:zz,' 101 97 100 99 115 118 32 118 45 45 32 114 101 97 100 32 97 110 100'
zz=:zz,' 32 112 97 114 115 101 32 99 111 109 109 97 32 115 101 112 97 114 9'
zz=:zz,'7 116 101 100 32 116 97 98 108 101 32 102 105 108 101 115 46 13 10 '
zz=:zz,'13 10 84 104 105 115 32 32 42 46 99 115 118 32 114 101 97 100 101 1'
zz=:zz,'14 32 101 115 99 104 101 119 115 32 102 101 97 116 117 114 101 115 '
zz=:zz,'32 102 111 114 32 115 112 101 101 100 46 32 32 73 110 32 112 97 114'
zz=:zz,' 116 105 99 117 108 97 114 13 10 105 116 32 32 119 105 108 108 32 1'
zz=:zz,'10 111 116 32 104 97 110 100 108 101 32 34 113 117 111 116 101 100 '
zz=:zz,'34 32 100 101 108 105 109 105 116 101 114 115 32 40 115 101 101 32 '
zz=:zz,'112 97 114 115 101 99 115 118 41 32 97 110 100 32 105 116 13 10 97 '
zz=:zz,'115 115 117 109 101 115 32 116 104 101 32 42 46 99 115 118 32 116 9'
zz=:zz,'7 98 108 101 32 114 101 112 114 101 115 101 110 116 115 32 97 32 11'
zz=:zz,'6 97 98 108 101 46 13 10 13 10 118 101 114 98 97 116 105 109 58 13 '
zz=:zz,'10 13 10 32 32 78 66 46 32 101 120 112 108 105 99 105 116 32 100 10'
zz=:zz,'1 102 105 110 105 116 105 111 110 13 10 32 32 114 101 97 100 99 115'
zz=:zz,' 118 61 58 32 39 44 39 38 36 58 32 58 32 40 49 51 32 58 32 39 60 59'
zz=:zz,' 46 95 50 38 62 32 40 60 59 46 95 50 32 116 108 102 32 40 114 101 9'
zz=:zz,'7 100 32 121 41 32 45 46 32 67 82 41 32 44 38 46 62 32 120 39 41 32'
zz=:zz,' 102 46 13 10 13 10 109 111 110 97 100 58 32 32 98 108 99 108 32 61'
zz=:zz,' 46 32 114 101 97 100 99 115 118 32 99 108 70 105 108 101 78 97 109'
zz=:zz,' 101 13 10 13 10 32 32 114 101 97 100 99 115 118 32 39 99 58 92 98 '
zz=:zz,'99 97 92 110 99 99 105 100 97 116 97 92 108 98 108 99 46 116 120 11'
zz=:zz,'6 39 13 10 13 10 100 121 97 100 58 32 32 98 108 99 108 32 61 46 32 '
zz=:zz,'99 97 68 101 108 32 114 101 97 100 99 115 118 32 99 108 70 105 108 '
zz=:zz,'101 78 97 109 101 13 10 13 10 32 32 39 124 39 32 114 101 97 100 99 '
zz=:zz,'115 118 32 39 99 58 92 116 101 109 112 92 112 105 112 101 100 46 99'
zz=:zz,' 115 118 39 13 10 13 10 13 10 13 10 13 10 13 10 13 10 13 10 13 10 1'
zz=:zz,'3 10 13 10 13 10 13 10 13 10{a.);''readcsvs'';(42 114 101 97 100 99 1'
zz=:zz,'15 118 115 32 118 45 45 32 32 114 101 97 100 32 97 110 100 32 32 11'
zz=:zz,'2 97 114 115 101 32 99 111 109 109 97 32 100 101 108 105 109 105 11'
zz=:zz,'6 101 100 32 116 97 98 108 101 32 102 105 108 101 115 32 97 115 13 '
zz=:zz,'10 115 121 109 98 111 108 115 46 13 10 13 10 84 104 105 115 32 32 1'
zz=:zz,'18 101 114 98 32 32 105 115 32 97 32 118 97 114 105 97 116 105 111 '
zz=:zz,'110 32 111 110 32 40 114 101 97 100 99 115 118 41 46 32 83 101 101 '
zz=:zz,'32 32 115 105 109 105 108 105 97 114 32 115 121 109 98 111 108 13 1'
zz=:zz,'0 114 101 97 100 101 114 32 40 114 101 97 100 116 100 50 115 41 46 '
zz=:zz,'13 10 13 10 118 101 114 98 97 116 105 109 58 13 10 13 10 32 32 78 6'
zz=:zz,'6 46 32 101 120 112 108 105 99 105 116 32 100 101 102 105 110 105 1'
zz=:zz,'16 105 111 110 13 10 32 32 114 101 97 100 99 115 118 115 61 58 32 3'
zz=:zz,'9 44 39 38 36 58 32 58 32 40 49 51 32 58 32 39 115 58 64 60 59 46 9'
zz=:zz,'5 50 38 62 32 40 60 59 46 95 50 32 116 108 102 32 40 114 101 97 100'
zz=:zz,' 32 121 41 32 45 46 32 67 82 41 32 44 38 46 62 32 120 39 41 32 102 '
zz=:zz,'46 13 10 13 10 109 111 110 97 100 58 32 32 115 116 32 61 46 32 114 '
zz=:zz,'101 97 100 99 115 118 115 32 99 108 80 97 116 104 70 105 108 101 13'
zz=:zz,' 10 13 10 32 32 114 101 97 100 99 115 118 115 32 39 99 58 92 98 99 '
zz=:zz,'97 92 110 99 99 105 100 97 116 97 92 108 98 108 99 46 116 120 116 3'
zz=:zz,'9 13 10 13 10 100 121 97 100 58 32 32 115 116 32 61 46 32 99 97 32 '
zz=:zz,'114 101 97 100 99 115 118 115 32 99 108 80 97 116 104 70 105 108 10'
zz=:zz,'1 13 10 13 10 32 32 39 124 39 32 114 101 97 100 99 115 118 115 32 3'
zz=:zz,'9 99 58 92 116 101 109 112 92 112 105 112 101 100 46 116 120 116 39'
zz=:zz,' 13 10 13 10 13 10 13 10 13 10 13 10{a.);''readtd2'';(42 114 101 97 1'
zz=:zz,'00 116 100 50 32 118 45 45 32 114 101 97 100 32 97 110 100 32 112 9'
zz=:zz,'7 114 115 101 32 84 65 66 32 100 101 108 105 109 105 116 101 100 32'
zz=:zz,' 116 97 98 108 101 32 102 105 108 101 115 46 10 10 84 104 105 115 3'
zz=:zz,'2 32 118 101 114 98 32 105 115 32 32 115 111 109 101 119 104 97 116'
zz=:zz,' 32 32 102 97 115 116 101 114 32 97 110 100 32 32 99 97 110 32 98 1'
zz=:zz,'01 32 99 111 110 115 105 100 101 114 97 98 108 121 32 109 111 114 1'
zz=:zz,'01 10 115 112 97 99 101 32 101 102 102 105 99 105 101 110 116 32 11'
zz=:zz,'6 104 97 110 32 40 114 101 97 100 116 100 41 46 32 73 116 32 97 108'
zz=:zz,' 115 111 32 99 111 114 114 101 99 116 115 32 116 104 101 32 101 120'
zz=:zz,' 112 97 110 115 105 111 110 10 111 102 32 116 104 101 32 108 97 115'
zz=:zz,' 116 32 99 111 108 117 109 110 46 10 10 118 101 114 98 97 116 105 1'
zz=:zz,'09 58 10 10 32 32 78 66 46 32 101 120 112 108 105 99 105 116 32 100'
zz=:zz,' 101 102 105 110 105 116 105 111 110 10 32 32 114 101 97 100 116 10'
zz=:zz,'0 50 61 58 32 40 49 51 32 58 32 39 60 59 46 95 50 38 62 32 40 60 59'
zz=:zz,' 46 95 50 32 116 108 102 32 40 114 101 97 100 32 121 41 32 45 46 32'
zz=:zz,' 67 82 41 32 44 38 46 62 32 84 65 66 39 41 32 102 46 10 10 32 32 78'
zz=:zz,' 66 46 32 116 105 109 105 110 103 32 116 101 115 116 115 32 119 105'
zz=:zz,' 116 104 32 40 114 101 97 100 116 100 41 10 32 32 102 61 46 32 39 9'
zz=:zz,'9 58 92 116 101 109 112 92 115 109 117 103 105 109 97 103 101 116 9'
zz=:zz,'7 98 108 101 46 116 120 116 39 10 10 32 32 78 66 46 32 116 111 32 1'
zz=:zz,'01 118 101 110 32 111 117 116 32 73 47 79 32 98 105 97 115 32 114 1'
zz=:zz,'17 110 32 116 104 101 32 116 105 109 105 110 103 115 32 105 110 32 '
zz=:zz,'114 97 110 100 111 109 32 111 114 100 101 114 10 32 32 115 61 46 32'
zz=:zz,' 59 53 48 32 35 32 60 39 114 101 97 100 116 100 50 32 102 39 59 39 '
zz=:zz,'114 101 97 100 116 100 32 102 39 10 32 32 112 61 46 32 63 126 32 35'
zz=:zz,' 115 10 10 32 32 78 66 46 32 97 112 112 108 121 32 114 97 110 100 1'
zz=:zz,'11 109 32 112 101 114 109 117 116 97 116 105 111 110 44 32 116 105 '
zz=:zz,'109 101 32 97 110 100 32 105 110 118 101 114 116 32 112 101 114 109'
zz=:zz,' 117 116 97 116 105 111 110 10 32 32 116 61 46 32 40 47 58 112 41 1'
zz=:zz,'23 116 109 115 38 62 32 112 123 115 10 10 32 32 78 66 46 32 101 118'
zz=:zz,' 101 110 61 114 101 97 100 116 100 50 44 32 111 100 100 61 114 101 '
zz=:zz,'97 100 116 100 10 32 32 109 101 97 110 61 46 32 43 47 32 37 32 35 1'
zz=:zz,'0 10 32 32 109 101 97 110 34 49 32 124 58 32 40 45 46 50 32 124 32 '
zz=:zz,'105 46 32 35 116 41 35 116 10 32 32 109 101 97 110 34 49 32 124 58 '
zz=:zz,'32 40 50 32 124 32 105 46 32 35 116 41 35 116 10 10 10 10 10 10{a.)'
zz=:zz,';''readtd2s'';(42 114 101 97 100 116 100 50 115 32 32 118 45 45 32 32'
zz=:zz,' 114 101 97 100 32 97 110 100 32 32 112 97 114 115 101 32 84 65 66 '
zz=:zz,'32 100 101 108 105 109 105 116 101 100 32 32 116 97 98 108 101 32 1'
zz=:zz,'02 105 108 101 115 32 97 115 10 115 121 109 98 111 108 115 46 10 10'
zz=:zz,' 84 104 105 115 32 118 101 114 98 32 105 115 32 97 32 32 118 97 114'
zz=:zz,' 105 97 116 105 111 110 32 111 110 32 32 40 114 101 97 100 116 100 '
zz=:zz,'50 41 46 32 73 116 32 99 111 110 115 117 109 101 115 32 102 97 114 '
zz=:zz,'32 108 101 115 115 10 109 101 109 111 114 121 32 119 104 101 110 32'
zz=:zz,' 114 101 97 100 105 110 103 32 100 97 116 97 98 97 115 101 32 98 97'
zz=:zz,' 110 100 32 116 97 98 108 101 115 46 32 32 65 32 98 97 110 100 32 3'
zz=:zz,'2 116 97 98 108 101 32 32 104 97 115 10 109 97 110 121 32 114 101 1'
zz=:zz,'12 101 97 116 101 100 32 32 105 116 101 109 115 32 32 105 110 32 10'
zz=:zz,'9 111 115 116 32 32 99 111 108 117 109 110 115 46 32 69 97 99 104 3'
zz=:zz,'2 32 115 121 109 98 111 108 32 105 110 32 32 97 32 32 74 10 115 101'
zz=:zz,' 115 115 105 111 110 32 105 115 32 32 117 110 105 113 117 101 32 11'
zz=:zz,'5 111 32 115 116 111 114 105 110 103 32 114 101 112 101 97 116 115 '
zz=:zz,'32 105 115 32 32 109 111 115 116 108 121 32 97 32 109 97 116 116 10'
zz=:zz,'1 114 32 32 111 102 10 115 116 111 114 105 110 103 32 97 100 100 10'
zz=:zz,'5 116 105 111 110 97 108 32 112 111 105 110 116 101 114 115 32 32 1'
zz=:zz,'19 104 105 99 104 32 97 114 101 32 116 121 112 105 99 97 108 108 12'
zz=:zz,'1 32 115 109 97 108 108 101 114 32 116 104 97 110 10 99 111 108 117'
zz=:zz,' 109 110 32 105 116 101 109 115 46 10 10 118 101 114 98 97 116 105 '
zz=:zz,'109 58 10 10 32 32 78 66 46 32 101 120 112 108 105 99 105 116 32 10'
zz=:zz,'0 101 102 105 110 105 116 105 111 110 10 32 32 114 101 97 100 116 1'
zz=:zz,'00 50 115 61 58 32 40 49 51 32 58 32 39 115 58 64 60 59 46 95 50 38'
zz=:zz,' 62 32 40 60 59 46 95 50 32 116 108 102 32 40 114 101 97 100 32 121'
zz=:zz,' 41 32 45 46 32 67 82 41 32 44 38 46 62 32 84 65 66 39 41 32 102 46'
zz=:zz,' 10 10 109 111 110 97 100 58 32 32 115 116 32 61 46 32 114 101 97 1'
zz=:zz,'00 116 100 50 115 32 99 108 80 97 116 104 102 105 108 101 10 10 32 '
zz=:zz,'32 114 101 97 100 116 100 50 115 32 39 99 58 92 112 100 92 100 111 '
zz=:zz,'99 115 92 115 109 117 103 109 117 103 92 100 97 116 97 92 115 109 1'
zz=:zz,'17 103 105 109 97 103 101 116 97 98 108 101 46 116 120 116 39 10 10'
zz=:zz,' 10 10 10 10{a.);''readtdbom'';(42 114 101 97 100 116 100 98 111 109 '
zz=:zz,'32 118 45 45 32 114 101 97 100 32 97 110 100 32 112 97 114 115 101 '
zz=:zz,'32 84 65 66 32 100 101 108 105 109 105 116 101 100 32 116 97 98 108'
zz=:zz,' 101 32 102 105 108 101 115 32 105 103 110 111 114 105 110 103 32 9'
zz=:zz,'7 110 121 32 108 101 97 100 105 110 103 32 66 79 77 46 13 10 13 10 '
zz=:zz,'65 32 118 97 114 105 97 116 105 111 110 32 111 102 32 40 114 101 97'
zz=:zz,' 100 116 100 50 41 46 32 65 110 121 32 108 101 97 100 105 110 103 3'
zz=:zz,'2 66 79 77 32 119 105 108 108 32 98 101 32 100 114 111 112 112 101 '
zz=:zz,'100 32 98 101 102 111 114 101 32 112 97 114 115 105 110 103 46 13 1'
zz=:zz,'0 13 10 118 101 114 98 97 116 105 109 58 13 10 13 10 32 32 78 66 46'
zz=:zz,' 32 101 120 112 108 105 99 105 116 32 100 101 102 105 110 105 116 1'
zz=:zz,'05 111 110 13 10 32 32 114 101 97 100 116 100 98 111 109 61 58 32 4'
zz=:zz,'0 49 51 32 58 32 39 60 59 46 95 50 38 62 32 40 60 59 46 95 50 32 11'
zz=:zz,'6 108 102 32 40 100 101 98 111 109 32 114 101 97 100 32 121 41 32 4'
zz=:zz,'5 46 32 67 82 41 32 44 38 46 62 32 84 65 66 39 41 32 102 46 13 10 1'
zz=:zz,'3 10 13 10 13 10 13 10 13 10{a.);''readtds'';42 114 101 97 100 116 10'
zz=:zz,'0 115 32 118 45 45 32 114 101 97 100 32 32 97 110 100 32 32 112 97 '
zz=:zz,'114 115 101 32 32 84 65 66 32 32 100 101 108 105 109 105 116 101 10'
zz=:zz,'0 32 116 97 98 108 101 32 102 105 108 101 115 32 32 97 115 10 115 1'
zz=:zz,'21 109 98 111 108 115 46 10 10 84 104 105 115 32 32 118 101 114 98 '
zz=:zz,'32 32 105 115 32 97 32 118 97 114 105 97 116 105 111 110 32 111 110'
zz=:zz,' 32 40 114 101 97 100 116 100 41 46 32 73 116 32 105 115 32 115 111'
zz=:zz,' 109 101 119 104 97 116 32 102 97 115 116 101 114 10 97 110 100 32 '
zz=:zz,'99 111 110 115 117 109 101 115 32 32 102 97 114 32 32 108 101 115 1'
zz=:zz,'15 32 32 109 101 109 111 114 121 32 32 119 104 101 110 32 114 101 9'
zz=:zz,'7 100 105 110 103 32 32 100 97 116 97 98 97 115 101 32 32 98 97 110'
zz=:zz,' 100 10 116 97 98 108 101 115 46 32 83 101 101 32 115 105 109 105 1'
zz=:zz,'08 97 114 32 115 121 109 98 111 108 32 114 101 97 100 101 114 32 40'
zz=:zz,' 114 101 97 100 116 100 50 115 41 46 10 10 118 101 114 98 97 116 10'
zz=:zz,'5 109 58 10 10 32 32 78 66 46 32 118 101 114 98 32 100 101 102 105 '
zz=:zz,'110 116 105 111 110 32 105 110 32 101 120 112 108 105 99 116 32 102'
zz=:zz,' 111 114 109 10 32 32 114 101 97 100 116 100 115 61 58 32 40 49 51 '
zz=:zz,'32 58 32 39 115 58 64 58 60 59 46 95 49 34 49 32 84 65 66 32 44 46 '
zz=:zz,'32 93 59 46 95 50 32 116 108 102 32 40 114 101 97 100 32 121 41 32 '
zz=:zz,'45 46 32 67 82 39 41 32 102 46 10 10 109 111 110 97 100 58 32 32 11'
zz=:zz,'5 116 32 61 46 32 114 101 97 100 116 100 115 32 99 108 80 97 116 10'
zz=:zz,'4 102 105 108 101 10 10 32 32 114 101 97 100 116 100 115 32 39 99 5'
zz=:zz,'8 92 112 100 92 100 111 99 115 92 115 109 117 103 109 117 103 92 10'
zz=:zz,'0 97 116 97 92 115 109 117 103 105 109 97 103 101 116 97 98 108 101'
zz=:zz,' 46 116 120 116 39 10 10 10 10{a.                                  '
zz=:16113{.zz
showpass 0 9 put ". ".'zz_',SOLOCALE,'_' [ cocurrent 'base' NB.{*JOD*}
".soclear NB.{*JOD*}

cocurrent SO__JODobj NB.{*JOD*}
zz=:''
zz=:zz,',:<;.(_1) 124 116 111 106 117 108 105 97 110 124 42 116 111 106 117'
zz=:zz,' 108 105 97 110 32 118 45 45 32 32 114 101 116 117 114 110 115 32 1'
zz=:zz,'16 104 101 32 74 117 108 105 97 110 32 32 100 97 121 32 32 110 117 '
zz=:zz,'109 98 101 114 32 116 104 97 116 32 98 101 103 105 110 115 32 97 11'
zz=:zz,'6 10 110 111 111 110 32 111 102 32 116 104 101 32 99 97 108 101 110'
zz=:zz,' 100 97 114 32 100 97 116 101 46 10 10 80 111 115 116 105 118 101 3'
zz=:zz,'2 121 101 97 114 32 115 105 103 110 105 102 105 101 115 32 65 46 68'
zz=:zz,' 46 44 32 32 110 101 103 97 116 105 118 101 32 66 46 67 46 32 84 10'
zz=:zz,'4 101 32 121 101 97 114 32 32 97 102 116 101 114 32 49 10 66 46 67 '
zz=:zz,'46 32 119 97 115 32 49 32 65 46 68 46 10 10 84 104 105 115 32 97 10'
zz=:zz,'8 103 111 114 105 116 104 109 32 32 119 97 115 32 32 97 100 97 112 '
zz=:zz,'116 101 100 32 102 114 111 109 32 32 116 104 101 32 32 67 32 32 102'
zz=:zz,' 117 110 99 116 105 111 110 32 32 40 106 117 108 100 97 121 41 10 1'
zz=:zz,'15 116 97 114 116 105 110 103 32 32 111 110 32 32 112 97 103 101 32'
zz=:zz,' 32 49 49 32 111 102 32 32 78 117 109 101 114 105 99 97 108 32 32 8'
zz=:zz,'2 101 99 105 112 101 115 32 32 105 110 32 32 67 44 32 32 83 101 99 '
zz=:zz,'111 110 100 10 69 100 105 116 105 111 110 46 10 10 87 97 114 110 10'
zz=:zz,'5 110 103 58 32 116 104 105 115 32 118 101 114 98 32 100 111 101 11'
zz=:zz,'5 32 110 111 116 32 112 114 111 100 117 99 101 32 97 110 32 97 115 '
zz=:zz,'116 114 111 110 111 109 105 99 97 108 108 121 32 99 111 114 114 101'
zz=:zz,' 99 116 10 114 101 115 117 108 116 46 32 84 104 101 32 74 117 108 1'
zz=:zz,'05 97 110 32 100 97 121 32 105 115 32 111 102 102 115 101 116 32 43'
zz=:zz,' 48 46 53 32 102 114 111 109 32 116 104 101 32 99 111 114 114 101 9'
zz=:zz,'9 116 32 114 101 115 117 108 116 10 102 111 114 32 97 32 103 105 11'
zz=:zz,'8 101 110 32 100 97 116 101 46 32 32 84 104 105 115 32 109 97 107 1'
zz=:zz,'01 115 32 116 104 105 115 32 118 101 114 98 32 109 111 114 101 32 1'
zz=:zz,'17 115 101 102 117 108 32 102 111 114 32 99 105 118 105 108 10 99 9'
zz=:zz,'7 108 101 110 100 97 114 32 99 97 108 99 117 108 97 116 105 111 110'
zz=:zz,' 115 32 32 119 104 105 108 101 32 32 40 106 117 108 102 114 99 97 1'
zz=:zz,'08 41 32 105 115 32 32 98 101 116 116 101 114 32 115 117 105 116 10'
zz=:zz,'1 100 32 116 111 10 97 115 116 114 111 110 111 109 105 99 97 108 32'
zz=:zz,' 99 97 108 99 117 108 97 116 105 111 110 115 46 10 10 109 111 110 9'
zz=:zz,'7 100 58 32 32 105 108 74 117 108 105 97 110 32 61 46 32 116 111 10'
zz=:zz,'6 117 108 105 97 110 32 105 116 89 89 89 89 77 77 68 68 10 10 32 32'
zz=:zz,' 78 66 46 32 51 32 99 111 108 117 109 110 32 116 97 98 108 101 32 1'
zz=:zz,'11 114 32 51 32 105 116 101 109 32 108 105 115 116 10 32 32 116 111'
zz=:zz,' 106 117 108 105 97 110 32 49 57 53 51 32 55 32 50 32 32 32 32 32 3'
zz=:zz,'2 32 32 32 32 32 32 32 78 66 46 32 74 117 108 105 97 110 32 100 97 '
zz=:zz,'121 32 111 102 32 109 121 32 98 105 114 116 104 100 97 121 10 32 32'
zz=:zz,' 50 52 52 48 48 48 48 32 61 32 116 111 106 117 108 105 97 110 32 49'
zz=:zz,' 57 54 56 32 53 32 50 51 32 32 78 66 46 32 77 97 121 32 50 51 44 32'
zz=:zz,' 49 57 54 56 10 10 32 32 78 66 46 32 74 117 108 105 97 110 32 100 9'
zz=:zz,'7 121 32 110 117 109 98 101 114 115 32 111 102 32 97 108 108 32 78 '
zz=:zz,'101 119 32 89 101 97 114 115 32 105 110 32 49 52 116 104 32 99 101 '
zz=:zz,'110 116 117 114 121 10 32 32 116 111 106 117 108 105 97 110 32 40 4'
zz=:zz,'9 51 48 48 32 43 32 32 62 58 105 46 32 49 48 48 41 32 44 34 48 32 4'
zz=:zz,'9 32 91 32 49 32 49 10 10 100 121 97 100 58 32 32 105 108 74 117 10'
zz=:zz,'8 105 97 110 32 61 46 32 105 97 79 110 101 32 116 111 106 117 108 1'
zz=:zz,'05 97 110 32 105 108 89 89 89 89 77 77 68 68 10 10 32 32 49 32 116 '
zz=:zz,'111 106 117 108 105 97 110 32 49 57 56 54 48 56 49 52 32 49 57 57 4'
zz=:zz,'9 48 50 49 57 32 32 32 78 66 46 32 72 101 108 101 110 39 115 32 97 '
zz=:zz,'110 100 32 74 97 99 111 98 39 115 32 98 105 114 116 104 100 97 121 '
zz=:zz,'115 10 10 32 32 78 66 46 32 74 97 110 32 49 44 32 49 48 48 48 32 66'
zz=:zz,' 46 67 46 44 32 50 48 48 48 32 66 46 67 44 32 51 48 48 48 32 66 46 '
zz=:zz,'67 10 32 32 49 32 116 111 106 117 108 105 97 110 32 45 32 49 48 48 '
zz=:zz,'48 48 49 48 49 32 50 48 48 48 48 49 48 49 32 51 48 48 48 48 49 48 4'
zz=:zz,'9 10{a.                                                            '
zz=:3759{.zz
showpass 0 9 put ". ".'zz_',SOLOCALE,'_' [ cocurrent 'base' NB.{*JOD*}
".soclear NB.{*JOD*}

cocurrent SO__JODobj NB.{*JOD*}
zz=:''
zz=:zz,'3 2$<;.(_1) 124 117 99 112 102 114 110 99 114 100 124 42 117 99 112'
zz=:zz,' 102 114 110 99 114 100 32 118 45 45 32 117 110 105 99 111 100 101 '
zz=:zz,'32 99 111 100 101 32 112 111 105 110 116 115 32 102 114 111 109 32 '
zz=:zz,'78 67 82 32 100 101 99 105 109 97 108 32 99 104 97 114 97 99 116 10'
zz=:zz,'1 114 10 101 110 99 111 100 105 110 103 46 10 10 84 104 105 115 32 '
zz=:zz,'32 118 101 114 98 32 99 111 110 118 101 114 116 115 32 115 116 114 '
zz=:zz,'105 110 103 115 32 32 111 102 32 32 117 110 105 99 111 100 101 32 3'
zz=:zz,'2 78 67 82 32 100 101 99 105 109 97 108 32 101 110 99 111 100 101 1'
zz=:zz,'00 10 99 104 97 114 97 99 116 101 114 115 32 116 111 32 117 110 105'
zz=:zz,' 99 111 100 101 32 99 111 100 101 32 32 112 111 105 110 116 115 46 '
zz=:zz,'32 84 104 101 32 78 67 82 32 100 101 99 105 109 97 108 32 102 111 1'
zz=:zz,'14 109 97 116 32 105 115 10 115 117 112 112 111 114 116 101 100 32 '
zz=:zz,'32 98 121 32 109 97 110 121 32 32 98 114 111 119 115 101 114 115 32'
zz=:zz,' 32 97 110 100 32 32 105 115 32 97 32 32 104 97 110 100 121 32 32 5'
zz=:zz,'5 32 32 98 105 116 32 32 65 83 67 73 73 10 114 101 112 114 101 115 '
zz=:zz,'101 110 116 97 116 105 111 110 32 111 102 32 117 110 105 99 111 100'
zz=:zz,' 101 32 99 104 97 114 97 99 116 101 114 115 46 10 10 65 32 110 117 '
zz=:zz,'109 98 101 114 32 32 111 102 32 117 116 105 108 105 116 121 32 112 '
zz=:zz,'114 111 103 114 97 109 115 32 32 108 105 107 101 32 66 97 98 101 10'
zz=:zz,'8 77 97 112 46 101 120 101 32 112 114 111 100 117 99 101 32 116 104'
zz=:zz,' 105 115 10 114 101 112 114 101 115 101 110 116 97 116 105 111 110 '
zz=:zz,'46 10 10 118 101 114 98 97 116 105 109 58 10 10 32 32 32 104 116 11'
zz=:zz,'6 112 58 47 47 119 119 119 46 98 97 98 101 108 115 116 111 110 101 '
zz=:zz,'46 99 111 46 117 107 47 83 111 102 116 119 97 114 101 47 66 97 98 1'
zz=:zz,'01 108 77 97 112 46 104 116 109 108 10 10 109 111 110 97 100 58 32 '
zz=:zz,'32 105 108 32 61 46 32 117 99 112 102 114 110 99 114 100 32 99 108 '
zz=:zz,'78 99 114 10 10 32 32 78 66 46 32 109 105 120 32 111 102 32 117 110'
zz=:zz,' 105 99 111 100 101 32 99 104 97 114 97 99 116 101 114 115 32 97 11'
zz=:zz,'5 32 78 67 82 32 100 101 99 105 109 97 108 10 32 32 117 99 61 46 32'
zz=:zz,' 39 38 35 50 56 55 53 54 59 38 35 50 56 55 56 57 59 38 35 50 56 56 '
zz=:zz,'52 52 59 38 35 50 56 55 55 51 59 38 35 51 51 51 54 59 38 35 51 51 5'
zz=:zz,'5 50 59 38 35 51 51 54 56 59 38 35 51 51 54 54 59 38 35 51 52 51 53'
zz=:zz,' 59 39 10 10 32 32 99 112 61 46 32 117 99 112 102 114 110 99 114 10'
zz=:zz,'0 32 117 99 32 32 78 66 46 32 99 111 110 118 101 114 116 32 116 111'
zz=:zz,' 32 99 111 100 101 32 112 111 105 110 116 115 10 10 10 32 32 78 66 '
zz=:zz,'46 32 117 116 102 56 32 114 101 112 114 101 115 101 110 116 97 116 '
zz=:zz,'105 111 110 32 115 101 101 58 32 117 116 102 56 102 114 110 99 114 '
zz=:zz,'100 10 32 32 56 32 117 58 32 52 32 117 58 32 99 112 10 10 124 119 1'
zz=:zz,'01 101 107 100 97 121 124 42 119 101 101 107 100 97 121 32 118 45 4'
zz=:zz,'5 32 100 97 121 32 111 102 32 119 101 101 107 46 10 10 82 101 116 1'
zz=:zz,'17 114 110 115 32 119 101 101 107 100 97 121 32 32 102 114 111 109 '
zz=:zz,'32 100 97 116 101 44 32 48 61 83 117 110 100 97 121 32 46 46 46 32 '
zz=:zz,'54 61 83 97 116 117 114 100 97 121 32 97 114 103 117 109 101 110 11'
zz=:zz,'6 115 10 115 97 109 101 115 32 97 115 32 40 116 111 100 97 121 110 '
zz=:zz,'111 41 46 32 70 114 111 109 32 74 32 115 116 97 110 100 97 114 100 '
zz=:zz,'32 108 105 98 114 97 114 121 32 40 100 97 116 101 115 41 46 10 10 1'
zz=:zz,'18 101 114 98 97 116 105 109 58 32 101 120 97 109 112 108 101 115 1'
zz=:zz,'0 10 32 32 32 119 101 101 107 100 97 121 32 49 57 57 55 32 53 32 50'
zz=:zz,' 51 10 53 10 32 32 32 49 32 119 101 101 107 100 97 121 32 49 57 57 '
zz=:zz,'55 48 53 50 51 10 53 10 10 124 119 101 101 107 115 105 110 121 101 '
zz=:zz,'97 114 124 42 119 101 101 107 115 105 110 121 101 97 114 32 118 45 '
zz=:zz,'45 32 119 101 101 107 115 32 105 110 32 121 101 97 114 46 13 10 13 '
zz=:zz,'10 73 110 32 116 104 101 32 73 83 79 32 32 56 54 48 49 32 99 97 108'
zz=:zz,' 101 110 100 97 114 32 97 32 32 119 101 101 107 32 32 115 116 97 11'
zz=:zz,'4 116 115 32 32 111 110 32 109 111 110 100 97 121 46 32 32 70 114 1'
zz=:zz,'11 109 32 74 13 10 108 105 98 114 97 114 121 32 40 100 97 116 101 1'
zz=:zz,'15 41 46 13 10 13 10 118 101 114 98 97 116 105 109 58 13 10 13 10 3'
zz=:zz,'2 32 119 101 101 107 115 105 110 121 101 97 114 61 58 32 49 51 32 5'
zz=:zz,'8 32 39 53 50 43 32 43 46 47 34 49 32 91 32 52 61 119 101 101 107 1'
zz=:zz,'00 97 121 40 49 32 49 44 58 49 50 32 51 49 41 44 34 48 32 49 47 126'
zz=:zz,' 32 121 39 13 10 13 10 32 32 32 32 119 101 101 107 115 105 110 121 '
zz=:zz,'101 97 114 32 50 48 48 48 32 43 32 105 46 49 48 13 10 32 32 53 50 3'
zz=:zz,'2 53 50 32 53 50 32 53 50 32 53 51 32 53 50 32 53 50 32 53 50 32 53'
zz=:zz,' 50 32 53 51 13 10 13 10{a.                                        '
zz=:4248{.zz
showpass 0 9 put ". ".'zz_',SOLOCALE,'_' [ cocurrent 'base' NB.{*JOD*}
".soclear NB.{*JOD*}

cocurrent SO__JODobj NB.{*JOD*}
zz=:''
zz=:zz,'7 2$<;.(_1) 124 99 117 116 110 101 115 116 105 100 120 48 49 124 78'
zz=:zz,' 66 46 42 99 117 116 110 101 115 116 105 100 120 48 49 32 115 45 45'
zz=:zz,' 32 116 97 117 116 111 108 111 103 121 32 116 101 115 116 32 111 10'
zz=:zz,'2 32 40 99 117 116 110 101 115 116 105 100 120 41 46 13 10 78 66 46'
zz=:zz,' 13 10 78 66 46 32 118 101 114 98 97 116 105 109 58 32 97 115 115 1'
zz=:zz,'17 109 101 115 40 99 117 116 110 101 115 116 105 100 120 41 32 97 1'
zz=:zz,'10 100 32 100 101 112 101 110 100 101 110 116 115 32 108 111 97 100'
zz=:zz,' 101 100 32 105 110 116 111 32 98 97 115 101 32 108 111 99 97 108 1'
zz=:zz,'01 46 13 10 78 66 46 13 10 78 66 46 32 32 32 103 101 116 114 120 32'
zz=:zz,' 39 99 117 116 110 101 115 116 105 100 120 39 32 13 10 78 66 46 13 '
zz=:zz,'10 78 66 46 32 99 114 101 97 116 101 100 58 32 50 48 49 50 102 101 '
zz=:zz,'98 48 53 13 10 78 66 46 32 45 45 45 45 45 45 45 45 45 45 45 45 45 4'
zz=:zz,'5 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45'
zz=:zz,' 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 '
zz=:zz,'45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 13 10 7'
zz=:zz,'8 66 46 32 49 50 102 101 98 48 54 32 105 110 118 97 108 105 100 32 '
zz=:zz,'116 101 115 116 115 32 97 100 100 101 100 13 10 78 66 46 32 49 50 1'
zz=:zz,'02 101 98 48 56 32 100 101 103 101 110 101 114 97 116 101 32 97 116'
zz=:zz,' 111 109 32 97 114 103 117 109 101 110 116 32 116 101 115 116 115 3'
zz=:zz,'2 97 100 100 101 100 13 10 13 10 78 66 46 32 115 105 109 112 108 10'
zz=:zz,'1 32 116 101 115 116 32 111 102 32 98 101 103 105 110 32 97 110 100'
zz=:zz,' 32 101 110 100 32 100 101 108 105 109 105 116 101 114 32 98 97 108'
zz=:zz,' 97 110 99 101 32 101 108 105 109 105 110 97 116 101 115 13 10 78 6'
zz=:zz,'6 46 32 116 104 101 32 110 101 101 100 32 116 111 32 99 111 110 115'
zz=:zz,' 105 100 101 114 32 97 110 121 116 104 105 110 103 32 98 117 116 32'
zz=:zz,' 110 97 105 118 101 108 121 32 98 97 108 97 110 99 101 100 32 100 1'
zz=:zz,'01 108 105 109 105 116 101 114 115 46 13 10 13 10 78 66 46 32 100 1'
zz=:zz,'01 108 105 109 105 116 101 114 32 116 97 103 115 32 40 120 109 108 '
zz=:zz,'41 13 10 100 116 97 103 115 61 58 32 39 60 111 108 62 39 59 39 60 4'
zz=:zz,'7 111 108 62 39 13 10 13 10 78 66 46 32 50 44 32 51 44 32 52 44 32 '
zz=:zz,'46 46 46 32 98 101 103 105 110 61 49 44 32 101 110 100 61 95 49 32 '
zz=:zz,'112 97 116 116 101 114 110 115 13 10 98 101 108 105 115 116 115 61 '
zz=:zz,'58 32 49 32 95 49 32 35 126 32 93 13 10 13 10 78 66 46 32 97 108 10'
zz=:zz,'8 32 117 110 105 113 117 101 32 112 101 114 109 117 116 97 116 105 '
zz=:zz,'111 110 115 32 111 102 32 97 32 108 105 115 116 13 10 117 112 101 1'
zz=:zz,'14 109 115 61 58 32 49 51 32 58 32 39 126 46 32 40 105 46 33 35 121'
zz=:zz,' 41 32 65 46 32 121 39 13 10 13 10 78 66 46 32 97 108 108 32 117 11'
zz=:zz,'0 105 113 117 101 32 98 101 103 105 110 32 101 110 100 32 100 101 1'
zz=:zz,'12 116 104 32 51 32 112 97 116 116 101 114 110 115 13 10 78 66 46 1'
zz=:zz,'3 10 78 66 46 32 32 32 117 112 101 114 109 115 32 98 101 108 105 11'
zz=:zz,'5 116 115 32 51 13 10 13 10 78 66 46 32 110 117 109 98 101 114 32 1'
zz=:zz,'11 102 32 117 110 105 113 117 101 32 98 101 103 105 110 32 101 110 '
zz=:zz,'100 32 112 97 116 116 101 114 110 115 32 116 111 32 100 101 112 116'
zz=:zz,' 104 32 53 13 10 78 66 46 32 99 111 117 110 116 115 32 98 101 121 1'
zz=:zz,'11 117 110 100 32 53 32 119 105 108 108 32 111 102 116 101 110 32 9'
zz=:zz,'8 108 111 119 32 111 117 116 32 109 101 109 111 114 121 32 40 102 9'
zz=:zz,'7 99 116 111 114 105 97 108 115 41 13 10 78 66 46 13 10 78 66 46 32'
zz=:zz,' 32 35 38 62 32 117 112 101 114 109 115 38 46 62 32 60 64 98 101 10'
zz=:zz,'8 105 115 116 115 34 48 38 46 93 32 62 58 32 105 46 32 53 13 10 13 '
zz=:zz,'10 78 66 46 32 116 101 115 116 32 112 97 116 116 101 114 110 115 13'
zz=:zz,' 10 116 112 61 58 32 117 112 101 114 109 115 38 46 62 32 60 64 98 1'
zz=:zz,'01 108 105 115 116 115 34 48 38 46 93 32 62 58 32 105 46 32 53 13 1'
zz=:zz,'0 13 10 78 66 46 32 98 97 108 97 110 99 101 100 32 116 101 115 116 '
zz=:zz,'32 112 97 116 116 101 114 110 115 46 32 84 104 101 32 112 108 117 1'
zz=:zz,'15 32 115 99 97 110 32 43 47 92 32 111 102 32 116 101 115 116 13 10'
zz=:zz,' 78 66 46 32 112 97 116 116 101 114 110 32 114 111 119 115 32 99 97'
zz=:zz,' 110 32 110 101 118 101 114 32 98 101 99 111 109 101 32 110 101 103'
zz=:zz,' 97 116 105 118 101 46 32 65 110 121 32 114 111 119 13 10 78 66 46 '
zz=:zz,'32 119 105 116 104 32 110 101 103 97 116 105 118 101 115 32 104 97 '
zz=:zz,'115 32 101 120 101 99 101 115 115 105 118 101 32 100 101 108 105 10'
zz=:zz,'9 105 116 101 114 32 101 110 100 115 32 98 101 102 111 114 101 32 9'
zz=:zz,'8 101 103 105 110 115 13 10 98 97 108 116 112 61 58 32 49 51 32 58 '
zz=:zz,'32 39 121 32 32 35 126 32 40 42 46 47 34 49 41 32 48 32 60 58 32 40'
zz=:zz,' 43 47 92 34 49 41 32 121 39 13 10 13 10 78 66 46 32 99 111 117 110'
zz=:zz,' 116 32 98 97 108 97 110 99 101 100 32 112 97 116 116 101 114 110 1'
zz=:zz,'15 32 116 111 32 100 101 112 116 104 32 53 13 10 78 66 46 32 35 64 '
zz=:zz,'98 97 108 116 112 38 62 32 116 112 13 10 13 10 78 66 46 32 98 97 10'
zz=:zz,'8 97 110 99 101 100 32 112 97 116 116 101 114 110 115 13 10 98 112 '
zz=:zz,'61 58 32 98 97 108 116 112 38 46 62 32 116 112 13 10 13 10 78 66 46'
zz=:zz,' 32 117 110 98 97 108 97 110 99 101 100 32 40 98 97 100 41 32 112 9'
zz=:zz,'7 116 116 101 114 110 115 13 10 117 98 112 61 58 32 40 93 32 45 46 '
zz=:zz,'32 98 97 108 116 112 41 38 46 62 32 116 112 13 10 13 10 78 66 46 32'
zz=:zz,' 112 108 117 115 32 115 99 97 110 115 32 111 102 32 98 97 108 97 11'
zz=:zz,'0 99 101 100 32 112 97 116 116 101 114 110 115 32 101 110 100 32 10'
zz=:zz,'5 110 32 48 13 10 78 66 46 32 98 97 99 107 32 99 117 116 116 105 11'
zz=:zz,'0 103 32 111 110 32 116 104 101 32 98 97 108 97 110 99 101 100 32 1'
zz=:zz,'14 111 119 32 115 99 97 110 115 32 119 105 116 104 13 10 78 66 46 3'
zz=:zz,'2 48 32 115 112 108 105 116 115 32 116 104 101 32 112 97 116 116 10'
zz=:zz,'1 114 110 115 32 105 110 116 111 32 112 114 111 112 101 114 32 110 '
zz=:zz,'101 115 116 101 100 32 114 117 110 115 13 10 78 66 46 32 110 114 61'
zz=:zz,' 58 32 60 59 46 95 50 34 49 38 46 62 32 43 47 92 34 49 32 38 46 62 '
zz=:zz,'32 98 112 13 10 13 10 78 66 46 32 101 120 112 97 110 100 115 32 97 '
zz=:zz,'110 121 32 115 105 110 103 108 101 32 118 97 108 105 100 32 114 111'
zz=:zz,' 119 32 102 114 111 109 32 116 101 115 116 32 112 97 116 116 101 11'
zz=:zz,'4 110 115 32 116 111 32 109 97 116 99 104 32 116 104 101 13 10 78 6'
zz=:zz,'6 46 32 116 121 112 101 32 111 102 32 108 105 115 116 32 119 101 32'
zz=:zz,' 101 120 112 101 99 116 32 116 111 32 112 114 111 99 101 115 115 13'
zz=:zz,' 10 78 66 46 32 114 101 120 116 112 61 58 32 52 32 58 32 39 40 40 6'
zz=:zz,'3 49 123 120 41 36 48 41 44 40 59 40 62 58 63 40 35 121 41 35 48 12'
zz=:zz,'3 120 41 123 46 38 46 62 32 60 34 48 32 121 41 44 40 63 50 123 120 '
zz=:zz,'41 36 48 39 13 10 13 10 78 66 46 32 101 120 97 109 112 108 101 32 1'
zz=:zz,'17 115 101 13 10 78 66 46 13 10 78 66 46 32 32 32 49 48 32 49 48 32'
zz=:zz,' 49 48 32 114 101 120 116 112 32 51 55 32 123 32 52 32 112 105 99 1'
zz=:zz,'07 32 98 112 13 10 13 10 78 66 46 32 101 109 112 116 121 32 97 110 '
zz=:zz,'100 32 110 111 32 116 97 103 32 99 97 115 101 115 13 10 40 40 105 4'
zz=:zz,'6 48 41 59 60 60 39 39 41 32 45 58 32 100 116 97 103 115 32 99 117 '
zz=:zz,'116 110 101 115 116 105 100 120 32 39 39 13 10 13 10 110 111 116 97'
zz=:zz,' 103 115 61 58 32 49 48 48 48 36 39 116 104 101 114 101 32 97 114 1'
zz=:zz,'01 32 110 111 32 116 97 103 115 32 104 101 114 101 39 13 10 40 40 1'
zz=:zz,'05 46 48 41 59 60 60 110 111 116 97 103 115 41 32 45 58 32 100 116 '
zz=:zz,'97 103 115 32 99 117 116 110 101 115 116 105 100 120 32 110 111 116'
zz=:zz,' 97 103 115 13 10 13 10 78 66 46 32 97 108 108 32 118 97 108 105 10'
zz=:zz,'0 32 101 109 112 116 121 32 98 97 108 97 110 99 101 100 32 112 97 1'
zz=:zz,'16 116 101 114 110 115 32 116 111 32 100 101 112 116 104 32 53 13 1'
zz=:zz,'0 118 112 61 58 32 59 32 60 34 49 64 58 59 34 49 38 46 62 32 40 95 '
zz=:zz,'49 32 61 32 76 58 48 32 98 112 41 32 123 38 46 62 32 60 100 116 97 '
zz=:zz,'103 115 13 10 13 10 78 66 46 32 112 97 114 115 101 32 97 108 108 32'
zz=:zz,' 101 109 112 116 121 32 118 97 108 105 100 32 112 97 116 116 101 11'
zz=:zz,'4 110 115 13 10 99 112 61 58 32 40 60 100 116 97 103 115 41 32 99 1'
zz=:zz,'17 116 110 101 115 116 105 100 120 38 62 32 118 112 13 10 13 10 78 '
zz=:zz,'66 46 32 108 101 110 103 116 104 115 32 111 102 32 101 109 112 116 '
zz=:zz,'121 32 112 97 116 116 101 114 110 115 32 109 117 115 116 32 109 97 '
zz=:zz,'116 99 104 32 99 117 116 32 108 101 110 103 116 104 115 32 40 110 1'
zz=:zz,'11 116 32 116 114 117 101 32 102 111 114 32 110 111 110 101 109 112'
zz=:zz,' 116 121 41 13 10 40 35 38 62 32 123 46 34 49 32 99 112 41 32 45 58'
zz=:zz,' 32 35 38 62 32 123 58 34 49 32 99 112 13 10 13 10 78 66 46 32 114 '
zz=:zz,'97 105 115 101 32 111 102 32 105 110 100 101 120 101 100 32 99 117 '
zz=:zz,'116 115 32 115 104 111 117 108 100 32 109 97 116 99 104 32 111 114 '
zz=:zz,'105 103 105 110 97 108 32 108 105 115 116 32 111 102 32 101 109 112'
zz=:zz,' 116 121 32 116 101 115 116 115 13 10 118 112 32 45 58 32 59 38 46 '
zz=:zz,'62 32 40 123 46 34 49 32 99 112 41 32 123 38 46 62 32 123 58 34 49 '
zz=:zz,'32 99 112 13 10 13 10 78 66 46 32 103 101 110 101 114 97 116 101 32'
zz=:zz,' 110 111 110 101 109 112 116 121 32 98 97 108 97 110 99 101 100 32 '
zz=:zz,'112 97 116 116 101 114 110 115 32 116 111 32 100 101 112 116 104 32'
zz=:zz,' 53 13 10 100 116 101 120 116 61 58 32 39 32 115 111 109 101 32 115'
zz=:zz,' 116 117 102 102 32 104 101 114 101 32 32 97 110 100 32 116 104 101'
zz=:zz,' 114 101 32 116 104 101 110 32 60 111 108 62 32 116 104 101 110 32 '
zz=:zz,'109 111 114 101 32 115 116 117 102 102 32 105 110 32 116 104 101 32'
zz=:zz,' 109 105 100 100 108 101 39 59 39 32 109 111 114 101 32 99 114 97 1'
zz=:zz,'12 32 99 114 97 112 32 60 47 111 108 62 32 102 105 110 97 108 108 1'
zz=:zz,'21 32 116 101 114 109 105 110 97 108 32 99 114 97 112 39 13 10 118 '
zz=:zz,'112 120 61 58 32 59 32 60 34 49 64 58 59 34 49 38 46 62 32 40 95 49'
zz=:zz,' 32 61 32 76 58 48 32 98 112 41 32 123 38 46 62 32 60 100 116 101 1'
zz=:zz,'20 116 13 10 13 10 78 66 46 32 112 97 114 115 101 32 97 108 108 32 '
zz=:zz,'110 111 110 101 109 112 116 121 32 118 97 108 105 100 32 112 97 116'
zz=:zz,' 116 101 114 110 115 13 10 99 112 120 61 58 32 40 60 100 116 97 103'
zz=:zz,' 115 41 32 99 117 116 110 101 115 116 105 100 120 38 62 32 118 112 '
zz=:zz,'120 13 10 13 10 78 66 46 32 114 97 105 115 101 32 111 102 32 99 117'
zz=:zz,' 116 115 32 115 104 111 117 108 100 32 109 97 116 99 104 32 111 114'
zz=:zz,' 105 103 105 110 97 108 32 110 111 110 101 109 112 116 105 101 115 '
zz=:zz,'13 10 118 112 120 32 45 58 32 59 38 46 62 32 123 58 34 49 32 99 112'
zz=:zz,' 120 13 10 13 10 78 66 46 32 115 116 97 114 116 32 116 97 103 32 10'
zz=:zz,'9 117 115 116 32 115 116 97 114 116 32 101 97 99 104 32 105 110 100'
zz=:zz,' 101 120 101 100 32 110 101 115 116 101 100 32 114 117 110 13 10 12'
zz=:zz,'3 46 38 62 32 40 40 62 48 123 100 116 97 103 115 41 38 69 46 41 38 '
zz=:zz,'46 62 32 59 32 40 48 123 34 49 32 99 112 120 41 32 123 38 46 62 32 '
zz=:zz,'49 123 34 49 32 99 112 120 13 10 13 10 78 66 46 32 101 110 100 32 1'
zz=:zz,'16 97 103 32 109 117 115 116 32 101 110 100 32 105 110 100 101 120 '
zz=:zz,'101 100 32 110 101 115 116 101 100 32 114 117 110 13 10 123 46 38 6'
zz=:zz,'2 32 40 40 45 35 62 49 123 100 116 97 103 115 41 38 123 46 41 38 46'
zz=:zz,' 62 32 40 40 62 49 123 100 116 97 103 115 41 38 69 46 41 38 46 62 3'
zz=:zz,'2 59 32 40 48 123 34 49 32 99 112 120 41 32 123 38 46 62 32 49 123 '
zz=:zz,'34 49 32 99 112 120 13 10 13 10 78 66 46 32 105 110 118 97 108 105 '
zz=:zz,'100 32 117 110 98 97 108 97 110 99 101 100 32 112 97 116 116 101 11'
zz=:zz,'4 110 115 13 10 105 112 61 58 32 59 32 60 34 49 64 58 59 34 49 38 4'
zz=:zz,'6 62 32 40 95 49 32 61 32 76 58 48 32 117 98 112 41 32 123 38 46 62'
zz=:zz,' 32 60 100 116 97 103 115 13 10 105 112 120 61 58 32 59 32 60 34 49'
zz=:zz,' 64 58 59 34 49 38 46 62 32 40 95 49 32 61 32 76 58 48 32 117 98 11'
zz=:zz,'2 41 32 123 38 46 62 32 60 100 116 101 120 116 13 10 13 10 78 66 46'
zz=:zz,' 32 40 99 117 116 110 101 115 116 105 100 120 41 32 97 115 115 101 '
zz=:zz,'114 116 105 111 110 115 32 115 104 111 117 108 100 32 102 105 114 1'
zz=:zz,'01 32 102 111 114 32 97 108 108 32 116 104 101 115 101 32 98 97 100'
zz=:zz,' 32 98 111 121 115 13 10 40 60 100 116 97 103 115 41 32 40 99 117 1'
zz=:zz,'16 110 101 115 116 105 100 120 32 58 58 32 49 58 41 38 62 32 105 11'
zz=:zz,'2 13 10 40 60 100 116 97 103 115 41 32 40 99 117 116 110 101 115 11'
zz=:zz,'6 105 100 120 32 58 58 32 49 58 41 38 62 32 105 112 120 13 10 13 10'
zz=:zz,' 78 66 46 32 110 117 109 101 114 105 99 32 40 121 41 32 97 114 103 '
zz=:zz,'117 109 101 110 116 115 13 10 118 112 110 61 58 32 59 32 60 34 49 6'
zz=:zz,'4 58 59 34 49 38 46 62 32 40 95 49 32 61 32 76 58 48 32 98 112 41 3'
zz=:zz,'2 123 38 46 62 32 60 53 59 55 13 10 99 112 110 61 58 32 40 60 53 59'
zz=:zz,' 55 41 32 99 117 116 110 101 115 116 105 100 120 38 62 32 118 112 1'
zz=:zz,'10 13 10 13 10 78 66 46 32 114 97 105 115 101 32 111 102 32 105 110'
zz=:zz,' 100 101 120 101 100 32 99 117 116 115 32 115 104 111 117 108 100 3'
zz=:zz,'2 109 97 116 99 104 32 111 114 105 103 105 110 97 108 13 10 118 112'
zz=:zz,' 110 32 45 58 32 59 38 46 62 32 40 123 46 34 49 32 99 112 110 41 32'
zz=:zz,' 123 38 46 62 32 123 58 34 49 32 99 112 110 13 10 13 10 78 66 46 32'
zz=:zz,' 115 111 109 101 32 117 115 101 102 117 108 32 101 100 103 101 32 9'
zz=:zz,'9 111 110 100 105 116 105 111 110 115 13 10 101 49 61 58 32 39 32 3'
zz=:zz,'2 32 115 120 120 120 101 32 32 115 100 100 100 101 39 13 10 101 50 '
zz=:zz,'61 58 32 39 115 120 120 120 101 39 59 39 115 100 100 100 101 39 13 '
zz=:zz,'10 39 105 120 32 99 115 39 61 58 32 39 115 101 39 32 99 117 116 110'
zz=:zz,' 101 115 116 105 100 120 32 39 32 32 32 115 120 120 120 101 32 32 1'
zz=:zz,'15 100 100 100 101 39 13 10 40 105 120 123 99 115 41 32 45 58 32 10'
zz=:zz,'1 50 13 10 13 10 78 66 46 32 99 97 115 101 115 32 119 104 101 114 1'
zz=:zz,'01 32 116 104 101 32 112 97 100 32 109 97 116 99 104 101 115 32 97 '
zz=:zz,'32 100 101 108 105 109 105 116 101 114 32 45 32 97 115 115 101 114 '
zz=:zz,'116 105 111 110 32 116 104 114 111 119 115 13 10 40 39 32 39 59 39 '
zz=:zz,'120 39 41 32 40 99 117 116 110 101 115 116 105 100 120 32 58 58 32 '
zz=:zz,'49 58 41 32 39 32 111 111 111 111 111 111 111 120 32 117 117 117 11'
zz=:zz,'7 117 117 120 39 13 10 48 32 57 32 40 99 117 116 110 101 115 116 10'
zz=:zz,'5 100 120 32 58 58 32 49 58 41 32 48 32 50 32 50 32 50 32 50 32 48 '
zz=:zz,'32 51 32 51 32 57 32 55 32 55 32 57 13 10 13 10 78 66 46 32 100 101'
zz=:zz,' 103 101 110 101 114 97 116 101 32 97 116 111 109 32 97 114 103 117'
zz=:zz,' 109 101 110 116 115 13 10 40 40 105 46 48 41 59 60 60 39 32 39 41 '
zz=:zz,'32 45 58 32 39 115 101 39 32 99 117 116 110 101 115 116 105 100 120'
zz=:zz,' 32 39 32 39 13 10 40 40 105 46 48 41 59 60 60 49 51 41 32 45 58 32'
zz=:zz,' 53 32 54 32 99 117 116 110 101 115 116 105 100 120 32 49 51 13 10 '
zz=:zz,'13 10 13 10 13 10 13 10 13 10 13 10 13 10 13 10 13 10 124 109 97 10'
zz=:zz,'7 101 95 108 111 97 100 95 115 99 114 105 112 116 115 124 78 66 46 '
zz=:zz,'42 109 97 107 101 95 108 111 97 100 95 115 99 114 105 112 116 115 3'
zz=:zz,'2 116 45 45 32 103 101 110 101 114 97 116 101 115 32 108 111 97 100'
zz=:zz,' 32 115 99 114 105 112 116 115 32 102 111 114 32 99 117 114 114 101'
zz=:zz,' 110 116 32 100 105 99 116 105 111 110 97 114 105 101 115 46 13 10 '
zz=:zz,'78 66 46 32 13 10 78 66 46 32 97 117 116 104 111 114 58 32 32 74 11'
zz=:zz,'1 104 110 32 68 46 32 66 97 107 101 114 13 10 78 66 46 32 99 114 10'
zz=:zz,'1 97 116 101 100 58 32 50 48 48 56 106 97 110 50 53 13 10 78 66 46 '
zz=:zz,'32 99 104 97 110 103 101 115 58 32 45 45 45 45 45 45 45 45 45 45 45'
zz=:zz,' 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 '
zz=:zz,'45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 13 10 7'
zz=:zz,'8 66 46 32 48 56 110 111 118 49 48 32 103 112 115 32 117 116 105 10'
zz=:zz,'8 115 32 97 100 100 101 100 13 10 78 66 46 32 48 56 100 101 99 48 4'
zz=:zz,'9 32 99 98 104 32 114 101 110 97 109 101 100 32 102 114 97 110 107 '
zz=:zz,'108 105 110 13 10 78 66 46 32 48 57 109 97 121 50 53 32 102 108 105'
zz=:zz,' 99 107 114 32 114 101 110 97 109 101 100 32 115 109 117 103 47 101'
zz=:zz,' 120 105 102 116 111 111 108 115 44 115 109 117 103 104 97 99 107 1'
zz=:zz,'05 110 103 32 97 100 100 101 100 13 10 78 66 46 32 49 49 102 101 98'
zz=:zz,' 50 50 32 99 111 105 110 115 101 114 116 32 39 105 106 111 100 39 3'
zz=:zz,'2 97 100 100 101 100 32 45 32 114 101 118 105 115 101 100 32 102 11'
zz=:zz,'1 114 32 109 119 101 99 99 13 10 78 66 46 32 49 49 110 111 118 49 5'
zz=:zz,'2 32 108 97 116 101 120 32 117 116 105 108 115 44 32 97 110 97 108 '
zz=:zz,'121 115 116 103 114 97 112 104 115 32 114 101 112 97 116 104 101 10'
zz=:zz,'0 13 10 78 66 46 32 49 50 106 117 108 48 51 32 103 112 120 102 114 '
zz=:zz,'109 97 112 107 109 108 44 32 84 101 88 102 114 87 112 120 109 108 4'
zz=:zz,'4 32 100 98 105 32 13 10 78 66 46 32 49 50 106 117 108 49 55 32 100'
zz=:zz,' 98 105 116 101 115 116 101 114 44 32 120 109 108 117 116 105 108 1'
zz=:zz,'15 44 32 115 117 110 109 111 111 110 32 97 100 100 101 100 13 10 13'
zz=:zz,' 10 114 101 113 117 105 114 101 32 39 103 101 110 101 114 97 108 47'
zz=:zz,' 106 111 100 39 13 10 99 111 99 108 97 115 115 32 116 109 112 108 1'
zz=:zz,'11 99 95 65 65 65 108 111 115 99 114 57 57 57 95 61 58 32 39 65 65 '
zz=:zz,'65 108 111 115 99 114 57 57 57 39 32 91 32 99 111 101 114 97 115 10'
zz=:zz,'1 32 60 39 65 65 65 108 111 115 99 114 57 57 57 39 13 10 99 111 105'
zz=:zz,' 110 115 101 114 116 32 39 105 106 111 100 39 13 10 13 10 62 48 123'
zz=:zz,' 79 80 69 78 68 73 67 61 58 32 100 105 100 32 48 13 10 62 48 123 11'
zz=:zz,'1 100 32 39 117 116 105 108 115 39 32 91 32 51 32 111 100 32 39 39 '
zz=:zz,'32 32 13 10 13 10 78 66 46 32 117 116 105 108 115 32 115 99 114 105'
zz=:zz,' 112 116 115 13 10 62 48 123 115 104 111 119 112 97 115 115 32 109 '
zz=:zz,'108 115 32 39 98 115 116 97 116 115 39 13 10 62 48 123 115 104 111 '
zz=:zz,'119 112 97 115 115 32 109 108 115 32 39 120 109 108 117 116 105 108'
zz=:zz,' 115 39 13 10 62 48 123 115 104 111 119 112 97 115 115 32 109 108 1'
zz=:zz,'15 32 39 115 117 110 109 111 111 110 39 13 10 62 48 123 115 104 111'
zz=:zz,' 119 112 97 115 115 32 109 108 115 32 39 120 109 108 117 116 105 10'
zz=:zz,'8 115 39 13 10 62 48 123 51 32 111 100 32 39 39 13 10 13 10 78 66 4'
zz=:zz,'6 32 97 110 97 108 121 115 116 103 114 97 112 104 115 32 40 106 54 '
zz=:zz,'46 48 50 41 32 13 10 62 48 123 111 100 32 59 58 39 102 114 97 110 1'
zz=:zz,'07 108 105 110 32 99 98 104 32 117 116 105 108 115 39 13 10 62 48 1'
zz=:zz,'23 115 104 111 119 112 97 115 115 32 109 108 115 32 39 97 110 97 10'
zz=:zz,'8 121 115 116 103 114 97 112 104 115 39 13 10 62 48 123 51 32 111 1'
zz=:zz,'00 32 39 39 13 10 13 10 78 66 46 32 105 109 97 103 101 32 101 120 1'
zz=:zz,'05 102 32 115 99 114 105 112 116 13 10 62 48 123 111 100 32 59 58 3'
zz=:zz,'9 115 109 117 103 100 101 118 32 115 109 117 103 32 105 109 97 103 '
zz=:zz,'101 32 117 116 105 108 115 39 13 10 62 48 123 115 104 111 119 112 9'
zz=:zz,'7 115 115 32 109 108 115 32 39 101 120 105 102 39 13 10 62 48 123 1'
zz=:zz,'15 104 111 119 112 97 115 115 32 109 108 115 32 39 103 112 120 102 '
zz=:zz,'114 109 97 112 107 109 108 39 13 10 62 48 123 51 32 111 100 32 39 3'
zz=:zz,'9 13 10 13 10 78 66 46 32 106 111 100 32 97 117 120 32 115 99 114 1'
zz=:zz,'05 112 116 115 13 10 62 48 123 111 100 32 59 58 39 106 111 100 100 '
zz=:zz,'101 118 32 106 111 100 32 117 116 105 108 115 39 13 10 62 48 123 11'
zz=:zz,'5 104 111 119 112 97 115 115 32 109 108 115 32 39 106 111 100 116 1'
zz=:zz,'01 115 116 101 114 39 13 10 62 48 123 51 32 111 100 32 39 39 13 10 '
zz=:zz,'13 10 78 66 46 32 103 112 115 32 117 116 105 108 115 13 10 62 48 12'
zz=:zz,'3 111 100 32 59 58 39 103 112 115 32 117 116 105 108 115 39 13 10 6'
zz=:zz,'2 48 123 115 104 111 119 112 97 115 115 32 109 108 115 32 39 119 97'
zz=:zz,' 121 112 111 105 110 116 115 39 13 10 62 48 123 51 32 111 100 32 39'
zz=:zz,' 39 13 10 13 10 78 66 46 32 118 101 114 115 105 111 110 32 99 111 1'
zz=:zz,'17 110 116 101 114 115 32 108 97 116 101 120 47 98 108 111 103 32 1'
zz=:zz,'17 116 105 108 115 13 10 62 48 123 111 100 32 59 58 39 100 111 99 1'
zz=:zz,'15 32 117 116 105 108 115 39 13 10 62 48 123 115 104 111 119 112 97'
zz=:zz,' 115 115 32 109 108 115 32 39 87 101 101 107 115 39 13 10 62 48 123'
zz=:zz,' 115 104 111 119 112 97 115 115 32 109 108 115 32 39 77 119 101 99 '
zz=:zz,'99 84 101 88 80 114 101 112 114 111 99 101 115 115 39 13 10 62 48 1'
zz=:zz,'23 115 104 111 119 112 97 115 115 32 109 108 115 32 39 68 117 100 8'
zz=:zz,'4 101 88 80 114 101 112 114 111 99 101 115 115 39 13 10 62 48 123 1'
zz=:zz,'15 104 111 119 112 97 115 115 32 109 108 115 32 39 66 105 98 108 10'
zz=:zz,'5 111 72 101 108 112 101 114 39 13 10 62 48 123 115 104 111 119 112'
zz=:zz,' 97 115 115 32 109 108 115 32 39 84 101 88 102 114 87 112 120 109 1'
zz=:zz,'08 39 13 10 62 48 123 51 32 111 100 32 39 39 13 10 13 10 78 66 46 3'
zz=:zz,'2 109 119 101 99 99 32 115 116 117 102 102 13 10 62 48 123 111 100 '
zz=:zz,'32 59 58 39 109 119 101 99 99 32 117 116 105 108 115 39 13 10 62 48'
zz=:zz,' 123 115 104 111 119 112 97 115 115 32 109 108 115 32 39 100 98 105'
zz=:zz,' 39 13 10 62 48 123 115 104 111 119 112 97 115 115 32 109 108 115 3'
zz=:zz,'2 39 100 98 105 116 101 115 116 101 114 39 13 10 49 32 114 116 116 '
zz=:zz,'32 39 109 97 107 101 95 98 99 97 109 97 105 110 116 95 116 101 115 '
zz=:zz,'116 39 13 10 62 48 123 51 32 111 100 32 39 39 13 10 13 10 99 111 99'
zz=:zz,' 117 114 114 101 110 116 32 116 109 112 108 111 99 95 65 65 65 108 '
zz=:zz,'111 115 99 114 57 57 57 95 13 10 62 48 123 111 100 32 125 46 32 79 '
zz=:zz,'80 69 78 68 73 67 13 10 13 10 99 111 99 117 114 114 101 110 116 32 '
zz=:zz,'39 98 97 115 101 39 13 10 99 111 101 114 97 115 101 32 60 116 109 1'
zz=:zz,'12 108 111 99 95 65 65 65 108 111 115 99 114 57 57 57 95 13 10 13 1'
zz=:zz,'0 124 112 111 115 116 115 116 117 98 124 78 66 46 80 79 83 84 95 12'
zz=:zz,'3 126 84 126 125 32 112 111 115 116 32 112 114 111 99 101 115 115 1'
zz=:zz,'11 114 32 13 10 13 10 115 109 111 117 116 112 117 116 32 48 32 58 3'
zz=:zz,'2 48 13 10 78 66 46 32 105 110 116 101 114 102 97 99 101 32 119 111'
zz=:zz,' 114 100 40 115 41 58 13 10 78 66 46 32 32 32 119 111 114 100 49 32'
zz=:zz,' 32 78 66 46 32 98 108 97 104 32 98 108 97 104 13 10 78 66 46 32 32'
zz=:zz,' 32 119 111 114 100 50 32 32 78 66 46 32 121 97 100 97 32 121 97 10'
zz=:zz,'0 97 32 13 10 41 13 10 13 10 99 111 99 117 114 114 101 110 116 32 3'
zz=:zz,'9 98 97 115 101 39 13 10 99 111 105 110 115 101 114 116 32 32 39 12'
zz=:zz,'3 126 84 126 125 39 124 116 101 115 116 115 116 117 98 124 78 66 46'
zz=:zz,' 42 123 126 84 126 125 32 116 45 45 32 116 101 115 116 32 115 116 1'
zz=:zz,'17 98 46 13 10 78 66 46 13 10 78 66 46 32 84 104 105 115 32 116 101'
zz=:zz,' 115 116 32 46 46 46 46 46 32 102 111 114 109 97 116 116 101 100 32'
zz=:zz,' 116 101 120 116 13 10 78 66 46 13 10 78 66 46 32 118 101 114 98 97'
zz=:zz,' 116 105 109 58 13 10 78 66 46 32 13 10 78 66 46 32 32 32 32 32 46 '
zz=:zz,'46 46 46 32 117 110 102 111 114 109 97 116 101 100 32 116 101 120 1'
zz=:zz,'16 13 10 78 66 46 32 32 13 10 78 66 46 32 97 117 116 104 111 114 58'
zz=:zz,' 32 32 74 111 104 110 32 68 46 32 66 97 107 101 114 13 10 78 66 46 '
zz=:zz,'32 99 114 101 97 116 101 100 58 32 123 126 99 114 101 97 116 101 10'
zz=:zz,'0 126 125 13 10 78 66 46 32 99 104 97 110 103 101 115 58 32 45 45 4'
zz=:zz,'5 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45'
zz=:zz,' 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 '
zz=:zz,'45 45 45 45 45 45 13 10 78 66 46 32 50 48 49 49 102 101 98 49 52 32'
zz=:zz,' 45 32 99 111 105 110 115 101 114 116 32 39 105 106 111 100 39 32 9'
zz=:zz,'7 100 100 101 100 32 102 111 114 32 110 101 119 32 106 111 100 32 1'
zz=:zz,'05 110 116 101 114 102 97 99 101 32 108 111 99 97 108 101 13 10 13 '
zz=:zz,'10 78 66 46 42 69 82 82 79 82 61 62 32 40 119 111 114 100 41 32 102'
zz=:zz,' 97 105 108 115 32 111 110 32 46 46 46 46 13 10 78 66 46 32 123 126'
zz=:zz,' 101 114 114 111 114 116 105 109 101 126 125 13 10 13 10 78 66 46 4'
zz=:zz,'2 70 73 88 61 62 32 99 111 114 114 101 99 116 101 100 32 46 46 46 4'
zz=:zz,'6 13 10 124 116 101 115 116 115 116 117 98 67 108 97 115 115 71 114'
zz=:zz,' 111 117 112 124 78 66 46 42 123 126 84 126 125 32 115 45 45 32 111'
zz=:zz,' 110 101 32 108 105 110 101 46 13 10 78 66 46 32 13 10 78 66 46 32 '
zz=:zz,'46 46 46 46 32 116 101 120 116 32 46 46 46 46 13 10 78 66 46 13 10 '
zz=:zz,'78 66 46 32 118 101 114 98 97 116 105 109 58 13 10 78 66 46 13 10 7'
zz=:zz,'8 66 46 32 105 110 116 101 114 102 97 99 101 32 119 111 114 100 40 '
zz=:zz,'115 41 58 32 13 10 78 66 46 32 45 45 45 45 45 45 45 45 45 45 45 45 '
zz=:zz,'45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 4'
zz=:zz,'5 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45'
zz=:zz,' 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 32 '
zz=:zz,'32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 3'
zz=:zz,'2 32 32 32 32 32 32 32 32 32 13 10 78 66 46 32 119 111 114 100 49 3'
zz=:zz,'2 32 45 45 32 98 108 97 104 32 98 108 97 104 13 10 78 66 46 32 119 '
zz=:zz,'111 114 100 50 32 32 45 45 32 121 97 100 97 32 121 97 100 97 32 32 '
zz=:zz,'32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 3'
zz=:zz,'2 32 32 32 32 32 32 32 32 32 32 32 32 32 32 13 10 78 66 46 32 32 32'
zz=:zz,' 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 '
zz=:zz,'32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 3'
zz=:zz,'2 32 32 32 32 32 32 32 32 32 13 10 78 66 46 32 97 117 116 104 111 1'
zz=:zz,'14 58 32 32 123 126 65 126 125 32 32 13 10 78 66 46 32 99 114 101 9'
zz=:zz,'7 116 101 100 58 32 123 126 68 126 125 13 10 78 66 46 32 45 45 45 4'
zz=:zz,'5 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45'
zz=:zz,' 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 '
zz=:zz,'45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 4'
zz=:zz,'5 45 45 45 45 45 45 45 32 13 10 78 66 46 32 123 126 68 126 125 32 1'
zz=:zz,'03 114 111 117 112 32 99 108 97 115 115 32 99 114 101 97 116 101 10'
zz=:zz,'0 13 10 13 10 114 101 113 117 105 114 101 32 39 116 97 115 107 39 1'
zz=:zz,'3 10 13 10 99 111 99 108 97 115 115 32 39 123 126 84 126 125 39 32 '
zz=:zz,'13 10 124 116 101 115 116 115 116 117 98 76 111 110 103 68 111 99 1'
zz=:zz,'24 42 123 126 84 126 125 32 115 45 45 32 108 111 110 103 32 100 111'
zz=:zz,' 99 117 109 101 110 116 32 115 116 117 98 46 10 10 84 104 105 115 3'
zz=:zz,'2 105 115 32 46 46 46 46 46 32 102 111 114 109 97 116 116 101 100 3'
zz=:zz,'2 116 101 120 116 10 10 118 101 114 98 97 116 105 109 58 10 32 10 3'
zz=:zz,'2 32 32 32 46 46 46 46 32 117 110 102 111 114 109 97 116 101 100 32'
zz=:zz,' 116 101 120 116 10 10 109 111 110 97 100 58 32 63 63 32 61 46 32 1'
zz=:zz,'23 126 84 126 125 32 63 63 10 10 100 121 97 100 58 32 63 63 32 61 4'
zz=:zz,'6 32 63 63 32 123 126 84 126 125 32 63 63 10 10 124 116 101 115 116'
zz=:zz,' 115 116 117 98 83 116 97 110 100 97 114 100 124 78 66 46 42 123 12'
zz=:zz,'6 84 126 125 32 116 45 45 32 116 101 115 116 32 115 116 117 98 46 1'
zz=:zz,'3 10 78 66 46 13 10 78 66 46 32 84 104 105 115 32 116 101 115 116 3'
zz=:zz,'2 46 46 46 46 46 32 102 111 114 109 97 116 116 101 100 32 116 101 1'
zz=:zz,'20 116 13 10 78 66 46 13 10 78 66 46 32 118 101 114 98 97 116 105 1'
zz=:zz,'09 58 13 10 78 66 46 32 13 10 78 66 46 32 32 32 32 32 46 46 46 46 3'
zz=:zz,'2 117 110 102 111 114 109 97 116 101 100 32 116 101 120 116 13 10 7'
zz=:zz,'8 66 46 32 32 13 10 78 66 46 32 97 117 116 104 111 114 58 32 32 74 '
zz=:zz,'111 104 110 32 68 46 32 66 97 107 101 114 13 10 78 66 46 32 99 114 '
zz=:zz,'101 97 116 101 100 58 32 123 126 99 114 101 97 116 101 100 126 125 '
zz=:zz,'13 10 78 66 46 32 99 104 97 110 103 101 115 58 32 45 45 45 45 45 45'
zz=:zz,' 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 '
zz=:zz,'45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 4'
zz=:zz,'5 45 45 13 10 78 66 46 32 50 48 49 49 102 101 98 49 52 32 45 32 99 '
zz=:zz,'111 105 110 115 101 114 116 32 39 105 106 111 100 39 32 97 100 100 '
zz=:zz,'101 100 32 102 111 114 32 110 101 119 32 106 111 100 32 105 110 116'
zz=:zz,' 101 114 102 97 99 101 32 108 111 99 97 108 101 13 10 13 10 78 66 4'
zz=:zz,'6 42 69 82 82 79 82 61 62 32 40 119 111 114 100 41 32 102 97 105 10'
zz=:zz,'8 115 32 111 110 32 46 46 46 46 13 10 78 66 46 32 123 126 101 114 1'
zz=:zz,'14 111 114 116 105 109 101 126 125 13 10 13 10 78 66 46 42 70 73 88'
zz=:zz,' 61 62 32 99 111 114 114 101 99 116 101 100 32 46 46 46 46 13 10{a.'
zz=:25192{.zz
showpass 1 put ". ".'zz_',SOLOCALE,'_' [ cocurrent 'base' NB.{*JOD*}
".soclear NB.{*JOD*}

cocurrent SO__JODobj NB.{*JOD*}
zz=:''
zz=:zz,'2 2$<;._1 ''|cutnestidx01|tautology test of (cutnestidx)|make_load_s'
zz=:zz,'cripts|generates load scripts for current dictionaries''            '
zz=:122{.zz
showpass 1 8 put ". ".'zz_',SOLOCALE,'_' [ cocurrent 'base' NB.{*JOD*}
".soclear NB.{*JOD*}

cocurrent SO__JODobj NB.{*JOD*}
zz=:''
zz=:zz,'9 3$''POST_htmthorn'';21;(78 66 46 80 79 83 84 95 104 116 109 116 104'
zz=:zz,' 111 114 110 32 112 111 115 116 32 112 114 111 99 101 115 115 111 1'
zz=:zz,'14 46 13 10 13 10 115 109 111 117 116 112 117 116 32 48 32 58 32 48'
zz=:zz,' 13 10 78 66 46 32 105 110 116 101 114 102 97 99 101 32 119 111 114'
zz=:zz,' 100 40 115 41 58 13 10 78 66 46 32 32 32 116 104 104 32 32 78 66 4'
zz=:zz,'6 32 106 32 97 114 114 97 121 32 102 111 114 109 97 116 32 105 110 '
zz=:zz,'32 72 84 77 76 13 10 41 13 10 13 10 99 111 99 117 114 114 101 110 1'
zz=:zz,'16 32 39 98 97 115 101 39 13 10 99 111 105 110 115 101 114 116 32 3'
zz=:zz,'2 39 104 116 109 116 104 111 114 110 39{a.);''POST_sunmoon'';21;(78 6'
zz=:zz,'6 46 80 79 83 84 95 115 117 110 109 111 111 110 32 112 111 115 116 '
zz=:zz,'32 112 114 111 99 101 115 115 111 114 46 13 10 13 10 115 109 111 11'
zz=:zz,'7 116 112 117 116 32 48 32 58 32 48 13 10 78 66 46 32 105 110 116 1'
zz=:zz,'01 114 102 97 99 101 32 119 111 114 100 40 115 41 58 13 10 78 66 46'
zz=:zz,' 32 99 97 108 109 111 111 110 115 32 32 32 32 32 78 66 46 32 99 97 '
zz=:zz,'108 101 110 100 97 114 32 100 97 116 101 115 32 111 102 32 110 101 '
zz=:zz,'119 32 97 110 100 32 102 117 108 108 32 109 111 111 110 115 13 10 7'
zz=:zz,'8 66 46 32 109 111 111 110 115 32 32 32 32 32 32 32 32 78 66 46 32 '
zz=:zz,'116 105 109 101 115 32 111 102 32 110 101 119 32 97 110 100 32 102 '
zz=:zz,'117 108 108 32 109 111 111 110 115 32 102 111 114 32 110 32 99 97 1'
zz=:zz,'08 101 110 100 97 114 32 121 101 97 114 115 13 10 78 66 46 32 115 1'
zz=:zz,'17 110 114 105 115 101 115 101 116 48 32 32 78 66 46 32 99 111 109 '
zz=:zz,'112 117 116 101 115 32 115 117 110 32 114 105 115 101 32 97 110 100'
zz=:zz,' 32 115 101 116 32 116 105 109 101 115 32 45 32 115 101 101 32 108 '
zz=:zz,'111 110 103 32 100 111 99 117 109 101 110 116 97 116 105 111 110 13'
zz=:zz,' 10 78 66 46 32 115 117 110 114 105 115 101 115 101 116 49 32 32 78'
zz=:zz,' 66 46 32 99 111 109 112 117 116 101 115 32 115 117 110 32 114 105 '
zz=:zz,'115 101 32 97 110 100 32 115 101 116 32 116 105 109 101 115 32 45 3'
zz=:zz,'2 115 101 101 32 108 111 110 103 32 100 111 99 117 109 101 110 116 '
zz=:zz,'97 116 105 111 110 13 10 41 13 10 13 10 99 111 99 117 114 114 101 1'
zz=:zz,'10 116 32 39 98 97 115 101 39 13 10 99 111 105 110 115 101 114 116 '
zz=:zz,'32 32 39 115 117 110 109 111 111 110 39{a.);''POST_thorn'';21;(78 66 '
zz=:zz,'46 80 79 83 84 95 116 104 111 114 110 32 112 111 115 116 32 112 114'
zz=:zz,' 111 99 101 115 115 111 114 46 32 13 10 13 10 115 109 111 117 116 1'
zz=:zz,'12 117 116 32 48 32 58 32 48 13 10 78 66 46 32 105 110 116 101 114 '
zz=:zz,'102 97 99 101 32 119 111 114 100 40 115 41 58 13 10 78 66 46 32 32 '
zz=:zz,'32 119 111 114 100 49 32 32 78 66 46 32 98 108 97 104 32 98 108 97 '
zz=:zz,'104 13 10 78 66 46 32 32 32 119 111 114 100 50 32 32 78 66 46 32 12'
zz=:zz,'1 97 100 97 32 121 97 100 97 32 13 10 41 13 10 13 10 99 111 99 117 '
zz=:zz,'114 114 101 110 116 32 39 98 97 115 101 39 13 10 99 111 105 110 115'
zz=:zz,' 101 114 116 32 32 39 116 104 111 114 110 39{a.);''dios'';21;(78 66 4'
zz=:zz,'6 42 100 105 111 115 32 115 45 45 32 100 117 109 112 32 99 117 114 '
zz=:zz,'114 101 110 116 32 112 117 116 32 74 79 68 32 100 105 99 116 105 11'
zz=:zz,'1 110 97 114 121 32 111 110 32 73 79 83 46 13 10 78 66 46 13 10 78 '
zz=:zz,'66 46 32 99 114 101 97 116 101 100 58 32 50 48 49 50 106 117 108 49'
zz=:zz,' 48 13 10 78 66 46 32 99 104 97 110 103 101 115 58 32 45 45 45 45 4'
zz=:zz,'5 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45'
zz=:zz,' 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 '
zz=:zz,'45 45 45 45 13 10 13 10 99 111 99 108 97 115 115 32 32 116 109 112 '
zz=:zz,'108 111 99 95 65 65 65 116 114 97 115 104 57 57 57 95 32 61 58 39 6'
zz=:zz,'5 65 65 116 114 97 115 104 57 57 57 39 32 91 32 99 111 101 114 97 1'
zz=:zz,'15 101 32 60 39 65 65 65 116 114 97 115 104 57 57 57 39 13 10 99 11'
zz=:zz,'1 105 110 115 101 114 116 32 39 105 106 111 100 39 13 10 13 10 78 6'
zz=:zz,'6 46 32 108 105 115 116 32 97 110 100 32 99 108 111 115 101 13 10 1'
zz=:zz,'11 111 111 61 58 32 125 46 32 100 105 100 32 48 13 10 51 32 111 100'
zz=:zz,' 32 39 39 13 10 13 10 78 66 46 32 100 117 109 112 32 112 117 116 32'
zz=:zz,' 97 110 100 32 111 112 101 110 32 105 110 32 73 79 83 32 101 100 10'
zz=:zz,'5 116 111 114 13 10 111 100 99 105 111 115 61 58 32 51 32 58 32 48 '
zz=:zz,'13 10 116 114 121 46 13 10 13 10 32 32 105 102 46 32 45 46 73 70 73'
zz=:zz,' 79 83 32 100 111 46 32 115 109 111 117 116 112 117 116 32 48 59 39'
zz=:zz,' 110 111 116 32 111 110 32 73 79 83 39 32 114 101 116 117 114 110 4'
zz=:zz,'6 32 101 110 100 46 13 10 13 10 32 32 111 100 32 121 13 10 32 32 10'
zz=:zz,'5 102 46 32 98 97 100 114 99 95 97 106 111 100 95 32 114 61 46 32 1'
zz=:zz,'09 97 107 101 32 39 39 32 100 111 46 32 115 109 111 117 116 112 117'
zz=:zz,' 116 32 114 32 114 101 116 117 114 110 46 32 101 110 100 46 13 10 3'
zz=:zz,'2 32 106 101 95 122 95 32 59 123 58 114 13 10 13 10 99 97 116 99 10'
zz=:zz,'4 100 46 13 10 32 32 115 109 111 117 116 112 117 116 32 39 117 110 '
zz=:zz,'97 98 108 101 32 116 111 32 101 100 105 116 47 100 105 115 112 108 '
zz=:zz,'97 121 32 100 117 109 112 32 45 62 32 39 59 114 13 10 101 110 100 4'
zz=:zz,'6 13 10 41 13 10 13 10 111 100 99 105 111 115 32 62 48 123 111 111 '
zz=:zz,'111 13 10 111 100 32 111 111 111 13 10 13 10 99 111 99 117 114 114 '
zz=:zz,'101 110 116 32 39 98 97 115 101 39 13 10 99 111 101 114 97 115 101 '
zz=:zz,'32 60 116 109 112 108 111 99 95 65 65 65 116 114 97 115 104 57 57 5'
zz=:zz,'7 95 13 10{a.);''dumpput'';21;(78 66 46 42 100 117 109 112 112 117 11'
zz=:zz,'6 46 105 106 115 32 32 115 45 45 32 100 117 109 112 32 99 117 114 1'
zz=:zz,'14 101 110 116 32 112 117 116 32 74 79 68 32 100 105 99 116 105 111'
zz=:zz,' 110 97 114 121 46 13 10 78 66 46 13 10 78 66 46 32 99 104 97 110 1'
zz=:zz,'03 101 115 58 32 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45'
zz=:zz,' 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 '
zz=:zz,'45 45 45 45 45 45 45 45 45 45 45 45 45 45 13 10 78 66 46 32 49 49 1'
zz=:zz,'09 97 121 50 52 32 109 111 100 105 102 105 101 100 32 116 111 32 11'
zz=:zz,'4 117 110 32 111 110 32 98 111 116 104 32 119 105 110 32 97 110 100'
zz=:zz,' 32 108 105 110 117 120 13 10 78 66 46 32 49 49 111 99 116 51 49 32'
zz=:zz,' 119 114 105 116 101 32 116 111 32 68 114 111 112 98 111 120 32 102'
zz=:zz,' 111 108 100 101 114 32 13 10 78 66 46 32 49 49 110 111 118 50 56 3'
zz=:zz,'2 116 117 114 110 32 111 110 32 115 121 110 99 104 32 119 114 105 1'
zz=:zz,'16 101 32 102 111 114 32 108 105 110 117 120 32 13 10 78 66 46 32 4'
zz=:zz,'9 50 97 117 103 49 54 32 99 104 101 99 107 32 101 120 105 115 116 1'
zz=:zz,'01 110 99 101 32 111 102 32 110 111 110 101 109 112 116 121 32 100 '
zz=:zz,'114 111 112 98 111 120 32 100 105 114 101 99 116 111 114 121 13 10 '
zz=:zz,'13 10 99 111 99 108 97 115 115 32 32 116 109 112 108 111 99 95 65 6'
zz=:zz,'5 65 116 114 97 115 104 57 57 57 95 32 61 58 39 65 65 65 116 114 97'
zz=:zz,' 115 104 57 57 57 39 32 91 32 99 111 101 114 97 115 101 32 60 39 65'
zz=:zz,' 65 65 116 114 97 115 104 57 57 57 39 13 10 99 111 105 110 115 101 '
zz=:zz,'114 116 32 39 105 106 111 100 39 13 10 13 10 78 66 46 32 109 97 105'
zz=:zz,' 110 32 114 111 111 116 32 111 102 32 112 114 105 109 97 114 121 32'
zz=:zz,' 106 111 100 32 106 117 109 112 115 32 13 10 68 85 77 80 80 65 84 7'
zz=:zz,'2 61 58 32 39 47 106 111 100 47 106 55 48 49 47 106 111 100 100 117'
zz=:zz,' 109 112 115 47 39 13 10 13 10 78 66 46 32 114 111 111 116 32 111 1'
zz=:zz,'02 32 115 121 110 99 104 32 102 111 108 100 101 114 13 10 68 82 79 '
zz=:zz,'80 66 79 88 61 58 39 47 100 98 47 68 114 111 112 98 111 120 47 106 '
zz=:zz,'111 100 100 117 109 112 115 47 39 13 10 13 10 78 66 46 32 114 101 1'
zz=:zz,'16 117 114 110 115 32 114 101 115 117 108 116 32 111 102 32 108 105'
zz=:zz,' 110 117 120 47 117 110 105 120 32 99 111 109 109 97 110 100 115 32'
zz=:zz,' 97 115 32 116 101 120 116 32 115 116 114 105 110 103 13 10 104 111'
zz=:zz,' 115 116 61 58 91 58 32 50 33 58 48 32 39 40 39 34 95 32 44 32 93 3'
zz=:zz,'2 44 32 39 32 124 124 32 116 114 117 101 41 39 34 95 13 10 13 10 78'
zz=:zz,' 66 46 32 109 97 107 101 32 97 32 100 105 114 101 99 116 111 114 12'
zz=:zz,'1 32 40 49 32 115 117 99 99 101 115 115 44 32 48 32 102 97 105 108 '
zz=:zz,'117 114 101 41 13 10 109 97 107 101 100 105 114 61 58 49 33 58 53 3'
zz=:zz,'2 58 58 48 58 13 10 13 10 78 66 46 32 108 105 115 116 32 97 110 100'
zz=:zz,' 32 99 108 111 115 101 13 10 111 111 111 61 58 32 125 46 32 100 105'
zz=:zz,' 100 32 48 13 10 51 32 111 100 32 39 39 13 10 13 10 115 104 111 119'
zz=:zz,' 112 97 115 115 61 58 93 32 91 32 49 33 58 50 38 50 13 10 13 10 78 '
zz=:zz,'66 46 32 111 112 101 110 32 97 110 100 32 100 117 109 112 32 111 11'
zz=:zz,'0 32 80 82 73 77 65 82 89 13 10 111 100 99 61 58 32 52 32 58 32 48 '
zz=:zz,'13 10 111 100 32 121 13 10 73 74 83 61 46 121 44 39 46 105 106 115 '
zz=:zz,'39 13 10 13 10 39 100 117 109 112 32 100 114 111 112 39 61 46 32 12'
zz=:zz,'0 13 10 13 10 78 66 46 32 99 114 101 97 116 101 32 112 114 105 109 '
zz=:zz,'97 114 121 32 100 117 109 112 32 100 105 114 101 99 116 111 114 121'
zz=:zz,' 32 105 102 32 110 101 101 100 101 100 13 10 105 102 46 32 73 70 87'
zz=:zz,' 73 78 32 100 111 46 32 80 82 73 77 65 82 89 61 58 32 39 99 58 39 4'
zz=:zz,'4 100 117 109 112 32 101 108 115 101 46 32 80 82 73 77 65 82 89 61 '
zz=:zz,'58 32 40 76 70 32 45 46 126 32 104 111 115 116 32 39 101 99 104 111'
zz=:zz,' 32 36 72 79 77 69 39 41 44 100 117 109 112 32 101 110 100 46 13 10'
zz=:zz,' 112 114 105 109 97 114 121 61 46 32 80 82 73 77 65 82 89 44 73 74 '
zz=:zz,'83 32 91 32 109 97 107 101 100 105 114 32 60 80 82 73 77 65 82 89 1'
zz=:zz,'3 10 13 10 78 66 46 32 115 101 116 32 115 121 110 99 104 32 102 105'
zz=:zz,' 108 101 13 10 105 102 46 32 73 70 87 73 78 32 100 111 46 32 83 89 '
zz=:zz,'78 67 72 61 58 32 39 99 58 39 44 100 114 111 112 32 101 108 115 101'
zz=:zz,' 46 32 83 89 78 67 72 61 58 32 40 76 70 32 45 46 126 32 104 111 115'
zz=:zz,' 116 32 39 101 99 104 111 32 36 72 79 77 69 39 41 44 100 114 111 11'
zz=:zz,'2 32 101 110 100 46 13 10 100 101 120 105 115 116 61 46 32 49 32 60'
zz=:zz,' 58 32 35 32 49 33 58 48 32 60 83 89 78 67 72 44 39 42 46 42 39 32 '
zz=:zz,'32 78 66 46 32 100 98 32 100 105 114 101 99 116 111 114 121 32 110 '
zz=:zz,'111 116 32 101 109 112 116 121 13 10 115 121 110 99 104 61 46 32 32'
zz=:zz,' 83 89 78 67 72 44 73 74 83 13 10 13 10 78 66 46 32 100 117 109 112'
zz=:zz,' 32 105 110 32 100 105 99 116 105 111 110 97 114 121 32 100 117 109'
zz=:zz,' 112 32 100 105 114 101 99 116 111 114 121 13 10 105 102 46 32 98 9'
zz=:zz,'7 100 114 99 95 97 106 111 100 95 32 115 104 111 119 112 97 115 115'
zz=:zz,' 32 114 61 46 32 109 97 107 101 32 39 39 32 100 111 46 48 32 48 36 '
zz=:zz,'48 32 114 101 116 117 114 110 46 32 101 110 100 46 13 10 13 10 78 6'
zz=:zz,'6 46 32 114 101 97 100 32 111 117 116 112 117 116 32 111 102 32 112'
zz=:zz,' 114 101 118 105 111 117 115 32 97 110 100 32 100 117 109 112 32 11'
zz=:zz,'1 110 32 112 114 105 109 97 114 121 13 10 116 114 121 46 13 10 32 3'
zz=:zz,'2 100 117 109 112 61 46 32 40 49 33 58 49 41 32 123 58 114 13 10 32'
zz=:zz,' 32 100 117 109 112 32 40 49 33 58 50 41 32 115 104 111 119 112 97 '
zz=:zz,'115 115 32 60 112 114 105 109 97 114 121 13 10 32 32 78 66 46 32 97'
zz=:zz,' 117 116 111 32 115 121 110 99 104 32 111 110 108 121 32 111 110 32'
zz=:zz,' 119 105 110 32 109 97 99 104 105 110 101 115 32 119 105 116 104 32'
zz=:zz,' 100 114 111 112 98 111 120 32 100 105 114 101 99 116 111 114 121 1'
zz=:zz,'3 10 32 32 105 102 46 32 73 70 87 73 78 32 42 46 32 100 101 120 105'
zz=:zz,' 115 116 32 100 111 46 32 100 117 109 112 32 40 49 33 58 50 41 32 1'
zz=:zz,'15 104 111 119 112 97 115 115 32 60 115 121 110 99 104 32 101 110 1'
zz=:zz,'00 46 13 10 99 97 116 99 104 100 46 13 10 32 32 115 104 111 119 112'
zz=:zz,' 97 115 115 32 39 117 110 97 98 108 101 32 116 111 32 119 114 105 1'
zz=:zz,'16 101 32 100 117 109 112 115 32 45 62 32 39 59 112 114 105 109 97 '
zz=:zz,'114 121 59 115 121 110 99 104 13 10 32 32 103 111 116 111 95 102 10'
zz=:zz,'5 110 105 46 13 10 101 110 100 46 13 10 13 10 108 97 98 101 108 95 '
zz=:zz,'102 105 110 105 46 13 10 114 32 91 32 51 32 111 100 32 121 13 10 48'
zz=:zz,' 32 48 36 48 13 10 41 13 10 13 10 78 66 46 32 100 117 109 112 32 11'
zz=:zz,'4 101 111 112 101 110 32 99 108 101 97 110 117 112 13 10 40 68 85 7'
zz=:zz,'7 80 80 65 84 72 59 68 82 79 80 66 79 88 41 32 111 100 99 32 62 48 '
zz=:zz,'123 111 111 111 13 10 111 100 32 111 111 111 13 10 13 10 99 111 99 '
zz=:zz,'117 114 114 101 110 116 32 39 98 97 115 101 39 13 10 99 111 101 114'
zz=:zz,' 97 115 101 32 60 116 109 112 108 111 99 95 65 65 65 116 114 97 115'
zz=:zz,' 104 57 57 57 95{a.);''hideconsole'';21;(78 66 46 42 104 105 100 101 '
zz=:zz,'99 111 110 115 111 108 101 32 115 45 45 32 104 105 100 101 32 106 9'
zz=:zz,'9 111 110 115 111 108 101 32 111 110 32 119 105 110 100 111 119 115'
zz=:zz,' 32 45 32 106 32 55 45 48 120 32 97 110 100 32 98 101 121 111 110 1'
zz=:zz,'00 46 13 10 40 40 93 96 106 115 104 111 119 99 111 110 115 111 108 '
zz=:zz,'101 95 106 95 41 64 46 73 70 87 73 78 41 32 48 13 10 106 108 111 10'
zz=:zz,'3 32 48 13 10{a.);''iTransfer'';25;(116 114 97 110 115 102 101 114 32'
zz=:zz,' 116 101 120 116 32 102 105 108 101 32 102 114 111 109 32 100 101 1'
zz=:zz,'15 107 116 111 112 32 116 111 32 105 80 97 100 58 13 10 32 108 111 '
zz=:zz,'97 100 32 39 126 116 101 109 112 47 106 116 46 105 106 115 39 13 10'
zz=:zz,' 32 106 97 116 116 97 99 104 32 39 46 46 46 32 102 105 108 101 32 1'
zz=:zz,'16 111 32 109 111 118 101 32 116 111 32 105 80 97 100 32 46 46 46 3'
zz=:zz,'9 13 10 32 115 101 110 100 32 101 109 97 105 108 32 116 111 32 121 '
zz=:zz,'111 117 114 115 101 108 102 32 119 105 116 104 32 97 116 116 97 99 '
zz=:zz,'104 109 101 110 116 32 126 116 101 109 112 47 106 97 116 116 97 99 '
zz=:zz,'104 46 104 116 109 108 13 10 13 10 32 114 101 97 100 32 101 109 97 '
zz=:zz,'105 108 32 111 110 32 105 80 97 100 13 10 32 116 97 112 32 106 97 1'
zz=:zz,'16 116 97 99 104 46 104 116 109 108 32 45 32 115 104 111 119 32 97 '
zz=:zz,'116 116 97 99 104 109 101 110 116 32 105 110 32 98 114 111 119 115 '
zz=:zz,'101 114 13 10 32 116 97 112 32 116 101 120 116 97 114 101 97 32 32 '
zz=:zz,'32 32 32 45 32 115 104 111 119 32 107 101 121 98 111 97 114 100 32 '
zz=:zz,'97 110 100 32 101 110 116 101 114 32 101 100 105 116 32 109 111 100'
zz=:zz,' 101 13 10 32 116 111 117 99 104 45 104 111 108 100 45 114 101 108 '
zz=:zz,'101 97 115 101 32 116 101 120 116 97 114 101 97 13 10 32 116 97 112'
zz=:zz,' 32 83 101 108 101 99 116 32 65 108 108 13 10 32 116 97 112 32 67 1'
zz=:zz,'11 112 121 13 10 13 10 32 115 119 105 116 99 104 32 116 111 32 74 1'
zz=:zz,'3 10 32 106 99 98 116 111 102 32 39 116 46 105 106 115 39 32 78 66 '
zz=:zz,'46 32 99 108 105 112 98 111 97 114 100 32 116 111 32 102 105 108 10'
zz=:zz,'1 13 10 13 10 116 114 97 110 115 102 101 114 32 116 101 120 116 32 '
zz=:zz,'102 105 108 101 32 102 114 111 109 32 105 80 97 100 32 116 111 32 1'
zz=:zz,'00 101 115 107 116 111 112 58 13 10 32 106 101 32 39 46 46 46 46 46'
zz=:zz,' 32 115 99 114 105 112 116 39 13 10 32 116 111 117 99 104 45 104 11'
zz=:zz,'1 108 100 45 114 101 108 101 97 115 101 13 10 32 116 97 112 32 83 1'
zz=:zz,'01 108 101 99 116 32 65 108 108 13 10 32 116 97 112 32 67 111 112 1'
zz=:zz,'21 13 10 32 115 101 110 100 32 101 109 97 105 108 32 119 105 116 10'
zz=:zz,'4 32 112 97 115 116 101 100 32 99 111 110 116 101 110 116 115 13 10'
zz=:zz,' 32 114 101 97 100 32 101 109 97 105 108 32 111 110 32 100 101 115 '
zz=:zz,'107 116 111 112 13 10 32 110 111 114 109 97 108 32 109 101 116 104 '
zz=:zz,'111 100 115 32 116 111 32 99 111 112 121 47 112 97 115 116 101 32 1'
zz=:zz,'00 97 116 97 32 116 111 32 102 105 108 101 13 10 13 10 86 101 114 9'
zz=:zz,'8 32 106 116 32 99 114 101 97 116 101 115 32 97 32 115 105 110 103 '
zz=:zz,'108 101 32 116 101 120 116 32 102 105 108 101 32 102 114 111 109 32'
zz=:zz,' 97 32 102 111 108 100 101 114 32 40 115 105 109 105 108 97 114 32 '
zz=:zz,'116 111 32 116 97 114 41 46 13 10 32 106 116 32 39 39 32 78 66 46 3'
zz=:zz,'2 106 116 32 104 101 108 112 13 10 32 106 116 32 39 99 39 59 39 126'
zz=:zz,' 116 101 109 112 47 116 46 106 116 39 59 39 126 97 100 100 111 110 '
zz=:zz,'115 47 109 97 116 104 39 59 39 109 105 115 99 39 32 78 66 46 32 99 '
zz=:zz,'114 101 97 116 101 32 116 46 106 116 32 119 105 116 104 32 97 100 1'
zz=:zz,'00 111 110 115 13 10 99 111 110 116 101 110 116 115 13 10 32 106 97'
zz=:zz,' 116 116 97 99 104 32 39 126 47 116 46 106 116 39 13 10 13 10 32 32'
zz=:zz,' 116 114 97 110 115 102 101 114 32 115 105 110 103 108 101 32 102 1'
zz=:zz,'05 108 101 32 116 111 32 105 80 65 68 13 10 13 10 32 32 106 99 98 1'
zz=:zz,'16 111 102 32 39 116 46 106 116 39 13 10 32 32 106 116 32 39 120 39'
zz=:zz,' 59 39 116 46 106 116 39 59 39 126 97 100 100 111 110 115 47 109 97'
zz=:zz,' 116 104 39 13 10 13 10 65 110 32 105 110 116 101 114 101 115 116 1'
zz=:zz,'05 110 103 32 97 108 116 101 114 110 97 116 105 118 101 32 116 111 '
zz=:zz,'32 101 109 97 105 108 32 105 115 32 119 119 119 46 103 101 116 104 '
zz=:zz,'111 112 112 101 114 46 99 111 109 46 13 10 68 114 97 103 32 102 105'
zz=:zz,' 108 101 115 32 116 111 32 121 111 117 114 32 104 111 112 112 101 1'
zz=:zz,'14 32 97 110 100 32 116 104 101 110 32 103 101 116 32 116 104 101 1'
zz=:zz,'09 32 102 114 111 109 32 104 111 112 112 101 114 32 111 110 32 121 '
zz=:zz,'111 117 114 32 105 80 97 100 46 13 10{a.);''scriptstub'';21;(78 66 46'
zz=:zz,' 42 115 99 114 105 112 116 115 116 117 98 32 116 45 45 32 115 99 11'
zz=:zz,'4 105 112 116 32 115 116 117 98 46 13 10 78 66 46 32 13 10 78 66 46'
zz=:zz,' 32 84 104 105 115 32 105 115 32 97 110 32 101 120 97 109 112 108 1'
zz=:zz,'01 32 111 102 32 74 79 68 32 115 99 114 105 112 116 32 104 101 97 1'
zz=:zz,'00 101 114 32 100 111 99 117 109 101 110 116 97 116 105 111 110 32 '
zz=:zz,'105 110 13 10 78 66 46 32 116 104 101 32 115 105 109 112 108 101 32'
zz=:zz,' 102 111 114 109 32 115 117 112 112 111 114 116 101 100 32 98 121 3'
zz=:zz,'2 116 104 101 32 74 79 68 32 115 121 115 116 101 109 46 32 13 10 78'
zz=:zz,' 66 46 13 10 78 66 46 32 84 111 32 115 101 101 32 104 111 119 32 74'
zz=:zz,' 79 68 32 102 111 114 109 97 116 115 32 116 104 105 115 32 116 101 '
zz=:zz,'120 116 32 102 111 108 108 111 119 32 105 110 115 116 114 117 99 11'
zz=:zz,'6 105 111 110 115 32 98 101 108 111 119 46 13 10 78 66 46 32 13 10 '
zz=:zz,'78 66 46 32 32 84 111 32 117 115 101 32 116 104 105 115 32 115 99 1'
zz=:zz,'14 105 112 116 32 100 111 13 10 78 66 46 32 32 32 32 32 116 104 101'
zz=:zz,' 32 102 111 108 108 111 119 105 110 103 58 13 10 78 66 46 13 10 78 '
zz=:zz,'66 46 32 118 101 114 98 97 116 105 109 58 13 10 78 66 46 32 13 10 7'
zz=:zz,'8 66 46 32 32 32 52 32 101 100 32 39 115 99 114 105 112 116 115 116'
zz=:zz,' 117 98 39 32 32 32 78 66 46 32 102 101 116 99 104 32 115 116 117 9'
zz=:zz,'8 32 105 110 116 111 32 101 100 105 116 32 119 105 110 100 111 119 '
zz=:zz,'13 10 78 66 46 32 32 32 123 101 100 105 116 32 115 116 117 98 125 3'
zz=:zz,'2 32 13 10 78 66 46 13 10 78 66 46 32 32 32 52 32 112 117 116 32 39'
zz=:zz,' 109 97 99 114 111 39 59 50 49 59 103 116 39 115 99 114 105 112 116'
zz=:zz,' 115 116 117 98 39 32 32 78 66 46 32 115 97 118 101 32 97 115 32 10'
zz=:zz,'9 97 99 114 111 32 13 10 78 66 46 32 32 32 52 32 112 117 116 32 109'
zz=:zz,' 116 32 39 115 99 114 105 112 116 115 116 117 98 39 32 32 32 32 32 '
zz=:zz,'32 32 32 32 32 32 32 78 66 46 32 114 101 116 97 105 110 115 32 110 '
zz=:zz,'97 109 101 13 10 78 66 46 32 32 32 49 32 112 117 116 32 39 116 101 '
zz=:zz,'115 116 39 59 103 116 39 115 99 114 105 112 116 115 116 117 98 39 3'
zz=:zz,'2 32 32 32 32 32 78 66 46 32 115 97 118 101 32 97 115 32 116 101 11'
zz=:zz,'5 116 13 10 78 66 46 32 32 32 13 10 78 66 46 13 10 78 66 46 32 43 5'
zz=:zz,'8 32 50 48 48 55 100 101 99 48 53 32 45 45 32 99 114 101 97 116 101'
zz=:zz,' 100 13 10 78 66 46 32 42 58 32 50 48 48 56 109 97 114 49 53 32 45 '
zz=:zz,'45 32 40 99 104 97 110 103 101 100 63 41{a.);''showconsole'';21;78 66'
zz=:zz,' 46 42 115 104 111 119 99 111 110 115 111 108 101 32 115 45 45 32 1'
zz=:zz,'15 104 111 119 32 106 99 111 110 115 111 108 101 32 111 110 32 119 '
zz=:zz,'105 110 100 111 119 115 32 45 32 106 32 55 45 48 120 32 97 110 100 '
zz=:zz,'32 98 101 121 111 110 100 46 13 10 40 40 93 96 106 115 104 111 119 '
zz=:zz,'99 111 110 115 111 108 101 95 106 95 41 64 46 73 70 87 73 78 41 32 '
zz=:zz,'49 13 10{a.                                                        '
zz=:17766{.zz
showpass 4 put ". ".'zz_',SOLOCALE,'_' [ cocurrent 'base' NB.{*JOD*}
".soclear NB.{*JOD*}

cocurrent SO__JODobj NB.{*JOD*}
zz=:''
zz=:zz,'9 2$<;._1 ''|POST_htmthorn|POST_htmthorn post processor|POST_sunmoon'
zz=:zz,'|POST_sunmoon post processor|POST_thorn|POST_thorn post processor|d'
zz=:zz,'ios|dump current put JOD dictionary on IOS|dumpput|dumps put dictio'
zz=:zz,'nary|hideconsole|hide jconsole on windows - j 7-0x and beyond|iTran'
zz=:zz,'sfer|clipboard to file jt help create t|scriptstub|script stub|show'
zz=:zz,'console|show jconsole on windows - j 7-0x and beyond''              '
zz=:388{.zz
showpass 4 8 put ". ".'zz_',SOLOCALE,'_' [ cocurrent 'base' NB.{*JOD*}
".soclear NB.{*JOD*}

cocurrent SO__JODobj NB.{*JOD*}
zz=:''
zz=:zz,'(<<;._1 '' base64 BASE64 frombase64 tobase64''),(<<;._1 '' boxopen fbo'
zz=:zz,'xname fexist''),(<<;._1 '' bstats antimode dev dstat freqdist fuserow'
zz=:zz,'s geomean harmean kurtosis lsfit mean median midpt mode2 movgmean m'
zz=:zz,'ovmean q1 q3 round skewness ssdev stddev var''),(<<;._1 '' buildutils'
zz=:zz,' CR CRLF LF TAB blkaft changenqt decomm dewhitejscript timestamp''),'
zz=:zz,'(<<;._1 '' dewhitejscript CR CRLF LF TAB blkaft decomm dewhitejscrip'
zz=:zz,'t read write''),(<<;._1 '' dllutils cd cder cderx mema memf memr memw'
zz=:zz,'''),(<<;._1 '' earthdistances arctan cos earthdist rfd sin''),(<<;._1 '
zz=:zz,''' htmthorn IFACEWORDShtmthorn ROOTWORDShtmthorn''),(<<;._1 '' odbcREF'
zz=:zz,' ddcheck ddcnm ddcol ddcon dddis dderr ddfch ddfet ddsel ddsql ddsr'
zz=:zz,'c ddtblx''),(<<;._1 '' remdots alltrim read remdotargs write''),(<<;._'
zz=:zz,'1 '' rwtabd readtd writetd''),(<<;._1 '' socketsREF sdcheck sdclose sd'
zz=:zz,'connect sdgethostbyname sdrecv sdsend sdsocket''),(<<;._1 '' sunmoon '
zz=:zz,'IFACEWORDSsunmoon NORISESET ROOTWORDSsunmoon arctan calmoons cos fr'
zz=:zz,'omjulian moons round sin sunriseset0 sunriseset1 tabit tan today ye'
zz=:zz,'ardates''),(<<;._1 '' trig arccos arccosh arcsin arcsinh arctan arcta'
zz=:zz,'nh cos cosd cosh dfr pi rfd sin sind sinh tan tand tanh''),(<<;._1 '''
zz=:zz,' unicode ucpfrncrd ucpfrutf8 utf8frncrd''),(<<;._1 '' wordformation w'
zz=:zz,'fl''),<<;._1 '' xmlutils afterstr alltrim atags attrvalue beforestr b'
zz=:zz,'elongstrs betweenidx betweenstrs eletags getele geteleattr geteleat'
zz=:zz,'trtext geteletext geteletextidx read splitstrs tags write''         '
zz=:1398{.zz
showpass 2 grp&> ". ". 'zz_',SOLOCALE,'_' [ cocurrent 'base' NB.{*JOD*}
".soclear NB.{*JOD*}

cocurrent SO__JODobj NB.{*JOD*}
zz=:''
zz=:zz,'4 2$''htmthorn'';(78 66 46 42 104 116 109 116 104 111 114 110 32 115 '
zz=:zz,'45 45 32 32 106 32 97 114 114 97 121 32 102 111 114 109 97 116 116 '
zz=:zz,'105 110 103 32 40 116 104 111 114 110 41 32 116 104 97 116 32 103 1'
zz=:zz,'01 110 101 114 97 116 101 115 13 10 78 66 46 32 72 84 77 76 46 13 1'
zz=:zz,'0 78 66 46 13 10 78 66 46 32 84 104 105 115 32 101 108 101 103 97 1'
zz=:zz,'10 116 32 115 99 114 105 112 116 32 98 121 32 82 111 103 101 114 32'
zz=:zz,' 72 117 105 32 105 109 112 108 101 109 101 110 116 115 32 97 32 109'
zz=:zz,' 111 100 101 108 32 32 111 102 32 116 104 101 32 106 13 10 78 66 46'
zz=:zz,' 32 97 114 114 97 121 32 102 111 114 109 97 116 116 105 110 103 32 '
zz=:zz,'112 114 105 109 105 116 105 118 101 32 32 116 104 111 114 110 32 40'
zz=:zz,' 34 58 41 32 32 116 104 97 116 32 32 103 101 110 101 114 97 116 101'
zz=:zz,' 115 32 32 72 84 77 76 13 10 78 66 46 32 111 117 116 112 117 116 46'
zz=:zz,' 32 83 101 101 32 116 104 101 32 74 32 119 105 107 105 58 13 10 78 '
zz=:zz,'66 46 13 10 78 66 46 32 118 101 114 98 97 116 105 109 58 13 10 78 6'
zz=:zz,'6 46 13 10 78 66 46 32 32 32 104 116 116 112 58 47 47 119 119 119 4'
zz=:zz,'6 106 115 111 102 116 119 97 114 101 46 99 111 109 47 106 119 105 1'
zz=:zz,'07 105 47 69 115 115 97 121 115 47 66 111 120 101 100 37 50 48 65 1'
zz=:zz,'14 114 97 121 37 50 48 68 105 115 112 108 97 121 13 10 78 66 46 13 '
zz=:zz,'10 78 66 46 32 101 120 97 109 112 108 101 115 58 13 10 78 66 46 13 '
zz=:zz,'10 78 66 46 32 32 32 116 104 104 32 105 46 50 32 50 32 51 32 52 13 '
zz=:zz,'10 78 66 46 32 32 32 116 104 104 32 60 34 48 32 105 46 50 32 50 32 '
zz=:zz,'51 32 52 13 10 78 66 46 32 32 32 116 104 104 32 53 33 58 50 32 60 3'
zz=:zz,'9 97 115 115 101 114 116 39 13 10 78 66 46 32 32 32 116 104 104 32 '
zz=:zz,'50 32 51 32 52 32 36 32 105 46 38 46 62 32 105 46 55 13 10 78 66 46'
zz=:zz,' 32 32 32 116 104 104 32 50 32 50 32 51 32 36 32 40 105 46 38 46 62'
zz=:zz,' 105 46 54 41 44 60 60 50 32 53 36 39 97 32 32 32 101 102 103 104 1'
zz=:zz,'05 106 39 13 10 78 66 46 13 10 78 66 46 32 105 110 116 101 114 102 '
zz=:zz,'97 99 101 32 119 111 114 100 40 115 41 58 13 10 78 66 46 32 45 45 4'
zz=:zz,'5 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45'
zz=:zz,' 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 '
zz=:zz,'45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 4'
zz=:zz,'5 45 45 45 45 45 45 45 45 13 10 78 66 46 32 32 32 116 104 104 32 45'
zz=:zz,' 32 106 32 97 114 114 97 121 32 102 111 114 109 97 116 32 105 110 3'
zz=:zz,'2 72 84 77 76 13 10 78 66 46 13 10 78 66 46 32 97 117 116 104 111 1'
zz=:zz,'14 58 32 32 82 111 103 101 114 32 72 117 105 13 10 78 66 46 32 99 1'
zz=:zz,'14 101 97 116 101 100 58 32 50 48 49 48 77 97 114 51 49 13 10 78 66'
zz=:zz,' 46 32 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 '
zz=:zz,'45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 4'
zz=:zz,'5 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45'
zz=:zz,' 45 45 45 45 45 45 45 45 45 45 45 45 45 13 10 13 10 99 111 99 108 9'
zz=:zz,'7 115 115 32 39 104 116 109 116 104 111 114 110 39 13 10 13 10 98 1'
zz=:zz,'11 120 101 100 32 32 61 58 32 51 50 32 61 32 51 33 58 48 13 10 109 '
zz=:zz,'116 32 32 32 32 32 61 58 32 48 32 101 46 32 36 13 10 98 111 120 99 '
zz=:zz,'32 32 32 61 58 32 57 33 58 54 32 39 39 13 10 116 99 111 114 110 32 '
zz=:zz,'32 61 58 32 50 32 32 48 123 98 111 120 99 13 10 116 105 110 116 32 '
zz=:zz,'32 32 61 58 32 49 32 49 48 123 98 111 120 99 13 10 98 99 111 114 11'
zz=:zz,'0 32 32 61 58 32 56 32 32 54 123 98 111 120 99 13 10 98 105 110 116'
zz=:zz,' 32 32 32 61 58 32 55 32 49 48 123 98 111 120 99 13 10 13 10 115 10'
zz=:zz,'4 32 32 32 32 32 61 58 32 40 42 47 64 125 58 32 44 32 123 58 41 64 '
zz=:zz,'40 49 38 44 41 64 36 32 40 36 44 41 32 93 13 10 114 111 119 115 32 '
zz=:zz,'32 32 61 58 32 42 47 92 46 64 125 58 64 36 13 10 98 108 32 32 32 32'
zz=:zz,' 32 61 58 32 125 46 64 40 44 38 48 41 64 40 43 47 41 64 40 48 38 61'
zz=:zz,' 41 64 40 124 47 32 105 46 64 123 46 64 40 44 38 49 41 41 13 10 109'
zz=:zz,' 97 115 107 32 32 32 61 58 32 49 38 44 46 32 35 38 44 32 44 46 38 4'
zz=:zz,'8 64 62 58 64 105 46 64 35 13 10 109 97 116 32 32 32 32 61 58 32 10'
zz=:zz,'9 97 115 107 64 98 108 64 114 111 119 115 32 123 32 39 32 39 32 44 '
zz=:zz,'32 115 104 13 10 13 10 101 100 103 101 32 32 32 61 58 32 44 64 40 4'
zz=:zz,'9 38 44 46 41 64 91 32 125 46 64 35 32 43 58 64 35 64 91 32 36 32 9'
zz=:zz,'3 13 10 108 101 102 116 32 32 32 61 58 32 101 100 103 101 38 40 51 '
zz=:zz,'32 57 123 98 111 120 99 41 64 62 64 40 48 38 123 41 64 91 32 44 32 '
zz=:zz,'34 48 32 49 34 50 32 93 13 10 114 105 103 104 116 32 32 61 58 32 10'
zz=:zz,'1 100 103 101 38 40 53 32 57 123 98 111 120 99 41 64 62 64 40 48 38'
zz=:zz,' 123 41 64 91 32 44 126 34 48 32 49 34 50 32 93 13 10 116 111 112 3'
zz=:zz,'2 32 32 32 61 58 32 49 38 124 46 64 40 116 99 111 114 110 38 44 41 '
zz=:zz,'64 40 101 100 103 101 38 116 105 110 116 41 64 62 64 40 49 38 123 4'
zz=:zz,'1 64 91 32 44 34 50 32 32 93 13 10 98 111 116 32 32 32 32 61 58 32 '
zz=:zz,'49 38 124 46 64 40 98 99 111 114 110 38 44 41 64 40 101 100 103 101'
zz=:zz,' 38 98 105 110 116 41 64 62 64 40 49 38 123 41 64 91 32 44 34 50 12'
zz=:zz,'6 32 93 13 10 112 101 114 105 109 32 32 61 58 32 91 32 116 111 112 '
zz=:zz,'32 91 32 98 111 116 32 91 32 108 101 102 116 32 114 105 103 104 116'
zz=:zz,' 13 10 13 10 116 111 112 108 101 102 116 61 58 32 40 52 123 98 111 '
zz=:zz,'120 99 41 38 40 40 60 48 32 48 41 125 41 32 64 32 40 40 95 50 123 9'
zz=:zz,'8 111 120 99 41 38 44 46 41 32 64 32 40 40 95 49 123 98 111 120 99 '
zz=:zz,'41 38 44 41 13 10 105 110 115 105 100 101 32 61 58 32 49 32 49 38 1'
zz=:zz,'25 46 32 64 58 32 59 32 64 58 32 40 44 46 38 46 62 47 34 49 41 32 6'
zz=:zz,'4 58 32 40 116 111 112 108 101 102 116 38 46 62 41 13 10 116 97 107'
zz=:zz,' 101 32 32 32 61 58 32 123 46 32 39 32 39 34 95 94 58 109 116 13 10'
zz=:zz,' 102 114 97 109 101 32 32 61 58 32 91 32 112 101 114 105 109 32 123'
zz=:zz,' 64 91 32 105 110 115 105 100 101 64 58 40 116 97 107 101 38 46 62 '
zz=:zz,'41 34 50 32 44 58 94 58 40 49 61 35 64 36 41 64 93 13 10 114 99 32 '
zz=:zz,'32 32 32 32 61 58 32 40 62 46 47 64 115 104 38 46 62 41 32 64 58 32'
zz=:zz,' 40 44 46 64 124 58 34 50 64 58 40 48 38 123 34 49 41 59 49 38 123 '
zz=:zz,'34 49 41 32 64 58 32 40 36 38 62 41 13 10 13 10 116 104 111 114 110'
zz=:zz,' 49 32 61 58 32 34 58 96 116 104 98 111 120 32 64 46 32 98 111 120 '
zz=:zz,'101 100 13 10 116 104 98 111 120 32 32 61 58 32 40 114 99 32 102 11'
zz=:zz,'4 97 109 101 32 93 41 32 64 58 32 40 109 97 116 64 116 104 111 114 '
zz=:zz,'110 49 38 46 62 41 13 10 13 10 116 104 98 111 120 99 104 101 99 107'
zz=:zz,' 61 58 32 51 32 58 32 48 13 10 32 122 61 46 32 116 104 98 111 120 3'
zz=:zz,'2 121 13 10 32 97 115 115 101 114 116 46 32 40 35 36 122 41 32 61 3'
zz=:zz,'2 50 32 62 46 32 35 36 121 13 10 32 97 115 115 101 114 116 46 32 12'
zz=:zz,'2 32 45 58 38 40 95 50 38 125 46 41 38 36 32 121 13 10 32 116 61 46'
zz=:zz,' 32 40 60 48 36 126 95 50 43 35 36 122 41 123 122 13 10 32 112 61 4'
zz=:zz,'6 32 40 123 46 34 49 32 116 41 32 101 46 32 48 32 51 32 54 123 98 1'
zz=:zz,'11 120 99 13 10 32 113 61 46 32 40 123 46 32 32 32 116 41 32 101 46'
zz=:zz,' 32 48 32 49 32 50 123 98 111 120 99 13 10 32 97 115 115 101 114 11'
zz=:zz,'6 46 32 122 32 45 58 38 40 40 44 112 43 46 47 113 41 35 44 41 34 50'
zz=:zz,' 32 116 13 10 32 122 13 10 41 13 10 13 10 110 98 115 112 32 32 32 3'
zz=:zz,'2 61 58 32 91 58 32 59 32 40 40 60 39 38 110 98 115 112 59 39 41 32'
zz=:zz,' 51 50 125 60 34 48 32 97 46 41 32 123 126 32 97 46 32 105 46 32 93'
zz=:zz,' 32 32 78 66 46 32 114 101 112 108 97 99 101 32 115 112 97 99 101 3'
zz=:zz,'2 98 121 32 38 110 98 115 112 59 13 10 112 97 100 32 32 32 32 32 61'
zz=:zz,' 58 32 39 60 98 114 62 39 32 36 126 32 52 32 42 32 42 64 91 32 42 3'
zz=:zz,'2 45 13 10 13 10 66 79 88 67 72 65 82 83 61 58 32 57 33 58 54 32 39'
zz=:zz,' 39 32 32 32 32 32 78 66 46 32 98 111 120 32 100 114 97 119 105 110'
zz=:zz,' 103 32 99 104 97 114 97 99 116 101 114 115 13 10 83 80 65 67 69 82'
zz=:zz,' 32 32 61 58 32 39 60 116 114 32 99 108 97 115 115 61 115 112 97 99'
zz=:zz,' 101 114 62 60 116 100 62 38 110 98 115 112 59 60 47 116 100 62 60 '
zz=:zz,'47 116 114 62 39 44 67 82 76 70 13 10 13 10 74 65 82 82 65 89 83 84'
zz=:zz,' 89 76 69 61 58 32 48 32 58 32 48 13 10 60 115 116 121 108 101 32 1'
zz=:zz,'16 121 112 101 61 34 116 101 120 116 47 99 115 115 34 62 13 10 46 1'
zz=:zz,'06 97 114 114 97 121 32 123 102 111 110 116 45 102 97 109 105 108 1'
zz=:zz,'21 58 109 111 110 111 115 112 97 99 101 59 125 13 10 116 97 98 108 '
zz=:zz,'101 46 106 97 114 114 97 121 32 123 98 111 114 100 101 114 45 99 11'
zz=:zz,'1 108 108 97 112 115 101 58 99 111 108 108 97 112 115 101 59 125 13'
zz=:zz,' 10 116 97 98 108 101 46 106 97 114 114 97 121 32 116 100 32 123 98'
zz=:zz,' 111 114 100 101 114 58 115 111 108 105 100 32 98 108 97 99 107 32 '
zz=:zz,'116 104 105 110 59 32 118 101 114 116 105 99 97 108 45 97 108 105 1'
zz=:zz,'03 110 58 116 111 112 59 32 112 97 100 100 105 110 103 58 48 46 52 '
zz=:zz,'101 109 59 125 13 10 116 97 98 108 101 46 106 97 114 114 97 121 32 '
zz=:zz,'116 114 46 115 112 97 99 101 114 32 116 100 32 123 98 111 114 100 1'
zz=:zz,'01 114 58 110 111 110 101 59 125 13 10 60 47 115 116 121 108 101 62'
zz=:zz,' 13 10 41 13 10 13 10 116 104 104 61 58 32 51 32 58 32 48 32 32 78 '
zz=:zz,'66 46 32 34 116 104 111 114 110 34 32 40 97 114 114 97 121 32 102 1'
zz=:zz,'11 114 109 97 116 116 105 110 103 41 32 112 114 111 100 117 99 105 '
zz=:zz,'110 103 32 72 84 77 76 32 111 117 116 112 117 116 13 10 32 74 65 82'
zz=:zz,' 82 65 89 83 84 89 76 69 44 39 60 100 105 118 32 99 108 97 115 115 '
zz=:zz,'61 106 97 114 114 97 121 62 39 44 40 48 32 116 104 104 32 121 41 44'
zz=:zz,' 39 60 47 100 105 118 62 39 13 10 58 13 10 32 105 102 46 32 40 48 3'
zz=:zz,'2 101 46 32 36 121 41 32 62 58 32 51 50 61 51 33 58 48 32 121 32 10'
zz=:zz,'0 111 46 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 78 66 4'
zz=:zz,'6 32 121 32 105 115 32 101 109 112 116 121 32 111 114 32 110 111 11'
zz=:zz,'6 32 98 111 120 101 100 13 10 32 32 110 98 115 112 32 95 52 125 46 '
zz=:zz,'40 44 122 41 44 120 32 112 97 100 32 35 122 61 46 32 40 109 97 116 '
zz=:zz,'32 34 58 121 41 44 34 49 32 39 60 98 114 62 39 13 10 32 101 108 115'
zz=:zz,' 101 46 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32'
zz=:zz,' 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 '
zz=:zz,'78 66 46 32 121 32 105 115 32 98 111 120 101 100 13 10 32 32 115 61'
zz=:zz,' 46 32 123 46 34 49 32 40 95 50 123 46 36 116 41 32 40 36 44 41 32 '
zz=:zz,'116 61 46 32 34 58 121 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32'
zz=:zz,' 32 78 66 46 32 115 32 105 115 32 49 115 116 32 99 111 108 117 109 '
zz=:zz,'110 32 105 110 32 49 115 116 32 112 108 97 110 101 32 105 110 32 34'
zz=:zz,' 58 121 13 10 32 32 104 61 46 32 60 58 32 50 32 45 126 47 92 32 73 '
zz=:zz,'46 32 115 32 101 46 32 48 32 51 32 54 123 66 79 88 67 72 65 82 83 3'
zz=:zz,'2 32 32 32 32 32 32 32 32 32 78 66 46 32 104 101 105 103 104 116 32'
zz=:zz,' 40 35 32 108 105 110 101 115 41 32 105 110 32 101 97 99 104 32 114'
zz=:zz,' 111 119 13 10 32 32 122 61 46 32 104 32 116 104 104 38 46 62 34 50'
zz=:zz,' 32 44 58 94 58 40 48 62 46 50 45 35 36 121 41 32 121 32 32 32 32 3'
zz=:zz,'2 32 32 32 32 32 32 32 32 32 32 78 66 46 32 102 111 114 109 97 116 '
zz=:zz,'32 101 97 99 104 32 97 116 111 109 13 10 32 32 122 61 46 32 40 39 6'
zz=:zz,'0 116 100 62 39 44 39 60 47 116 100 62 39 44 126 93 41 38 46 62 32 '
zz=:zz,'122 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 78 66 46 '
zz=:zz,'32 98 114 97 99 107 101 116 32 101 97 99 104 32 97 116 111 109 13 1'
zz=:zz,'0 32 32 122 61 46 32 60 64 40 39 60 116 114 62 39 44 39 60 47 116 1'
zz=:zz,'14 62 39 44 126 59 41 34 49 32 122 32 32 32 32 32 32 32 32 32 32 32'
zz=:zz,' 32 32 32 32 32 32 78 66 46 32 98 114 97 99 107 101 116 32 101 97 9'
zz=:zz,'9 104 32 114 111 119 13 10 32 32 39 60 116 97 98 108 101 32 99 108 '
zz=:zz,'97 115 115 61 106 97 114 114 97 121 62 39 44 40 59 40 109 97 115 10'
zz=:zz,'7 32 98 108 32 114 111 119 115 32 121 41 123 83 80 65 67 69 82 59 4'
zz=:zz,'4 122 41 44 39 60 47 116 97 98 108 101 62 39 44 40 95 52 125 46 120'
zz=:zz,' 32 112 97 100 32 35 109 97 116 32 116 41 44 67 82 76 70 13 10 32 1'
zz=:zz,'01 110 100 46 13 10 41{a.);''remdots'';(78 66 46 42 114 101 109 100 1'
zz=:zz,'11 116 115 32 103 45 45 32 114 101 112 108 97 99 101 32 100 111 116'
zz=:zz,' 116 101 100 32 97 114 103 117 109 101 110 116 115 32 105 110 32 74'
zz=:zz,' 32 101 120 112 108 105 99 116 32 99 111 100 101 46 13 10 78 66 46 '
zz=:zz,'13 10 78 66 46 32 76 111 97 100 115 32 97 32 115 109 97 108 108 32 '
zz=:zz,'117 116 105 108 105 116 121 32 116 104 97 116 32 97 105 100 115 32 '
zz=:zz,'105 110 32 116 104 101 32 99 111 110 118 101 114 115 105 111 110 32'
zz=:zz,' 111 102 32 74 32 53 46 120 45 32 99 111 100 101 13 10 78 66 46 32 '
zz=:zz,'116 111 32 74 32 54 46 120 43 32 99 111 100 101 46 32 71 101 110 10'
zz=:zz,'1 114 97 116 101 32 116 104 101 32 40 114 101 109 100 111 116 115 4'
zz=:zz,'1 32 97 110 100 32 40 119 111 114 100 102 111 114 109 97 116 105 11'
zz=:zz,'1 110 41 32 103 114 111 117 112 115 13 10 78 66 46 32 97 110 100 32'
zz=:zz,' 117 115 101 32 116 104 101 32 74 32 115 116 97 110 100 97 114 100 '
zz=:zz,'32 40 108 111 97 100 41 32 116 111 32 117 115 101 46 13 10 78 66 46'
zz=:zz,' 13 10 78 66 46 32 118 101 114 98 97 116 105 109 58 13 10 78 66 46 '
zz=:zz,'32 32 32 13 10 78 66 46 32 32 32 32 32 114 101 113 117 105 114 101 '
zz=:zz,'32 39 106 111 100 39 13 10 78 66 46 32 32 32 32 32 111 100 32 39 11'
zz=:zz,'7 116 105 108 115 39 13 10 78 66 46 13 10 78 66 46 32 32 32 32 32 1'
zz=:zz,'09 108 115 32 39 119 111 114 100 102 111 114 109 97 116 105 111 110'
zz=:zz,' 39 13 10 78 66 46 32 32 32 32 32 109 108 115 32 39 114 101 109 100'
zz=:zz,' 111 116 115 39 13 10 78 66 46 13 10 78 66 46 32 32 32 32 32 108 11'
zz=:zz,'1 97 100 32 39 114 101 109 100 111 116 115 39 13 10 78 66 46 13 10 '
zz=:zz,'78 66 46 32 97 117 116 104 111 114 58 32 74 111 104 110 32 68 46 32'
zz=:zz,' 66 97 107 101 114 13 10 78 66 46 32 99 114 101 97 116 101 100 58 3'
zz=:zz,'2 78 111 118 101 109 98 101 114 32 50 48 48 55 13 10 13 10 114 101 '
zz=:zz,'113 117 105 114 101 32 39 119 111 114 100 102 111 114 109 97 116 10'
zz=:zz,'5 111 110 39 32 32 78 66 46 32 74 79 68 32 103 101 110 101 114 97 1'
zz=:zz,'16 101 100 32 40 117 116 105 108 115 41 32 100 105 99 116 105 111 1'
zz=:zz,'10 97 114 121 13 10 99 111 99 117 114 114 101 110 116 32 39 122 39 '
zz=:zz,'13 10 13 10 13 10 13 10{a.);''sunmoon'';(78 66 46 42 115 117 110 109 '
zz=:zz,'111 111 110 32 115 45 45 32 99 111 109 112 117 116 101 115 32 115 1'
zz=:zz,'17 110 32 114 105 115 101 47 115 101 116 32 116 105 109 101 115 32 '
zz=:zz,'97 110 100 32 102 117 108 108 32 110 101 119 32 109 111 111 110 32 '
zz=:zz,'100 97 116 101 115 46 13 10 78 66 46 13 10 78 66 46 32 118 101 114 '
zz=:zz,'98 97 116 105 109 58 13 10 78 66 46 13 10 78 66 46 32 105 110 116 1'
zz=:zz,'01 114 102 97 99 101 32 119 111 114 100 40 115 41 58 32 13 10 78 66'
zz=:zz,' 46 32 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 '
zz=:zz,'45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 4'
zz=:zz,'5 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45'
zz=:zz,' 45 45 45 45 45 45 45 45 45 45 45 45 45 32 32 32 32 32 32 32 32 32 '
zz=:zz,'32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 3'
zz=:zz,'2 32 13 10 78 66 46 32 32 99 97 108 109 111 111 110 115 32 32 32 32'
zz=:zz,' 45 32 99 97 108 101 110 100 97 114 32 100 97 116 101 115 32 111 10'
zz=:zz,'2 32 110 101 119 32 97 110 100 32 102 117 108 108 32 109 111 111 11'
zz=:zz,'0 115 13 10 78 66 46 32 32 109 111 111 110 115 32 32 32 32 32 32 32'
zz=:zz,' 45 32 116 105 109 101 115 32 111 102 32 110 101 119 32 97 110 100 '
zz=:zz,'32 102 117 108 108 32 109 111 111 110 115 32 102 111 114 32 110 32 '
zz=:zz,'99 97 108 101 110 100 97 114 32 121 101 97 114 115 13 10 78 66 46 3'
zz=:zz,'2 32 115 117 110 114 105 115 101 115 101 116 48 32 45 32 99 111 109'
zz=:zz,' 112 117 116 101 115 32 115 117 110 32 114 105 115 101 32 97 110 10'
zz=:zz,'0 32 115 101 116 32 116 105 109 101 115 32 45 32 115 101 101 32 103'
zz=:zz,' 114 111 117 112 32 100 111 99 117 109 101 110 116 97 116 105 111 1'
zz=:zz,'10 13 10 78 66 46 32 32 115 117 110 114 105 115 101 115 101 116 49 '
zz=:zz,'32 45 32 99 111 109 112 117 116 101 115 32 115 117 110 32 114 105 1'
zz=:zz,'15 101 32 97 110 100 32 115 101 116 32 116 105 109 101 115 32 45 32'
zz=:zz,' 115 101 101 32 103 114 111 117 112 32 100 111 99 117 109 101 110 1'
zz=:zz,'16 97 116 105 111 110 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 '
zz=:zz,'32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 13 10 78 66 4'
zz=:zz,'6 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32'
zz=:zz,' 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 '
zz=:zz,'32 32 32 32 32 32 32 32 32 32 32 32 32 13 10 78 66 46 32 97 117 116'
zz=:zz,' 104 111 114 58 32 32 74 111 104 110 32 68 46 32 66 97 107 101 114 '
zz=:zz,'32 45 45 32 98 97 107 101 114 106 100 57 57 64 103 109 97 105 108 4'
zz=:zz,'6 99 111 109 32 32 13 10 78 66 46 32 99 114 101 97 116 101 100 58 3'
zz=:zz,'2 50 48 49 48 102 101 98 49 50 13 10 78 66 46 32 45 45 45 45 45 45 '
zz=:zz,'45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 4'
zz=:zz,'5 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45'
zz=:zz,' 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 '
zz=:zz,'45 45 45 45 45 32 13 10 78 66 46 32 50 48 49 48 102 101 98 49 50 32'
zz=:zz,' 115 117 110 109 111 111 110 32 103 114 111 117 112 32 99 111 110 1'
zz=:zz,'18 101 114 116 101 100 32 116 111 32 99 108 97 115 115 13 10 78 66 '
zz=:zz,'46 32 50 48 49 50 111 99 116 48 51 32 100 111 99 117 109 101 110 11'
zz=:zz,'6 97 116 105 111 110 32 97 100 106 117 115 116 101 100 32 102 111 1'
zz=:zz,'14 32 40 106 111 100 108 105 116 101 114 97 116 101 41 13 10 13 10 '
zz=:zz,'99 111 99 108 97 115 115 32 39 115 117 110 109 111 111 110 39 32 13'
zz=:zz,' 10{a.);''wordformation'';78 66 46 42 119 111 114 100 102 111 114 109'
zz=:zz,' 97 116 105 111 110 32 115 45 45 32 119 111 114 100 32 102 111 114 '
zz=:zz,'109 97 116 105 111 110 32 111 110 32 108 105 110 101 115 46 10 78 6'
zz=:zz,'6 46 10 78 66 46 32 84 104 105 115 32 101 108 101 103 97 110 116 32'
zz=:zz,' 32 112 114 111 103 114 97 109 44 32 40 100 117 101 32 116 111 32 8'
zz=:zz,'2 111 103 101 114 32 72 117 105 41 44 32 103 101 110 101 114 97 108'
zz=:zz,' 105 122 101 115 32 74 39 115 32 59 58 10 78 66 46 32 119 111 114 1'
zz=:zz,'00 32 32 102 111 114 109 97 116 105 111 110 32 32 112 114 105 109 1'
zz=:zz,'05 116 105 118 101 32 116 111 32 111 112 101 114 97 116 101 32 111 '
zz=:zz,'110 32 108 105 110 101 32 100 101 108 105 109 105 116 101 100 32 11'
zz=:zz,'6 101 120 116 46 10 78 66 46 32 73 116 32 32 117 115 101 115 32 32 '
zz=:zz,'116 104 101 32 32 100 121 97 100 32 111 102 32 32 59 58 32 32 116 1'
zz=:zz,'04 97 116 32 105 109 112 108 101 109 101 110 116 115 32 32 97 32 32'
zz=:zz,' 102 105 110 105 116 101 32 32 115 116 97 116 101 10 78 66 46 32 10'
zz=:zz,'9 97 99 104 105 110 101 46 32 32 70 83 77 32 32 100 101 102 105 110'
zz=:zz,' 105 116 105 111 110 115 32 32 97 114 101 32 32 115 117 114 112 114'
zz=:zz,' 105 115 105 110 103 108 121 32 32 101 102 102 105 99 105 101 110 1'
zz=:zz,'16 32 32 97 110 100 10 78 66 46 32 112 111 119 101 114 102 117 108 '
zz=:zz,'32 105 110 32 74 46 10 78 66 46 10 78 66 46 32 74 79 68 32 78 79 84'
zz=:zz,' 69 58 32 32 116 104 105 115 32 32 115 99 114 105 112 116 32 105 11'
zz=:zz,'5 32 115 116 111 114 101 100 32 105 110 32 32 74 79 68 32 97 115 32'
zz=:zz,' 97 32 103 114 111 117 112 32 32 104 101 97 100 101 114 46 10 78 66'
zz=:zz,' 46 32 84 104 105 115 32 112 114 101 115 101 114 118 101 115 32 116'
zz=:zz,' 104 101 32 108 111 103 105 99 32 32 111 102 32 32 116 104 101 32 3'
zz=:zz,'2 115 99 114 105 112 116 46 32 32 115 99 114 105 112 116 46 32 40 1'
zz=:zz,'19 102 108 41 32 32 105 115 10 78 66 46 32 109 97 105 110 116 97 10'
zz=:zz,'5 110 101 100 32 105 110 32 116 104 105 115 32 100 105 99 116 105 1'
zz=:zz,'11 110 97 114 121 32 97 115 32 97 32 114 101 102 101 114 101 110 99'
zz=:zz,' 101 46 10 78 66 46 10 78 66 46 32 118 101 114 98 97 116 105 109 58'
zz=:zz,' 10 78 66 46 10 78 66 46 32 32 32 32 32 119 102 108 61 58 32 119 10'
zz=:zz,'2 108 95 122 95 10 10 78 66 46 42 100 101 112 101 110 100 101 110 1'
zz=:zz,'16 115 10 10 78 66 46 32 32 104 105 100 101 32 115 99 114 105 112 1'
zz=:zz,'16 32 108 111 99 97 108 115 32 33 40 42 41 61 46 32 109 102 108 32 '
zz=:zz,'115 102 108 32 119 102 108 95 122 95 10 10 109 102 108 61 46 32 50 '
zz=:zz,'53 54 36 48 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 3'
zz=:zz,'2 32 32 32 32 78 66 46 32 88 32 111 116 104 101 114 10 109 102 108 '
zz=:zz,'61 46 32 49 32 32 40 57 44 97 46 105 46 39 32 39 41 32 32 32 32 32 '
zz=:zz,'32 32 32 125 109 102 108 32 32 78 66 46 32 83 32 119 104 105 116 10'
zz=:zz,'1 115 112 97 99 101 32 40 115 112 97 99 101 32 97 110 100 32 104 11'
zz=:zz,'1 114 105 122 111 110 116 97 108 32 116 97 98 41 10 109 102 108 61 '
zz=:zz,'46 32 50 32 32 40 40 97 46 105 46 39 65 97 39 41 43 47 105 46 50 54'
zz=:zz,' 41 32 125 109 102 108 32 32 78 66 46 32 65 32 65 45 90 32 97 45 12'
zz=:zz,'2 32 101 120 99 108 117 100 105 110 103 32 78 32 66 10 109 102 108 '
zz=:zz,'61 46 32 51 32 32 40 97 46 105 46 39 78 39 41 32 32 32 32 32 32 32 '
zz=:zz,'32 32 32 125 109 102 108 32 32 78 66 46 32 78 32 116 104 101 32 108'
zz=:zz,' 101 116 116 101 114 32 78 10 109 102 108 61 46 32 52 32 32 40 97 4'
zz=:zz,'6 105 46 39 66 39 41 32 32 32 32 32 32 32 32 32 32 125 109 102 108 '
zz=:zz,'32 32 78 66 46 32 66 32 116 104 101 32 108 101 116 116 101 114 32 6'
zz=:zz,'6 10 109 102 108 61 46 32 53 32 32 40 97 46 105 46 39 48 49 50 51 5'
zz=:zz,'2 53 54 55 56 57 95 39 41 125 109 102 108 32 32 78 66 46 32 57 32 1'
zz=:zz,'00 105 103 105 116 115 32 97 110 100 32 95 10 109 102 108 61 46 32 '
zz=:zz,'54 32 32 40 97 46 105 46 39 46 39 41 32 32 32 32 32 32 32 32 32 32 '
zz=:zz,'125 109 102 108 32 32 78 66 46 32 68 32 46 10 109 102 108 61 46 32 '
zz=:zz,'55 32 32 40 97 46 105 46 39 58 39 41 32 32 32 32 32 32 32 32 32 32 '
zz=:zz,'125 109 102 108 32 32 78 66 46 32 67 32 58 10 109 102 108 61 46 32 '
zz=:zz,'56 32 32 40 97 46 105 46 39 39 39 39 41 32 32 32 32 32 32 32 32 32 '
zz=:zz,'125 109 102 108 32 32 78 66 46 32 81 32 113 117 111 116 101 10 109 '
zz=:zz,'102 108 61 46 32 57 32 32 40 49 51 41 32 32 32 32 32 32 32 32 32 32'
zz=:zz,' 32 32 32 32 32 125 109 102 108 32 32 78 66 46 32 67 82 10 109 102 '
zz=:zz,'108 61 46 32 49 48 32 40 49 48 41 32 32 32 32 32 32 32 32 32 32 32 '
zz=:zz,'32 32 32 32 125 109 102 108 32 32 78 66 46 32 76 70 10 10 115 102 1'
zz=:zz,'08 61 46 32 95 50 93 92 34 49 32 125 46 34 46 59 46 95 50 32 40 48 '
zz=:zz,'32 58 32 48 41 10 39 32 88 32 32 32 32 32 83 32 32 32 32 65 32 32 3'
zz=:zz,'2 32 78 32 32 32 32 66 32 32 32 32 57 32 32 32 32 68 32 32 32 32 67'
zz=:zz,' 32 32 32 32 81 32 32 32 32 67 82 32 32 32 32 32 76 70 32 32 39 93 '
zz=:zz,'48 10 32 49 32 49 32 32 49 50 32 49 32 32 50 32 49 32 32 51 32 49 3'
zz=:zz,'2 32 50 32 49 32 32 54 32 49 32 32 49 32 49 32 32 49 32 49 32 32 55'
zz=:zz,' 32 49 32 32 49 48 32 49 32 32 32 49 32 49 32 32 32 78 66 46 32 48 '
zz=:zz,'32 32 105 110 105 116 105 97 108 10 32 49 32 50 32 32 49 50 32 50 3'
zz=:zz,'2 32 50 32 50 32 32 51 32 50 32 32 50 32 50 32 32 54 32 50 32 32 49'
zz=:zz,' 32 48 32 32 49 32 48 32 32 55 32 50 32 32 49 48 32 50 32 32 32 49 '
zz=:zz,'32 50 32 32 32 78 66 46 32 49 32 32 111 116 104 101 114 10 32 49 32'
zz=:zz,' 50 32 32 49 50 32 50 32 32 50 32 48 32 32 50 32 48 32 32 50 32 48 '
zz=:zz,'32 32 50 32 48 32 32 49 32 48 32 32 49 32 48 32 32 55 32 50 32 32 4'
zz=:zz,'9 48 32 50 32 32 32 49 32 50 32 32 32 78 66 46 32 50 32 32 97 108 1'
zz=:zz,'12 47 110 117 109 10 32 49 32 50 32 32 49 50 32 50 32 32 50 32 48 3'
zz=:zz,'2 32 50 32 48 32 32 52 32 48 32 32 50 32 48 32 32 49 32 48 32 32 49'
zz=:zz,' 32 48 32 32 55 32 50 32 32 49 48 32 50 32 32 32 49 32 50 32 32 32 '
zz=:zz,'78 66 46 32 51 32 32 78 10 32 49 32 50 32 32 49 50 32 50 32 32 50 3'
zz=:zz,'2 48 32 32 50 32 48 32 32 50 32 48 32 32 50 32 48 32 32 53 32 48 32'
zz=:zz,' 32 49 32 48 32 32 55 32 50 32 32 49 48 32 50 32 32 32 49 32 50 32 '
zz=:zz,'32 32 78 66 46 32 52 32 32 78 66 10 32 57 32 48 32 32 32 57 32 48 3'
zz=:zz,'2 32 57 32 48 32 32 57 32 48 32 32 57 32 48 32 32 57 32 48 32 32 49'
zz=:zz,' 32 48 32 32 49 32 48 32 32 57 32 48 32 32 49 48 32 50 32 32 32 49 '
zz=:zz,'32 50 32 32 32 78 66 46 32 53 32 32 78 66 46 10 32 49 32 52 32 32 4'
zz=:zz,'9 51 32 48 32 32 54 32 48 32 32 54 32 48 32 32 54 32 48 32 32 54 32'
zz=:zz,' 48 32 32 54 32 48 32 32 49 32 48 32 32 55 32 52 32 32 49 48 32 50 '
zz=:zz,'32 32 32 49 32 50 32 32 32 78 66 46 32 54 32 32 110 117 109 10 32 5'
zz=:zz,'5 32 48 32 32 32 55 32 48 32 32 55 32 48 32 32 55 32 48 32 32 55 32'
zz=:zz,' 48 32 32 55 32 48 32 32 55 32 48 32 32 55 32 48 32 32 56 32 48 32 '
zz=:zz,'32 49 48 32 50 32 32 32 49 32 50 32 32 32 78 66 46 32 55 32 32 39 1'
zz=:zz,'0 32 49 32 50 32 32 49 49 32 50 32 32 50 32 50 32 32 51 32 50 32 32'
zz=:zz,' 50 32 50 32 32 54 32 50 32 32 49 32 50 32 32 49 32 50 32 32 55 32 '
zz=:zz,'48 32 32 49 48 32 50 32 32 32 49 32 50 32 32 32 78 66 46 32 56 32 3'
zz=:zz,'2 39 39 10 32 57 32 48 32 32 32 57 32 48 32 32 57 32 48 32 32 57 32'
zz=:zz,' 48 32 32 57 32 48 32 32 57 32 48 32 32 57 32 48 32 32 57 32 48 32 '
zz=:zz,'32 57 32 48 32 32 49 48 32 50 32 32 32 49 32 50 32 32 32 78 66 46 3'
zz=:zz,'2 57 32 32 99 111 109 109 101 110 116 10 32 49 32 50 32 32 49 49 32'
zz=:zz,' 50 32 32 50 32 50 32 32 52 32 50 32 32 50 32 50 32 32 54 32 50 32 '
zz=:zz,'32 49 32 50 32 32 49 32 50 32 32 55 32 50 32 32 49 48 32 50 32 32 4'
zz=:zz,'9 49 32 48 32 32 32 78 66 46 32 49 48 32 67 82 10 32 49 32 50 32 32'
zz=:zz,' 49 49 32 50 32 32 50 32 50 32 32 52 32 50 32 32 50 32 50 32 32 54 '
zz=:zz,'32 50 32 32 49 32 50 32 32 49 32 50 32 32 55 32 50 32 32 49 48 32 5'
zz=:zz,'0 32 32 32 49 32 50 32 32 32 78 66 46 32 49 49 32 67 82 76 70 10 32'
zz=:zz,' 49 32 50 32 32 49 50 32 48 32 32 50 32 50 32 32 51 32 50 32 32 50 '
zz=:zz,'32 50 32 32 54 32 48 32 32 49 32 50 32 32 49 32 50 32 32 55 32 50 3'
zz=:zz,'2 32 49 48 32 50 32 32 32 49 32 50 32 32 32 78 66 46 32 49 50 32 11'
zz=:zz,'5 112 97 99 101 10 32 49 32 50 32 32 49 51 32 48 32 32 50 32 50 32 '
zz=:zz,'32 51 32 50 32 32 50 32 50 32 32 54 32 48 32 32 49 32 50 32 32 49 3'
zz=:zz,'2 50 32 32 55 32 50 32 32 49 48 32 50 32 32 32 49 32 50 32 32 32 78'
zz=:zz,' 66 46 32 49 51 32 115 112 97 99 101 32 97 102 116 101 114 32 110 1'
zz=:zz,'17 109 10 41 10 10 78 66 46 32 100 101 102 105 110 101 32 105 110 3'
zz=:zz,'2 122 32 45 32 100 101 99 108 97 114 101 32 103 108 111 98 97 108 3'
zz=:zz,'2 102 111 114 32 40 103 100 101 112 115 41 32 40 42 41 61 58 32 119'
zz=:zz,' 102 108 10 119 102 108 95 122 95 61 58 32 40 48 59 115 102 108 59 '
zz=:zz,'109 102 108 41 32 38 32 59 58 10 10 78 66 46 42 101 110 100 100 101'
zz=:zz,' 112 101 110 100 101 110 116 115 10{a.                             '
zz=:23555{.zz
showpass 2 put ". ".'zz_',SOLOCALE,'_' [ cocurrent 'base' NB.{*JOD*}
".soclear NB.{*JOD*}

cocurrent SO__JODobj NB.{*JOD*}
zz=:''
zz=:zz,'14 2$<;._1 ''|bstats|basic statistics|buildutils|JOD/J script build '
zz=:zz,'processing words|dewhitejscript|words for removing white space char'
zz=:zz,'acters from j scripts|earthdistances|computes distances between poi'
zz=:zz,'nts on earth|htmthorn|j array formatting (thorn) that generates HTM'
zz=:zz,'L|odbcREF|references to ODBC words - require ''''dd''''|remdots|replace'
zz=:zz,' dotted arguments in J explict code|rwtabd|read and write TAB delim'
zz=:zz,'ited text tables|socketsREF|references to socket words - require '''''
zz=:zz,'socket''''|sunmoon|sun and moon calculations|trig|standard trigonomet'
zz=:zz,'ric functions|unicode|unicode utilities|wordformation|word formatio'
zz=:zz,'n on lines - browse group header|xmlutils|quick and dirty xml parsi'
zz=:zz,'ng & processing words''                                             '
zz=:692{.zz
showpass 2 8 put ". ".'zz_',SOLOCALE,'_' [ cocurrent 'base' NB.{*JOD*}
".soclear NB.{*JOD*}

cocurrent SO__JODobj NB.{*JOD*}
zz=:''
zz=:zz,'2 2$''sunmoon'';(239 187 191 96 115 117 110 109 111 111 110 96 32 105'
zz=:zz,' 115 32 97 32 99 111 108 108 101 99 116 105 111 110 32 111 102 32 9'
zz=:zz,'8 97 115 105 99 32 97 115 116 114 111 110 111 109 105 99 97 108 32 '
zz=:zz,'97 108 103 111 114 105 116 104 109 115 10 84 104 101 32 107 101 121'
zz=:zz,' 32 118 101 114 98 115 32 97 114 101 32 96 109 111 111 110 115 96 4'
zz=:zz,'4 32 96 115 117 110 114 105 115 101 115 101 116 48 96 32 97 110 100'
zz=:zz,' 32 96 115 117 110 114 105 115 101 115 101 116 49 46 96 32 32 10 65'
zz=:zz,' 108 108 32 111 102 32 116 104 101 115 101 32 118 101 114 98 115 32'
zz=:zz,' 119 101 114 101 32 100 101 114 105 118 101 100 32 102 114 111 109 '
zz=:zz,'32 66 65 83 73 67 32 112 114 111 103 114 97 109 115 32 112 117 98 1'
zz=:zz,'08 105 115 104 101 100 10 105 110 32 42 83 107 121 32 38 32 84 101 '
zz=:zz,'108 101 115 99 111 112 101 42 32 109 97 103 97 122 105 110 101 32 1'
zz=:zz,'05 110 32 116 104 101 32 49 57 57 48 39 115 46 32 84 104 101 32 114'
zz=:zz,' 101 115 116 32 111 102 10 116 104 101 32 118 101 114 98 115 32 105'
zz=:zz,' 110 32 96 115 117 110 109 111 111 110 96 32 97 114 101 32 109 111 '
zz=:zz,'115 116 108 121 32 100 97 116 101 32 97 110 100 32 116 114 105 103 '
zz=:zz,'111 110 111 109 101 116 114 105 99 10 117 116 105 108 105 116 105 1'
zz=:zz,'01 115 46 10 10 92 115 117 98 115 101 99 116 105 111 110 123 92 116'
zz=:zz,' 101 120 116 116 116 123 115 117 110 109 111 111 110 125 32 73 110 '
zz=:zz,'116 101 114 102 97 99 101 125 10 10 126 126 126 126 32 123 32 46 10'
zz=:zz,'6 32 125 10 32 32 99 97 108 109 111 111 110 115 32 32 32 32 32 32 7'
zz=:zz,'8 66 46 32 99 97 108 101 110 100 97 114 32 100 97 116 101 115 32 11'
zz=:zz,'1 102 32 110 101 119 32 97 110 100 32 102 117 108 108 32 109 111 11'
zz=:zz,'1 110 115 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 '
zz=:zz,'32 32 10 32 32 109 111 111 110 115 32 32 32 32 32 32 32 32 32 78 66'
zz=:zz,' 46 32 116 105 109 101 115 32 111 102 32 110 101 119 32 97 110 100 '
zz=:zz,'32 102 117 108 108 32 109 111 111 110 115 32 102 111 114 32 110 32 '
zz=:zz,'99 97 108 101 110 100 97 114 32 121 101 97 114 115 32 32 32 32 32 3'
zz=:zz,'2 32 32 32 10 32 32 115 117 110 114 105 115 101 115 101 116 48 32 3'
zz=:zz,'2 32 78 66 46 32 99 111 109 112 117 116 101 115 32 115 117 110 32 1'
zz=:zz,'14 105 115 101 32 97 110 100 32 115 101 116 32 116 105 109 101 115 '
zz=:zz,'32 45 32 115 101 101 32 103 114 111 117 112 32 100 111 99 117 109 1'
zz=:zz,'01 110 116 97 116 105 111 110 10 32 32 115 117 110 114 105 115 101 '
zz=:zz,'115 101 116 49 32 32 32 78 66 46 32 99 111 109 112 117 116 101 115 '
zz=:zz,'32 115 117 110 32 114 105 115 101 32 97 110 100 32 115 101 116 32 1'
zz=:zz,'16 105 109 101 115 32 45 32 115 101 101 32 103 114 111 117 112 32 1'
zz=:zz,'00 111 99 117 109 101 110 116 97 116 105 111 110 10 126 126 126 126'
zz=:zz,' 10 10 92 115 117 98 115 101 99 116 105 111 110 123 92 116 101 120 '
zz=:zz,'116 98 102 92 116 101 120 116 116 116 123 115 117 110 114 105 115 1'
zz=:zz,'01 115 101 116 48 125 32 92 116 101 120 116 115 108 123 118 45 45 1'
zz=:zz,'25 32 115 117 110 114 105 115 101 32 97 110 100 32 115 117 110 115 '
zz=:zz,'101 116 32 116 105 109 101 115 125 10 10 84 104 105 115 32 32 118 1'
zz=:zz,'01 114 98 32 104 97 115 32 98 101 101 110 32 97 100 97 112 116 101 '
zz=:zz,'100 32 102 114 111 109 32 97 32 66 65 83 73 67 32 112 114 111 103 1'
zz=:zz,'14 97 109 32 115 117 98 109 105 116 116 101 100 32 98 121 10 82 111'
zz=:zz,' 98 105 110 32 32 71 46 32 32 83 116 117 97 114 116 32 32 42 83 107'
zz=:zz,' 121 32 38 32 84 101 108 101 115 99 111 112 101 39 115 42 32 32 115'
zz=:zz,' 104 111 114 116 101 115 116 32 32 115 117 110 114 105 115 101 47 1'
zz=:zz,'15 101 116 10 112 114 111 103 114 97 109 32 32 99 111 110 116 101 1'
zz=:zz,'15 116 46 32 87 105 110 110 105 110 103 32 32 101 110 116 114 105 1'
zz=:zz,'01 115 32 119 101 114 101 32 108 105 115 116 101 100 32 32 105 110 '
zz=:zz,'32 116 104 101 32 32 77 97 114 99 104 10 49 57 57 53 32 65 115 116 '
zz=:zz,'114 111 110 111 109 105 99 97 108 32 67 111 109 112 117 116 105 110'
zz=:zz,' 103 32 99 111 108 117 109 110 46 10 10 84 104 101 32 32 74 32 118 '
zz=:zz,'101 114 115 105 111 110 32 111 102 32 116 104 105 115 32 97 108 103'
zz=:zz,' 111 114 105 116 104 109 32 104 97 115 32 98 101 101 110 32 118 101'
zz=:zz,' 99 116 111 114 105 122 101 100 46 32 32 73 116 32 99 97 110 10 99 '
zz=:zz,'111 109 112 117 116 101 32 97 110 121 32 110 117 109 98 101 114 32 '
zz=:zz,'111 102 32 115 117 110 114 105 115 101 32 97 110 100 32 115 117 110'
zz=:zz,' 115 101 116 32 116 105 109 101 115 32 105 110 32 111 110 101 32 99'
zz=:zz,' 97 108 108 46 10 10 84 104 101 32 96 40 121 41 96 32 97 114 103 11'
zz=:zz,'7 109 101 110 116 32 105 115 32 97 32 96 53 42 110 96 32 102 108 11'
zz=:zz,'1 97 116 105 110 103 32 112 111 105 110 116 32 116 97 98 108 101 32'
zz=:zz,' 119 104 101 114 101 58 10 10 32 32 32 32 48 123 32 105 115 32 108 '
zz=:zz,'97 116 105 116 117 100 101 32 105 110 32 100 101 103 114 101 101 11'
zz=:zz,'5 32 119 105 116 104 32 110 111 114 116 104 101 114 110 32 108 97 1'
zz=:zz,'16 105 116 117 100 101 115 32 112 111 115 105 116 105 118 101 46 10'
zz=:zz,' 32 32 32 32 49 123 32 105 115 32 108 111 110 103 105 116 117 100 1'
zz=:zz,'01 32 105 110 32 100 101 103 114 101 101 115 32 119 105 116 104 32 '
zz=:zz,'119 101 115 116 101 114 110 32 108 111 110 103 105 116 117 100 101 '
zz=:zz,'115 32 110 101 103 97 116 105 118 101 46 10 32 32 32 32 50 123 32 1'
zz=:zz,'05 115 32 119 101 115 116 101 114 110 32 116 105 109 101 32 122 111'
zz=:zz,' 110 101 115 32 101 120 112 114 101 115 115 101 100 32 97 115 32 11'
zz=:zz,'2 111 115 105 116 105 118 101 32 119 104 111 108 101 32 104 111 117'
zz=:zz,' 114 115 46 10 32 32 32 32 51 123 32 105 115 32 116 104 101 32 109 '
zz=:zz,'111 110 116 104 32 110 117 109 98 101 114 46 10 32 32 32 32 52 123 '
zz=:zz,'32 105 115 32 116 104 101 32 100 97 121 32 110 117 109 98 101 114 4'
zz=:zz,'6 10 10 84 104 101 32 114 101 115 117 108 116 32 105 115 32 97 32 1'
zz=:zz,'10 117 109 101 114 105 99 32 116 97 98 108 101 32 119 105 116 104 3'
zz=:zz,'2 102 111 117 114 32 114 111 119 115 46 32 32 84 111 32 104 97 110 '
zz=:zz,'100 108 101 32 116 104 101 32 99 97 115 101 115 10 119 104 101 110 '
zz=:zz,'32 116 104 101 32 115 117 110 32 110 101 118 101 114 32 114 105 115'
zz=:zz,' 101 115 32 111 114 32 115 101 116 115 32 116 104 101 32 102 105 11'
zz=:zz,'4 115 116 32 116 119 111 32 101 108 101 109 101 110 116 115 32 111 '
zz=:zz,'102 32 116 104 101 10 99 111 114 114 101 115 112 111 110 100 105 11'
zz=:zz,'0 103 32 114 101 115 117 108 116 32 99 111 108 117 109 110 115 32 9'
zz=:zz,'7 114 101 58 10 10 32 32 32 32 48 123 32 105 115 32 78 79 82 73 83 '
zz=:zz,'69 83 69 84 32 97 110 32 105 110 118 97 108 105 100 32 104 111 117 '
zz=:zz,'114 32 105 110 100 105 99 97 116 105 110 103 32 110 111 32 114 105 '
zz=:zz,'115 101 32 111 114 32 115 101 116 10 32 32 32 32 49 123 32 105 115 '
zz=:zz,'32 48 32 119 104 101 110 32 116 104 101 32 115 117 110 32 110 101 1'
zz=:zz,'18 101 114 32 114 105 115 101 115 10 32 32 32 32 49 123 32 105 115 '
zz=:zz,'32 49 32 119 104 101 110 32 116 104 101 32 115 117 110 32 110 101 1'
zz=:zz,'18 101 114 32 115 101 116 115 10 10 87 97 114 110 105 110 103 58 32'
zz=:zz,' 116 104 105 115 32 97 108 103 111 114 105 116 104 109 32 98 114 10'
zz=:zz,'1 97 107 115 32 102 111 114 32 108 97 116 105 116 117 100 101 115 3'
zz=:zz,'2 99 108 111 115 101 10 116 111 32 116 104 101 32 83 111 117 116 10'
zz=:zz,'4 32 112 111 108 101 46 10 10 84 104 101 32 111 114 105 103 105 110'
zz=:zz,' 97 108 32 66 65 83 73 67 32 99 111 100 101 32 104 97 115 32 98 101'
zz=:zz,' 101 110 32 115 108 105 103 104 116 108 121 32 109 111 100 105 102 '
zz=:zz,'105 101 100 10 116 111 32 117 115 101 32 99 111 110 116 114 111 108'
zz=:zz,' 32 115 116 114 117 99 116 117 114 101 115 32 105 110 32 112 108 97'
zz=:zz,' 99 101 32 111 102 32 71 79 84 79 39 115 32 97 110 100 32 108 105 1'
zz=:zz,'10 101 32 110 117 109 98 101 114 115 46 10 10 65 100 97 112 116 101'
zz=:zz,' 100 32 102 114 111 109 58 10 10 126 126 126 126 32 123 32 46 99 32'
zz=:zz,' 46 110 117 109 98 101 114 76 105 110 101 115 32 115 116 97 114 116'
zz=:zz,' 70 114 111 109 61 34 49 34 125 32 10 47 42 32 83 117 110 114 105 1'
zz=:zz,'15 101 47 115 101 116 32 98 121 32 82 46 32 71 46 32 83 116 117 97 '
zz=:zz,'114 116 44 32 32 77 101 120 105 99 111 32 67 105 116 121 44 32 77 1'
zz=:zz,'01 120 105 99 111 32 42 47 10 80 73 32 61 32 51 46 49 52 49 53 57 5'
zz=:zz,'0 54 53 35 58 32 68 82 32 61 32 80 73 32 47 32 49 56 48 58 32 82 68'
zz=:zz,' 32 61 32 49 32 47 32 68 82 10 73 78 80 85 84 32 34 76 97 116 44 32'
zz=:zz,' 76 111 110 103 32 40 100 101 103 41 34 59 32 66 53 44 32 76 53 10 '
zz=:zz,'73 78 80 85 84 32 34 84 105 109 101 32 122 111 110 101 32 40 104 11'
zz=:zz,'4 115 41 34 59 32 72 10 66 53 32 61 32 68 82 32 42 32 66 53 10 73 7'
zz=:zz,'8 80 85 84 32 34 77 111 110 116 104 44 32 100 97 121 34 59 32 77 44'
zz=:zz,' 32 68 10 78 32 61 32 73 78 84 40 50 55 53 32 42 32 77 32 47 32 57 '
zz=:zz,'41 32 45 32 50 32 42 32 73 78 84 40 40 77 32 43 32 57 41 32 47 32 4'
zz=:zz,'9 50 41 32 43 32 68 32 45 32 51 48 10 76 48 32 61 32 52 46 56 55 55'
zz=:zz,' 49 32 43 32 46 48 49 55 50 32 42 32 40 78 32 43 32 46 53 32 45 32 '
zz=:zz,'76 53 32 47 32 51 54 48 41 10 67 32 61 32 46 48 51 51 52 50 32 42 3'
zz=:zz,'2 83 73 78 40 76 48 32 43 32 49 46 51 52 53 41 10 67 50 32 61 32 82'
zz=:zz,' 68 32 42 32 40 65 84 78 40 84 65 78 40 76 48 32 43 32 67 41 41 32 '
zz=:zz,'45 32 65 84 78 40 46 57 49 55 53 32 42 32 84 65 78 40 76 48 32 43 3'
zz=:zz,'2 67 41 41 32 45 32 67 41 10 83 68 32 61 32 46 51 57 55 56 32 42 32'
zz=:zz,' 83 73 78 40 76 48 32 43 32 67 41 58 32 67 68 32 61 32 83 81 82 40 '
zz=:zz,'49 32 45 32 83 68 32 42 32 83 68 41 10 83 67 32 61 32 40 83 68 32 4'
zz=:zz,'2 32 83 73 78 40 66 53 41 32 43 32 46 48 49 52 53 41 32 47 32 40 67'
zz=:zz,' 79 83 40 66 53 41 32 42 32 67 68 41 10 73 70 32 65 66 83 40 83 67 '
zz=:zz,'41 32 60 61 32 49 32 84 72 69 78 10 32 32 67 51 32 61 32 82 68 32 4'
zz=:zz,'2 32 65 84 78 40 83 67 32 47 32 83 81 82 40 49 32 45 32 83 67 32 42'
zz=:zz,' 32 83 67 41 41 10 32 32 82 49 32 61 32 54 32 45 32 72 32 45 32 40 '
zz=:zz,'76 53 32 43 32 67 50 32 43 32 67 51 41 32 47 32 49 53 10 32 32 72 8'
zz=:zz,'2 32 61 32 73 78 84 40 82 49 41 58 32 77 82 32 61 32 73 78 84 40 40'
zz=:zz,' 82 49 32 45 32 72 82 41 32 42 32 54 48 41 10 32 32 80 82 73 78 84 '
zz=:zz,'32 85 83 73 78 71 32 34 83 117 110 114 105 115 101 32 97 116 32 35 '
zz=:zz,'35 58 35 35 34 59 32 72 82 59 32 77 82 10 32 32 83 49 32 61 32 49 5'
zz=:zz,'6 32 45 32 72 32 45 32 40 76 53 32 43 32 67 50 32 45 32 67 51 41 32'
zz=:zz,' 47 32 49 53 10 32 32 72 83 32 61 32 73 78 84 40 83 49 41 58 32 77 '
zz=:zz,'83 32 61 32 73 78 84 40 40 83 49 32 45 32 72 83 41 32 42 32 54 48 4'
zz=:zz,'1 10 32 32 80 82 73 78 84 32 85 83 73 78 71 32 34 83 117 110 115 10'
zz=:zz,'1 116 32 97 116 32 35 35 58 35 35 34 59 32 72 83 59 32 77 83 10 69 '
zz=:zz,'76 83 69 73 70 32 83 67 32 62 32 49 32 84 72 69 78 10 32 32 80 82 7'
zz=:zz,'3 78 84 32 34 83 117 110 32 117 112 32 97 108 108 32 100 97 121 34 '
zz=:zz,'10 69 76 83 69 73 70 32 83 67 32 60 32 45 49 32 84 72 69 78 10 32 3'
zz=:zz,'2 80 82 73 78 84 32 34 83 117 110 32 100 111 119 110 32 97 108 108 '
zz=:zz,'32 100 97 121 34 10 69 78 68 32 73 70 10 69 78 68 10 126 126 126 12'
zz=:zz,'6 10 10 126 126 126 126 32 123 32 46 106 32 125 10 109 111 110 97 1'
zz=:zz,'00 58 32 110 116 82 105 115 101 115 101 116 32 61 46 32 115 117 110'
zz=:zz,' 114 105 115 101 115 101 116 48 32 102 108 66 76 72 77 68 10 10 32 '
zz=:zz,'32 78 66 46 32 114 105 115 101 32 97 110 100 32 115 101 116 32 116 '
zz=:zz,'105 109 101 115 32 97 116 32 68 111 103 32 76 97 107 101 32 116 111'
zz=:zz,' 100 97 121 32 40 100 97 121 108 105 103 104 116 32 115 97 118 105 '
zz=:zz,'110 103 115 41 10 32 32 116 100 61 46 32 40 52 52 32 43 32 49 57 37'
zz=:zz,' 54 48 41 44 40 45 32 55 54 32 43 32 50 49 37 54 48 41 44 32 52 32 '
zz=:zz,'44 32 125 46 32 116 111 100 97 121 32 48 10 32 32 115 117 110 114 1'
zz=:zz,'05 115 101 115 101 116 48 32 116 100 10 10 32 32 78 66 46 32 114 10'
zz=:zz,'5 115 101 32 97 110 100 32 115 101 116 32 116 105 109 101 115 32 11'
zz=:zz,'1 110 32 74 117 110 101 32 51 48 32 111 110 32 71 114 101 101 110 1'
zz=:zz,'19 105 99 104 32 109 101 114 105 100 105 97 110 10 32 32 116 48 61 '
zz=:zz,'46 32 32 32 48 32 48 32 48 32 54 32 51 48 32 32 32 78 66 46 32 101 '
zz=:zz,'113 117 97 116 111 114 10 32 32 116 49 61 46 32 32 52 57 32 48 32 4'
zz=:zz,'8 32 54 32 51 48 32 32 32 78 66 46 32 110 111 114 116 104 32 45 32 '
zz=:zz,'108 97 116 32 111 102 32 119 101 115 116 101 114 110 32 85 83 47 67'
zz=:zz,' 97 110 97 100 97 32 98 111 114 100 101 114 10 32 32 116 50 61 46 3'
zz=:zz,'2 95 52 55 32 48 32 48 32 54 32 51 48 32 32 32 78 66 46 32 115 111 '
zz=:zz,'117 116 104 32 45 32 115 111 117 116 104 101 114 110 32 67 104 105 '
zz=:zz,'108 101 32 97 110 100 32 65 114 103 101 110 116 105 110 97 10 32 32'
zz=:zz,' 116 51 61 46 32 32 55 53 32 48 32 48 32 54 32 51 48 32 32 32 78 66'
zz=:zz,' 46 32 102 97 114 32 110 111 114 116 104 32 40 115 117 110 32 97 10'
zz=:zz,'8 119 97 121 115 32 117 112 41 10 32 32 116 52 61 46 32 95 55 53 32'
zz=:zz,' 48 32 48 32 54 32 51 48 32 32 32 78 66 46 32 102 97 114 32 115 111'
zz=:zz,' 117 116 104 32 40 115 117 110 32 97 108 119 97 121 115 32 100 111 '
zz=:zz,'119 110 41 10 10 32 32 115 117 110 114 105 115 101 115 101 116 48 3'
zz=:zz,'2 116 48 10 10 32 32 115 117 110 114 105 115 101 115 101 116 48 32 '
zz=:zz,'116 48 32 44 32 116 49 32 44 32 116 50 32 44 32 116 51 32 44 58 32 '
zz=:zz,'116 52 10 10 32 32 78 66 46 32 116 105 109 101 115 32 111 110 32 10'
zz=:zz,'1 113 117 97 116 111 114 32 102 111 114 32 77 97 114 99 104 32 50 4'
zz=:zz,'9 32 102 111 114 32 97 108 108 32 49 32 104 111 117 114 32 116 105 '
zz=:zz,'109 101 32 122 111 110 101 115 10 32 32 115 117 110 114 105 115 101'
zz=:zz,' 115 101 116 48 32 32 48 32 48 32 44 34 49 32 40 44 46 105 46 32 50'
zz=:zz,' 52 41 32 44 34 49 32 93 32 51 32 50 49 10 10 32 32 78 66 46 32 116'
zz=:zz,' 105 109 101 115 32 102 111 114 32 99 97 108 101 110 100 97 114 32 '
zz=:zz,'121 101 97 114 32 49 57 57 53 32 111 110 32 116 104 101 32 71 114 1'
zz=:zz,'01 101 110 119 105 99 104 32 109 101 114 105 100 105 97 110 10 32 3'
zz=:zz,'2 109 100 57 53 61 46 32 32 52 55 32 48 32 48 32 44 34 49 32 125 46'
zz=:zz,' 34 49 32 121 101 97 114 100 97 116 101 115 32 49 57 57 53 10 32 32'
zz=:zz,' 114 115 48 57 53 61 46 32 115 117 110 114 105 115 101 115 101 116 '
zz=:zz,'48 32 109 100 57 53 10 126 126 126 126 10 10 92 115 117 98 115 101 '
zz=:zz,'99 116 105 111 110 123 92 116 101 120 116 98 102 92 116 101 120 116'
zz=:zz,' 116 116 123 115 117 110 114 105 115 101 115 101 116 49 125 32 92 1'
zz=:zz,'16 101 120 116 115 108 123 118 45 45 125 32 115 117 110 114 105 115'
zz=:zz,' 101 32 97 110 100 32 115 117 110 115 101 116 32 116 105 109 101 11'
zz=:zz,'5 125 10 10 84 104 105 115 32 118 101 114 98 32 104 97 115 32 98 10'
zz=:zz,'1 101 110 32 97 100 97 112 116 101 100 32 102 114 111 109 32 97 32 '
zz=:zz,'66 65 83 73 67 32 112 114 111 103 114 97 109 32 115 117 98 109 105 '
zz=:zz,'116 116 101 100 32 32 98 121 10 74 97 109 101 115 32 32 66 114 105 '
zz=:zz,'109 104 97 108 108 32 32 116 111 32 42 83 107 121 32 38 32 84 101 1'
zz=:zz,'08 101 115 99 111 112 101 39 115 42 32 34 115 104 111 114 116 101 1'
zz=:zz,'15 116 32 115 117 110 114 105 115 101 47 115 101 116 10 112 114 111'
zz=:zz,' 103 114 97 109 34 32 99 111 110 116 101 115 116 46 32 32 87 105 11'
zz=:zz,'0 110 105 110 103 32 101 110 116 114 105 101 115 32 119 101 114 101'
zz=:zz,' 32 32 108 105 115 116 101 100 32 105 110 32 32 116 104 101 32 32 7'
zz=:zz,'7 97 114 99 104 10 49 57 57 53 32 65 115 116 114 111 110 111 109 10'
zz=:zz,'5 99 97 108 32 67 111 109 112 117 116 105 110 103 32 99 111 108 117'
zz=:zz,' 109 110 46 10 10 84 104 101 32 32 96 40 121 41 96 32 97 114 103 11'
zz=:zz,'7 109 101 110 116 32 32 111 102 32 96 115 117 110 114 105 115 101 1'
zz=:zz,'15 101 116 49 96 32 32 105 115 32 97 32 32 96 54 42 110 96 32 102 1'
zz=:zz,'08 111 97 116 105 110 103 32 112 111 105 110 116 10 116 97 98 108 1'
zz=:zz,'01 32 119 104 101 114 101 58 10 10 32 32 32 32 48 123 32 105 115 32'
zz=:zz,' 108 97 116 105 116 117 100 101 32 105 110 32 100 101 103 114 101 1'
zz=:zz,'01 115 32 119 105 116 104 32 110 111 114 116 104 101 114 110 32 108'
zz=:zz,' 97 116 105 116 117 100 101 115 32 112 111 115 105 116 105 118 101 '
zz=:zz,'46 10 32 32 32 32 49 123 32 105 115 32 108 111 110 103 105 116 117 '
zz=:zz,'100 101 32 105 110 32 100 101 103 114 101 101 115 32 119 105 116 10'
zz=:zz,'4 32 119 101 115 116 101 114 110 32 108 111 110 103 105 116 117 100'
zz=:zz,' 101 115 32 110 101 103 97 116 105 118 101 46 10 32 32 32 32 50 123'
zz=:zz,' 32 105 115 32 119 101 115 116 101 114 110 32 116 105 109 101 32 12'
zz=:zz,'2 111 110 101 115 32 101 120 112 114 101 115 115 101 100 32 97 115 '
zz=:zz,'32 112 111 115 105 116 105 118 101 32 119 104 111 108 101 32 104 11'
zz=:zz,'1 117 114 115 46 10 32 32 32 32 51 123 32 105 115 32 116 104 101 32'
zz=:zz,' 109 111 110 116 104 32 110 117 109 98 101 114 46 10 32 32 32 32 52'
zz=:zz,' 123 32 105 115 32 116 104 101 32 100 97 121 32 110 117 109 98 101 '
zz=:zz,'114 46 10 32 32 32 32 53 123 32 105 115 32 116 104 101 32 121 101 9'
zz=:zz,'7 114 46 10 10 84 104 101 32 114 101 115 117 108 116 32 105 115 32 '
zz=:zz,'97 32 110 117 109 101 114 105 99 32 116 97 98 108 101 32 119 105 11'
zz=:zz,'6 104 32 102 111 117 114 32 114 111 119 115 46 32 32 84 111 32 104 '
zz=:zz,'97 110 100 108 101 32 116 104 101 32 99 97 115 101 115 10 119 104 1'
zz=:zz,'01 110 32 116 104 101 32 115 117 110 32 110 101 118 101 114 32 114 '
zz=:zz,'105 115 101 115 32 111 114 32 115 101 116 115 32 116 104 101 32 102'
zz=:zz,' 105 114 115 116 32 116 119 111 32 101 108 101 109 101 110 116 115 '
zz=:zz,'32 111 102 32 116 104 101 10 99 111 114 114 101 115 112 111 110 100'
zz=:zz,' 105 110 103 32 114 101 115 117 108 116 32 99 111 108 117 109 110 1'
zz=:zz,'15 32 110 32 97 114 101 58 10 10 32 32 32 32 48 123 32 105 115 32 7'
zz=:zz,'8 79 82 73 83 69 83 69 84 32 97 110 32 105 110 118 97 108 105 100 3'
zz=:zz,'2 104 111 117 114 32 116 104 97 116 32 105 110 100 105 99 97 116 10'
zz=:zz,'1 115 32 110 111 32 114 105 115 101 32 111 114 32 115 101 116 46 10'
zz=:zz,' 32 32 32 32 49 123 32 105 115 32 48 32 119 104 101 110 32 116 104 '
zz=:zz,'101 32 115 117 110 32 110 101 118 101 114 32 114 105 115 101 115 46'
zz=:zz,' 10 32 32 32 32 49 123 32 105 115 32 49 32 119 104 101 110 32 116 1'
zz=:zz,'04 101 32 115 117 110 32 110 101 118 101 114 32 115 101 116 115 46 '
zz=:zz,'10 10 65 100 97 112 116 101 100 32 102 114 111 109 58 10 10 126 126'
zz=:zz,' 126 126 32 123 32 46 99 32 46 110 117 109 98 101 114 76 105 110 10'
zz=:zz,'1 115 32 115 116 97 114 116 70 114 111 109 61 34 49 34 125 32 10 47'
zz=:zz,' 42 32 83 117 110 114 105 115 101 47 115 101 116 32 98 121 32 74 97'
zz=:zz,' 109 101 115 32 66 114 105 109 104 97 108 108 44 32 83 116 46 32 65'
zz=:zz,' 108 98 97 110 115 44 32 87 86 32 42 47 10 80 73 32 61 32 51 46 49 '
zz=:zz,'52 49 53 57 50 55 35 58 32 68 82 32 61 32 80 73 32 47 32 49 56 48 5'
zz=:zz,'8 32 68 68 32 61 32 51 54 48 32 47 32 51 54 53 46 50 53 54 51 54 35'
zz=:zz,' 58 32 68 73 77 32 68 40 50 48 41 10 68 65 84 65 32 48 44 51 49 44 '
zz=:zz,'53 57 44 57 48 44 49 50 48 44 49 53 49 44 49 56 49 44 50 49 50 44 5'
zz=:zz,'0 52 51 44 50 55 51 44 51 48 52 44 51 51 52 10 70 79 82 32 67 32 61'
zz=:zz,' 32 49 32 84 79 32 49 50 58 32 82 69 65 68 32 68 40 67 41 58 32 78 '
zz=:zz,'69 88 84 32 67 10 73 78 80 85 84 32 34 76 97 116 44 32 108 111 110 '
zz=:zz,'103 34 59 32 76 65 44 32 76 79 10 73 78 80 85 84 32 34 77 111 110 1'
zz=:zz,'16 104 44 32 100 97 121 44 32 121 101 97 114 34 59 32 77 44 32 68 4'
zz=:zz,'4 32 89 10 73 70 32 89 32 47 32 52 32 61 32 73 78 84 40 89 32 47 32'
zz=:zz,' 52 41 32 84 72 69 78 32 70 79 82 32 67 32 61 32 51 32 84 79 32 49 '
zz=:zz,'50 58 32 68 40 67 41 32 61 32 68 40 67 41 32 43 32 49 58 32 78 69 8'
zz=:zz,'8 84 32 67 10 68 89 32 61 32 68 40 77 41 32 43 32 68 58 32 68 89 32'
zz=:zz,' 61 32 68 89 32 45 32 76 79 32 47 32 51 54 48 58 32 68 89 32 61 32 '
zz=:zz,'68 89 32 43 32 46 53 10 84 72 32 61 32 57 46 51 53 55 48 48 49 32 4'
zz=:zz,'3 32 68 68 32 42 32 68 89 32 43 32 49 46 57 49 52 32 42 32 83 73 78'
zz=:zz,' 40 68 82 32 42 32 40 68 68 32 42 32 68 89 32 45 32 51 46 57 55 41 '
zz=:zz,'41 10 67 51 32 61 32 46 51 57 55 56 32 42 32 67 79 83 40 68 82 32 4'
zz=:zz,'2 32 84 72 41 10 68 67 32 61 32 45 49 32 47 32 68 82 32 42 32 65 84'
zz=:zz,' 78 40 67 51 32 47 32 40 83 81 82 40 49 32 45 32 67 51 32 94 32 50 '
zz=:zz,'41 41 41 10 73 70 32 76 65 32 60 32 48 32 84 72 69 78 32 65 49 32 6'
zz=:zz,'1 32 57 48 32 43 32 76 65 32 45 32 68 67 32 69 76 83 69 32 65 49 32'
zz=:zz,' 61 32 57 48 32 45 32 76 65 32 43 32 68 67 58 32 80 82 73 78 84 10 '
zz=:zz,'73 70 32 65 49 32 60 32 45 53 48 32 47 32 54 48 32 84 72 69 78 32 8'
zz=:zz,'0 82 73 78 84 32 34 83 117 110 32 110 101 118 101 114 32 114 105 11'
zz=:zz,'5 101 115 34 58 32 71 79 84 79 32 50 48 48 10 73 70 32 76 65 32 60 '
zz=:zz,'32 48 32 84 72 69 78 32 65 50 32 61 32 45 57 48 32 45 32 76 65 32 4'
zz=:zz,'5 32 68 67 32 69 76 83 69 32 65 50 32 61 32 76 65 32 45 32 57 48 32'
zz=:zz,' 43 32 68 67 10 73 70 32 65 50 32 62 61 32 45 53 48 32 47 32 54 48 '
zz=:zz,'32 84 72 69 78 32 80 82 73 78 84 32 34 83 117 110 32 110 101 118 10'
zz=:zz,'1 114 32 115 101 116 115 34 58 32 71 79 84 79 32 50 48 48 10 67 49 '
zz=:zz,'32 61 32 40 83 73 78 40 45 68 82 32 42 32 53 48 32 47 32 54 48 41 3'
zz=:zz,'2 45 32 83 73 78 40 68 82 32 42 32 68 67 41 32 42 32 83 73 78 40 68'
zz=:zz,' 82 32 42 32 76 65 41 41 32 47 32 40 67 79 83 40 68 82 32 42 32 68 '
zz=:zz,'67 41 32 42 32 67 79 83 40 68 82 32 42 32 76 65 41 41 10 84 50 32 6'
zz=:zz,'1 32 40 49 32 47 32 68 82 41 32 42 32 65 84 78 40 83 81 82 40 49 32'
zz=:zz,' 45 32 67 49 32 94 32 50 41 32 47 32 67 49 41 58 32 73 70 32 67 49 '
zz=:zz,'32 62 61 32 48 32 84 72 69 78 32 84 49 32 61 32 51 54 48 32 45 32 8'
zz=:zz,'4 50 10 73 70 32 67 49 32 60 32 48 32 84 72 69 78 32 84 50 32 61 32'
zz=:zz,' 49 56 48 32 43 32 84 50 58 32 84 49 32 61 32 51 54 48 32 45 32 84 '
zz=:zz,'50 10 84 82 32 61 32 84 49 32 47 32 49 53 32 45 32 49 50 58 32 84 8'
zz=:zz,'3 32 61 32 84 50 32 47 32 49 53 10 69 84 32 61 32 45 46 49 50 55 54'
zz=:zz,' 32 42 32 83 73 78 40 68 82 32 42 32 40 68 68 32 42 32 68 89 32 45 '
zz=:zz,'32 51 46 57 55 41 41 32 45 32 46 49 53 49 49 32 42 32 83 73 78 40 6'
zz=:zz,'8 82 32 42 32 40 50 32 42 32 68 68 32 42 32 68 89 32 43 32 49 55 46'
zz=:zz,' 56 54 41 41 10 84 82 32 61 32 84 82 32 45 32 69 84 58 32 84 83 32 '
zz=:zz,'61 32 84 83 32 45 32 69 84 10 73 78 80 85 84 32 34 84 105 109 101 3'
zz=:zz,'2 122 111 110 101 32 40 104 41 34 59 32 84 90 10 84 67 32 61 32 45 '
zz=:zz,'84 90 32 45 32 76 79 32 47 32 49 53 58 32 82 32 61 32 84 82 32 43 3'
zz=:zz,'2 84 67 58 32 83 32 61 32 84 83 32 43 32 84 67 10 67 50 32 61 32 40'
zz=:zz,' 83 73 78 40 68 82 32 42 32 68 67 41 32 45 32 83 73 78 40 68 82 32 '
zz=:zz,'42 32 76 65 41 32 42 32 83 73 78 40 45 68 82 32 42 32 53 48 32 47 3'
zz=:zz,'2 54 48 41 41 32 47 32 40 67 79 83 40 68 82 32 42 32 76 65 41 32 45'
zz=:zz,' 32 83 73 78 40 68 82 32 42 32 76 65 41 32 42 32 83 73 78 40 45 68 '
zz=:zz,'82 32 42 32 53 48 32 47 32 54 48 41 41 10 90 49 32 61 32 40 49 32 4'
zz=:zz,'7 32 68 82 41 32 42 32 65 84 78 40 83 81 82 40 49 32 45 32 67 50 32'
zz=:zz,' 94 32 50 41 32 47 32 67 50 41 58 32 73 70 32 67 50 32 62 61 32 48 '
zz=:zz,'32 84 72 69 78 32 90 50 32 61 32 51 54 48 32 45 32 90 49 10 73 70 3'
zz=:zz,'2 67 50 32 60 32 48 32 84 72 69 78 32 90 49 32 61 32 49 56 48 32 43'
zz=:zz,' 32 90 49 58 32 90 50 32 61 32 51 54 48 32 45 32 90 49 10 80 82 73 '
zz=:zz,'78 84 32 34 83 117 110 114 105 115 101 32 34 59 32 73 78 84 40 82 4'
zz=:zz,'1 59 32 34 104 34 59 32 73 78 84 40 54 48 48 32 42 32 40 82 32 45 3'
zz=:zz,'2 73 78 84 40 82 41 41 41 32 47 32 49 48 59 10 80 82 73 78 84 32 34'
zz=:zz,' 109 32 97 46 109 46 44 32 97 122 105 109 117 116 104 32 34 59 32 7'
zz=:zz,'3 78 84 40 49 48 32 42 32 90 49 41 32 47 32 49 48 10 80 82 73 78 84'
zz=:zz,' 32 34 83 117 110 115 101 116 32 34 59 32 73 78 84 40 83 41 59 32 3'
zz=:zz,'4 104 34 59 32 73 78 84 40 54 48 48 32 42 32 40 83 32 45 32 73 78 8'
zz=:zz,'4 40 83 41 41 41 32 47 32 49 48 59 10 80 82 73 78 84 32 34 109 32 1'
zz=:zz,'12 46 109 46 44 32 97 122 105 109 117 116 104 32 34 59 32 73 78 84 '
zz=:zz,'40 49 48 32 42 32 90 50 41 32 47 32 49 48 10 50 48 48 32 69 78 68 1'
zz=:zz,'0 126 126 126 126 10 10 126 126 126 126 32 123 32 46 106 32 125 10 '
zz=:zz,'109 111 110 97 100 58 32 32 110 116 82 105 115 101 115 101 116 32 6'
zz=:zz,'1 46 32 115 117 110 114 105 115 101 115 101 116 49 32 102 108 66 76'
zz=:zz,' 72 77 68 89 10 10 32 32 78 66 46 32 114 105 115 101 32 97 110 100 '
zz=:zz,'32 115 101 116 32 116 105 109 101 115 32 97 116 32 68 111 103 32 76'
zz=:zz,' 97 107 101 32 116 111 100 97 121 32 40 100 97 121 108 105 103 104 '
zz=:zz,'116 32 115 97 118 105 110 103 115 41 10 32 32 116 100 61 46 32 40 5'
zz=:zz,'2 52 32 43 32 49 57 37 54 48 41 44 40 45 32 55 54 32 43 32 50 49 37'
zz=:zz,' 54 48 41 44 32 52 32 44 32 49 32 124 46 32 116 111 100 97 121 32 4'
zz=:zz,'8 10 32 32 115 117 110 114 105 115 101 115 101 116 49 32 116 100 10'
zz=:zz,' 10 32 32 78 66 46 32 114 105 115 101 32 97 110 100 32 115 101 116 '
zz=:zz,'32 116 105 109 101 115 32 111 110 32 74 117 110 101 32 51 48 32 49 '
zz=:zz,'57 57 53 32 111 110 32 71 114 101 101 110 119 105 99 104 32 109 101'
zz=:zz,' 114 105 100 105 97 110 10 32 32 116 48 61 46 32 32 32 48 32 48 32 '
zz=:zz,'48 32 54 32 51 48 32 49 57 57 53 32 32 78 66 46 32 101 113 117 97 1'
zz=:zz,'16 111 114 10 32 32 116 49 61 46 32 32 52 57 32 48 32 48 32 54 32 5'
zz=:zz,'1 48 32 49 57 57 53 32 32 78 66 46 32 110 111 114 116 104 32 45 32 '
zz=:zz,'108 97 116 32 111 102 32 119 101 115 116 101 114 110 32 85 83 47 67'
zz=:zz,' 97 110 97 100 97 32 98 111 114 100 101 114 10 32 32 116 50 61 46 3'
zz=:zz,'2 95 52 55 32 48 32 48 32 54 32 51 48 32 49 57 57 53 32 32 78 66 46'
zz=:zz,' 32 115 111 117 116 104 32 45 32 115 111 117 116 104 101 114 110 32'
zz=:zz,' 67 104 105 108 101 32 97 110 100 32 65 114 103 101 110 116 105 110'
zz=:zz,' 97 10 32 32 116 51 61 46 32 32 55 53 32 48 32 48 32 54 32 51 48 32'
zz=:zz,' 49 57 57 53 32 32 78 66 46 32 102 97 114 32 110 111 114 116 104 32'
zz=:zz,' 40 115 117 110 32 97 108 119 97 121 115 32 117 112 41 10 32 32 116'
zz=:zz,' 52 61 46 32 95 55 53 32 48 32 48 32 54 32 51 48 32 49 57 57 53 32 '
zz=:zz,'32 78 66 46 32 102 97 114 32 115 111 117 116 104 32 40 115 117 110 '
zz=:zz,'32 97 108 119 97 121 115 32 100 111 119 110 41 10 10 32 32 115 117 '
zz=:zz,'110 114 105 115 101 115 101 116 49 32 116 48 10 10 32 32 115 117 11'
zz=:zz,'0 114 105 115 101 115 101 116 49 32 116 48 32 44 32 116 49 32 44 32'
zz=:zz,' 116 50 32 44 32 116 51 32 44 58 32 116 52 10 10 32 32 78 66 46 32 '
zz=:zz,'99 111 109 112 97 114 101 32 97 108 103 111 114 105 116 104 109 115'
zz=:zz,' 10 32 32 115 117 110 49 61 46 32 115 117 110 114 105 115 101 115 1'
zz=:zz,'01 116 49 32 116 48 32 44 32 116 49 32 44 32 116 50 32 44 32 116 51'
zz=:zz,' 32 44 58 32 116 52 10 32 32 115 117 110 48 61 46 32 115 117 110 11'
zz=:zz,'4 105 115 101 115 101 116 48 32 125 58 34 49 32 116 48 32 44 32 116'
zz=:zz,' 49 32 44 32 116 50 32 44 32 116 51 32 44 58 32 116 52 10 32 32 115'
zz=:zz,' 117 110 49 32 45 32 115 117 110 48 10 10 32 32 78 66 46 32 116 105'
zz=:zz,' 109 101 115 32 111 110 32 101 113 117 97 116 111 114 32 102 111 11'
zz=:zz,'4 32 77 97 114 99 104 32 50 49 32 49 57 57 53 32 102 111 114 32 97 '
zz=:zz,'108 108 32 49 32 104 111 117 114 32 116 105 109 101 32 122 111 110 '
zz=:zz,'101 115 10 32 32 115 117 110 114 105 115 101 115 101 116 49 32 48 3'
zz=:zz,'2 48 32 44 34 49 32 40 44 46 105 46 32 50 52 41 32 44 34 49 32 93 3'
zz=:zz,'2 51 32 50 49 32 49 57 57 53 10 10 32 32 78 66 46 32 116 105 109 10'
zz=:zz,'1 115 32 102 111 114 32 99 97 108 101 110 100 97 114 32 121 101 97 '
zz=:zz,'114 32 49 57 57 53 32 111 110 32 116 104 101 32 71 114 101 101 110 '
zz=:zz,'119 105 99 104 32 109 101 114 105 100 105 97 110 10 32 32 109 100 1'
zz=:zz,'21 57 53 61 46 32 52 55 32 48 32 48 32 44 34 49 32 93 32 49 32 124 '
zz=:zz,'46 34 49 32 121 101 97 114 100 97 116 101 115 32 49 57 57 53 10 32 '
zz=:zz,'32 114 115 49 57 53 61 46 32 115 117 110 114 105 115 101 115 101 11'
zz=:zz,'6 49 32 109 100 121 57 53 10 126 126 126 126 10 10 10 10 10{a.);''xm'
zz=:zz,'lutils'';''quick and dirty xml parsing & processing words''           '
zz=:24712{.zz
showpass 2 9 put ". ".'zz_',SOLOCALE,'_' [ cocurrent 'base' NB.{*JOD*}
".soclear NB.{*JOD*}


cocurrent SO__JODobj NB.{*JOD*}
zz=:''
zz=:zz,',:<;.(_1) 44 44 117 116 105 108 115 32 45 32 103 101 110 101 114 97'
zz=:zz,' 108 32 117 116 105 108 105 116 121 32 119 111 114 100 115 13 10 61'
zz=:zz,' 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 '
zz=:zz,'61 61 61 61 61 61 13 10 13 10 96 117 116 105 108 115 96 32 105 115 '
zz=:zz,'32 97 32 99 111 108 108 101 99 116 105 111 110 32 111 102 32 103 10'
zz=:zz,'1 110 101 114 97 108 32 74 32 117 116 105 108 105 116 121 32 119 11'
zz=:zz,'1 114 100 115 46 13 10 73 110 32 116 121 112 105 99 97 108 32 74 79'
zz=:zz,' 68 32 97 112 112 108 105 99 116 105 111 110 115 32 96 117 116 105 '
zz=:zz,'108 115 96 32 105 115 32 116 104 101 32 108 97 115 116 13 10 100 10'
zz=:zz,'5 99 116 105 111 110 97 114 121 32 111 110 32 116 104 101 32 112 97'
zz=:zz,' 116 104 46 32 70 111 114 32 101 120 97 109 112 108 101 32 116 104 '
zz=:zz,'101 32 74 79 68 13 10 100 101 118 101 108 111 112 109 101 110 116 3'
zz=:zz,'2 100 105 99 116 105 111 110 97 114 121 32 112 97 116 104 32 105 11'
zz=:zz,'5 58 13 10 13 10 32 32 32 32 32 32 32 32 32 32 32 100 105 100 32 48'
zz=:zz,' 32 32 13 10 32 32 32 32 32 32 32 32 43 45 43 45 45 45 45 45 45 43 '
zz=:zz,'45 45 45 43 45 45 45 45 45 43 13 10 32 32 32 32 32 32 32 32 124 49 '
zz=:zz,'124 106 111 100 100 101 118 124 106 111 100 124 117 116 105 108 115'
zz=:zz,' 124 13 10 32 32 32 32 32 32 32 32 43 45 43 45 45 45 45 45 45 43 45'
zz=:zz,' 45 45 43 45 45 45 45 45 43 13 10 13 10 87 104 105 108 101 32 109 1'
zz=:zz,'21 32 91 83 109 117 103 77 117 103 93 40 104 116 116 112 58 47 47 9'
zz=:zz,'9 111 110 99 101 112 116 99 111 110 116 114 111 108 46 115 109 117 '
zz=:zz,'103 109 117 103 46 99 111 109 41 13 10 116 111 111 108 115 32 104 9'
zz=:zz,'7 118 101 32 116 104 101 32 112 97 116 104 58 13 10 13 10 32 32 32 '
zz=:zz,'32 32 32 32 32 32 32 32 100 105 100 32 48 13 10 32 32 32 32 32 32 3'
zz=:zz,'2 32 43 45 43 45 45 45 45 45 45 45 43 45 45 45 45 43 45 45 45 45 45'
zz=:zz,' 43 45 45 45 45 45 43 13 10 32 32 32 32 32 32 32 32 124 49 124 115 '
zz=:zz,'109 117 103 100 101 118 124 115 109 117 103 124 105 109 97 103 101 '
zz=:zz,'124 117 116 105 108 115 124 13 10 32 32 32 32 32 32 32 32 43 45 43 '
zz=:zz,'45 45 45 45 45 45 45 43 45 45 45 45 43 45 45 45 45 45 43 45 45 45 4'
zz=:zz,'5 45 43 32 32 13 10 32 32 32 32 32 32 32 32 13 10 74 79 68 32 112 9'
zz=:zz,'7 116 104 115 32 117 115 117 97 108 108 121 32 103 111 32 102 114 1'
zz=:zz,'11 109 32 115 112 101 99 105 102 105 99 32 116 111 32 103 101 110 1'
zz=:zz,'01 114 97 108 46 32 72 101 110 99 101 13 10 119 111 114 100 115 32 '
zz=:zz,'114 101 108 101 118 97 110 116 32 116 111 32 97 32 112 97 114 116 1'
zz=:zz,'05 99 117 108 97 114 32 97 112 112 108 105 99 97 116 105 111 110 32'
zz=:zz,' 119 105 108 108 13 10 97 112 112 101 97 114 32 110 101 97 114 32 1'
zz=:zz,'16 104 101 32 102 114 111 110 116 32 111 102 32 116 104 101 32 112 '
zz=:zz,'97 116 104 32 119 104 105 108 101 32 109 111 114 101 32 103 101 110'
zz=:zz,' 101 114 97 108 13 10 119 111 114 100 115 32 119 105 108 108 32 97 '
zz=:zz,'112 112 101 97 114 32 110 101 97 114 32 116 104 101 32 101 110 100 '
zz=:zz,'46 32 13 10 13 10 68 117 114 105 110 103 32 100 101 118 101 108 111'
zz=:zz,' 112 109 101 110 116 32 121 111 117 32 111 102 116 101 110 32 99 11'
zz=:zz,'4 101 97 116 101 32 103 101 110 101 114 97 108 32 13 10 112 117 114'
zz=:zz,' 112 111 115 101 32 119 111 114 100 115 46 32 73 102 32 115 117 99 '
zz=:zz,'104 32 119 111 114 100 115 32 97 114 101 32 115 111 32 103 101 110 '
zz=:zz,'101 114 105 99 13 10 116 104 97 116 32 116 104 101 121 32 109 97 12'
zz=:zz,'1 32 102 105 110 100 32 117 115 101 32 105 110 32 97 110 121 32 74 '
zz=:zz,'32 97 112 112 108 105 99 97 116 105 111 110 32 99 111 110 115 105 1'
zz=:zz,'00 101 114 13 10 115 116 111 114 105 110 103 32 116 104 101 109 32 '
zz=:zz,'105 110 32 96 117 116 105 108 115 96 46 32 13 10 13 10{a.          '
zz=:3340{.zz
showpass 5 put >1{,".".'zz_',SOLOCALE,'_' [ cocurrent 'base'  NB.{*JOD*}
".soclear NB.{*JOD*}


cocurrent 'base' NB.{*JOD*}
0 0$(4!:55);:'sonl_z_ SOLOCALE_z_ soput_z_ soclear_z_' NB.{*JOD*}
showpass 'NB. end-of-JOD-dump-file regenerate cross references with:  0 globs&> }. revo '''' ' NB.{*JOD*}
